<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-10-07T11:44:56+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">pocj8ur4in’s blog</title><subtitle></subtitle><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><entry><title type="html">[Github Pages] 6. Github Pages 블로그 기능 추가</title><link href="http://localhost:4000/github%20pages/blog6/" rel="alternate" type="text/html" title="[Github Pages] 6. Github Pages 블로그 기능 추가" /><published>2023-04-10T00:00:00+09:00</published><updated>2023-10-06T00:00:00+09:00</updated><id>http://localhost:4000/github%20pages/blog6</id><content type="html" xml:base="http://localhost:4000/github%20pages/blog6/"><![CDATA[<blockquote>
  <p>이 게시물은 Github Pages 블로그, 혹은 Minimal Mistakes 테마에 없는 기능들을 추가해나간 기록들이다. html이나 css를 다룰 줄 알면 금방 할 수 있는, 혹은 다 구글링하면 나오는 내용들이긴 하지만 내가 어떻게 문제를 인식하여 어떤 과정을 거쳐 이를 해결하였는지, 에 대해 자세히 쓰고 싶었다. 그래서 이 게시물은 다른 게시물들과 달리, 내가 블로그에서 부족하다고 느낀 점들을 계속 조금씩이라도 보충해나갈 계획이다.</p>
</blockquote>

<h2 id="1-블로그-댓글-feat-disqus-giscus">1. 블로그 댓글 (feat. disqus, giscus)</h2>
<p>앞서 서술한 게시물을 보면 Github Pages는 정적 웹 사이트 호스팅 서비스라는 말이 있다. 모든 웹 페이지를 미리 생성하고, 방문자로부터 요청이 들어오면 미리 만든 웹 페이지를 그대로 응답한다는 건데, 사용자와 동적으로 정보를 주고받아야 하는 댓글 등의 기능은 불가능하다는 것이다.<br /></p>

<p>그래서 처음에는 댓글 플랫폼인 <a href="https://disqus.com">disqus</a>를 통해 이를 해결하고자 하였다. 방법은 간단한데, 사이트에 가입하고 무료 플랜을 구독한 다음에 <code class="language-plaintext highlighter-rouge">_config.yml</code>를 다음과 같이 수정해주기만 하면 된다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>comments:
  provider               : "disqus" # 댓글 제공자 지정
  disqus:
    shortname            :          # disqus ID 지정
</code></pre></div></div>

<p>그런데 disqus에서 제공하는 기능인 ‘SNS로 댓글 달기’은 개발자 친화적인 기능은 아니였고, 또 나중에는 광고가 노출되기 시작했다. 그래서 대안으로 찾은 게 <a href="https://giscus.app/ko">giscus</a>인데, GitHub Discussions로 작동하고, 마크다운도 지원하면서 대댓글이나 반응과 같은 자잘한 기능들이 마음에 들었다.</p>

<p><img src="https://github.com/pocj8ur4in/pocj8ur4in.github.io/assets/105341168/d0db9e9a-29a3-4529-918e-f9ae0ddc9b65" width="100%" /></p>

<p>적용하는 방법도 Github 앱을 저장소에 설치한 뒤에 html 파일에 아래의 스크립트를 넣어주기만 하면 되는데, 나 같은 경우에는 Minimal Mistakes 테마에서 <code class="language-plaintext highlighter-rouge">_includes/social_share.html</code> 파일에 해당 구문을 넣어 적용시켰다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;section class="page__share"&gt;
  &lt;script src="https://giscus.app/client.js"
    data-repo="pocj8ur4in/pocj8ur4in.github.io"
    data-repo-id="R_kgDOICGarA"
    data-category="Q&amp;A"
    data-category-id="DIC_kwDOICGarM4CZ65L"
    data-mapping="pathname"
    data-strict="1"
    data-reactions-enabled="0"
    data-emit-metadata="1"
    data-input-position="top"
    data-theme="dark_dimmed"
    data-lang="ko"
    data-loading="lazy"
    crossorigin="anonymous"
    async&gt;
  &lt;/script&gt;
&lt;/section&gt;
</code></pre></div></div>

<h2 id="2-블로그-google-검색-노출-및-검색-설정">2. 블로그 Google 검색 노출 및 검색 설정</h2>
<p>아무래도 블로그를 운영하다 보면 다른 사람들의 반응이 궁금할 때가 많은데, 아무것도 설정하지 않은 블로그는 검색되지 않는다는 사실을 깨닫고 해결책을 찾아보았다. <a href="https://search.google.com/search-console/about">Google Search Console</a>에서 내 도메인을 입력한 다음에 소유권 확인을 위해 다운받은 <code class="language-plaintext highlighter-rouge">.HTML</code>파일을 <code class="language-plaintext highlighter-rouge">root</code>에 위치시키만 하면 며칠 안으로 아래와 같이 적용된다.</p>

<p><img src="https://github.com/pocj8ur4in/pocj8ur4in.github.io/assets/105341168/5876c2af-191d-47d7-ab9e-f3c2c55bde32" width="70%" /></p>

<p>추가로 블로그 포스트들이 검색 엔진에 검색되는 것을 가능하도록 진행할 작업들이 있는데, 먼저 <code class="language-plaintext highlighter-rouge">_config.yml</code> 파일에서 아래 설정들을 <code class="language-plaintext highlighter-rouge">true</code>로 설정한다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>search                   : # 블로그 검색 여부 지정
search_full_content      : # 블로그의 내용 검색 여부 지정
</code></pre></div></div>

<p>그리고 웹 크롤링을 위해 <a href="https://github.com/pocj8ur4in/pocj8ur4in.github.io/blob/main/sitemap.yml"><code class="language-plaintext highlighter-rouge">sitemap.yml</code></a>과 <code class="language-plaintext highlighter-rouge">robots.txt</code> 파일을 생성해 <code class="language-plaintext highlighter-rouge">root</code>에 위치시키면 된다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 모든 웹 사이트 컨텐츠에 대한 모든 웹 크롤러의 접근 허용
User-agent: *
Allow: /

# 모든 웹 사이트 컨텐츠에 대한 모든 웹 크롤러의 접근 차단
User-agent: *
Disallow: /

# 구글 검색 로봇만 차단하고, 다른 모든 웹 사이트 컨텐츠에 대한 모든 웹 크롤러의 접근 허용
User-agent: Googlebot
Disallow: /

# 네이버 검색로봇만 차단하고, 다른 모든 웹 사이트 컨텐츠에 대한 모든 웹 크롤러의 접근 허용
User-agent: Yeti
Disallow: /

Sitemap: https://pocj8ur4in.github.io/sitemap.xml
</code></pre></div></div>

<p>만약에 블로그의 방문자 수 통계를 보고 싶다면, <a href="https://analytics.google.com/analytics/web/provision/#/provision">Google Analytics</a>를 가입한 후 애널리틱스 데이터 스트림을 설정하면 된다. 이때, 측정 ID를 복사한 후 <code class="language-plaintext highlighter-rouge">_config.yml</code> 파일을 다음과 같이 수정하면 된다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Analytics
analytics:
  provider               : "google-gtag"
  google:
    tracking_id          : "(측정 ID)"
</code></pre></div></div>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="Github Pages" /><category term="Github" /><summary type="html"><![CDATA[이 게시물은 Github Pages 블로그, 혹은 Minimal Mistakes 테마에 없는 기능들을 추가해나간 기록들이다. html이나 css를 다룰 줄 알면 금방 할 수 있는, 혹은 다 구글링하면 나오는 내용들이긴 하지만 내가 어떻게 문제를 인식하여 어떤 과정을 거쳐 이를 해결하였는지, 에 대해 자세히 쓰고 싶었다. 그래서 이 게시물은 다른 게시물들과 달리, 내가 블로그에서 부족하다고 느낀 점들을 계속 조금씩이라도 보충해나갈 계획이다.]]></summary></entry><entry><title type="html">[Github Pages] 5. Github Pages 블로그 설정 &amp;amp; 포스트</title><link href="http://localhost:4000/github%20pages/blog5/" rel="alternate" type="text/html" title="[Github Pages] 5. Github Pages 블로그 설정 &amp;amp; 포스트" /><published>2023-04-05T00:00:00+09:00</published><updated>2023-04-08T00:00:00+09:00</updated><id>http://localhost:4000/github%20pages/blog5</id><content type="html" xml:base="http://localhost:4000/github%20pages/blog5/"><![CDATA[<blockquote>
  <p>솔직히 블로그 설정을 건드는 부분은 내가 아는 정보들을 그대로 나열할 수 밖에 없다고 생각한다… 그래도 내가 시행착오를 겪었던 경험을 떠올리면서 하나하나 풀어서 작성하려 하였으니, 미숙한 글이지만 남들에게 도움이 되었으면 정말 좋겠다… 그리고 Github Pages이나 Minimal Mistakes으로 처음 블로그를 운영하시는 분들의 시선에 맞춰 html, css에 대한 자세한 내용은 다른 포스트로 옮겼으니 참고해주셨으면 한다.</p>
</blockquote>

<h2 id="1-블로그-기본-설정">1. 블로그 기본 설정</h2>
<p><img width="228" alt="blog1-1" src="https://user-images.githubusercontent.com/105341168/229804167-bbb75af4-6ec4-4683-9753-0f2cbf7d97bb.png" /></p>

<p>위의 디렉터리에서 <code class="language-plaintext highlighter-rouge">_config.yml</code>이라는 파일을 열어보면 다음과 같이 구성되어 있는데, 오른쪽의 주석을 참조해서 나만의 블로그를 커스텀마이징해보자. 이걸 어떻게 적용하는지 잘 모르겠다, 싶은 사람은 <a href="https://github.com/pocj8ur4in/pocj8ur4in.github.io/blob/main/_config.yml">내 블로그에 적용된 것</a>을 예시로 보면서 작업해보자.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>minimal_mistakes_skin    :         # 블로그의 전체적인 스킨 지정 
                                   # (Minimal Mistakes에서 기본적으로 제공)
                                   # "default" "air", "aqua", "contrast", "dark"
                                   # "dirt", "neon", "mint", "plum", "sunrise"

# Site Settings
locale                   : "ko-KR" # 블로그에 쓰일 로컬 언어 지정
title                    :         # 메타 태그에 들어갈 블로그의 제목 지정
subtitle                 :         # 블로그의 제목 하단에 위치할 부제목 지정
name                     :         # 블로그 저자 이름 지정
description              :         # SEO 향상을 위한 meta description 태그 지정
url                      :         # 블로그 url 
                                   # "https://(github ID).github.io"
repository               :         # github repository url
                                   # "https://github.com/(github ID)/(github ID).github.io"
teaser                   :         # 관련 포스트나 검색 등에 들어갈 미리보기 이미지 지정
                                   # ("assets/images/"로 연결)
logo                     :         # 블로그의 제목 옆에 들어갈 로고 이미지 지정
                                   # ("assets/images"로 연결)
masthead_title           :         # 블로그 프로필 상단에 위치할 사이트 제목 지정
breadcrumbs              : true    # 브래드크럼 사용 여부 지정
words_per_minute         : 200     # 포스트를 읽는 데 걸리는 시간을 계산히기 위한 분당 읽는 글자의 지정
</code></pre></div></div>

<h2 id="2-블로그-레이아웃-설정">2. 블로그 레이아웃 설정</h2>
<p>이제 조금은 삭막한(?) 블로그의 레이아웃을 뜯어고칠 차례이다. 우선은 이전처럼 <code class="language-plaintext highlighter-rouge">_config.yml</code> 파일을 아래와 같이 자신이 원하는 대로 수정하면 된다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 블로그 좌측 사이드바에 위치할 프로필 설정
author:
  name             :       # 저자 이름 지정
  avatar           :       # 저자 이미지 지정
  bio              :       # 저자 바이오그래피 지정
  location         :       # 저자 위치 지정
  email            :       # 저자 이메일 지정
  links:                   # 저자 관련 사이트 링크 지정
    - label:               # 사이트 분류 지정
      icon:                # 사이트 아이콘 지정
      url:                 # 사이트 url 지정

## 블로그 하단에 위치할 꼬리말 설정
footer:
  links:                   # 블로그 관련 사이트 링크 지정
    - label:               # 사이트 분류 지정
      icon:                # 사이트 아이콘 지정
      url:                 # 사이트 url 지정
</code></pre></div></div>

<h3 id="1-네비게이션-바">(1) 네비게이션 바</h3>

<p>다음은 기본 테마를 보면서 혹은 자기가 기능을 적용하면서 불편한 점들을 확인하고, 직접 테마의 요소들을 뜯어고치는 건데… 이건 사람마다 달라서 뭐라고 말을 못하겠다. 그래서 나 같은 경우에 어떤 부분이 불편했고, 그래서 수정했는지 얘기해보고자 한다. 우선은 블로그 상단의 네비게이션 바에 내가 보기에 불필요한 카테고리들이 있었다. 그래서 카테고리, 태그만 남기기 위해  <code class="language-plaintext highlighter-rouge">_data/navigation.yml</code> 파일을 수정하였다.  <code class="language-plaintext highlighter-rouge">_pages</code> 디렉토리를 보면 여기에 적용할 수 있는 여러 요소들이 있는데, 직접 입맛에 맛게 적용해보면 된다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>main:
  - title: (카테고리)        # 화면에 보여질 세부 항목의 이름 지정
    url: /(카테고리)/        # _pages 내에 정해진 양식 파일이나 특정 링크로 연결
</code></pre></div></div>

<h3 id="2-블로그-너비-및-폰트-크기">(2) 블로그 너비 및 폰트 크기</h3>

<p>그리고 블로그에 포스트를 쓸 때에 한쪽에는 VS Code를, 다른 쪽에는 로컬에서 호스팅한 블로그를 보기 위한 사파리 브라우저를 띄워 놓곤 했는데, 그때마다 기본으로 설정된 블로그 너비랑 폰트 크기가 글을 읽기에 굉장히 불편했다. 그래서 <code class="language-plaintext highlighter-rouge">_sass/minimal_mistakes/_variables.scss</code> 파일과 <code class="language-plaintext highlighter-rouge">_sass/minimal_mistakes/_reset.scss</code> 파일을 다음과 같이 수정해보았다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 블로그 너비 설정
/*
   Grid
   ========================================================================== */

$right-sidebar-width-narrow: 200px !default;    // default 200px
$right-sidebar-width: 300px !default;           // default 300px
$right-sidebar-width-wide: 400px !default;      // default 400px
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 블로그 폰트 크기 설정
html {
  /* apply a natural box layout model to all elements */
  box-sizing: border-box;
  background-color: $background-color;
  font-size: 16px;                    // Default 16px;

  @include breakpoint($medium) {
    font-size: 16px;                  // Default 18px;
  }

  @include breakpoint($large) {
    font-size: 16px;                  // Default 20px;
  }

  @include breakpoint($x-large) {
    font-size: 16px;                  // Default 22px;
  }

  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
}
</code></pre></div></div>

<h3 id="3-블로그-아이콘">(3) 블로그 아이콘</h3>

<p>또 블로그 주소 창에 같이 뜰 아이콘이 아무것도 안 뜨니 뭔가 내 블로그 같다는 느낌이 안들었다. 그래서 이것 또한 <code class="language-plaintext highlighter-rouge">_includes/_head/custom.html</code> 파일에 내가 원하는 아이콘을 넣었다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;!-- start custom head snippets --&gt;

&lt;!-- insert favicons. use https://realfavicongenerator.net/ --&gt;
&lt;link rel="apple-touch-icon" sizes="180x180" href="/assets/logo.ico/apple-touch-icon.png"&gt;
&lt;link rel="icon" type="image/png" sizes="32x32" href="/assets/logo.ico/favicon-32x32.png"&gt;
&lt;link rel="icon" type="image/png" sizes="16x16" href="/assets/logo.ico/favicon-16x16.png"&gt;
&lt;link rel="mask-icon" href="/assets/logo.ico/safari-pinned-tab.svg" color="#ffffff"&gt;
&lt;meta name="msapplication-TileColor" content="#ffffff"&gt;
&lt;meta name="theme-color" content="#ffffff"&gt;
</code></pre></div></div>

<p>내가 수정한 것은 이정도? 인데 자잘하게 더 파고들면 커스텀마이징할 레이아웃 요소가 정말 많다. html, css, yml 파일을 건드는 것이라 그리 어렵지도 않고, 한번 배워두면 생각보다 쓸 때도 많다. 아래는 Minimal Mistakes Themes의 디렉토리 구조에 주석을 단 것인데, 커스텀마이징이 필요할 때 이를 참고하기 좋은 것 같다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>minimal-mistakes
├── _data                                 # 테마를 커스터마이징하기 위한 파일을 저장하는 디렉터리 
| |                                       # (yml, yaml, json, csv, tsv 파일을 자동으로 읽어들어 site.data로 사용)
| ├── navigation.yml                      # 상단 메뉴바를 커스터마이징하기 위한 파일
| └── ui-text.yml                         # 언어별로 어떤 텍스트로 표시되는지 나열하는 파일
|
├── _site                                 # 재사용되는 html 파일을 저장하는 디렉터리 (공통된 컴포넌트들 보관)
| ├── search                              # 검색 엔진을 커스터마이징한 내용을 저장하는 디렉터리
| ├── analytics-providers
| └── custom.html                         # 분석 플랫폼 공급자를 커스터마이징한 내용을 저장하는 파일
| ├── comments-providers
| └── custom.html                         # 댓글 플랫폼 공급자를 커스터마이징한 내용을 저장하는 파일
| ├── head
| └── custom.html                         # head를 커스터마이징한 내용을 저장하는 파일
| ├── footer
| └── custom.html                         # footer를 커스마이징한 내용을 저장하는 파일
| ├── nav_list                            # 메뉴 상단바의 리스트에 대한 helper 파일
| ├── archive-single.html                 # 아카이브 문서에서 단일 문서를 표현하는 방법을 저장하는 파일
| ├── author-profiles.html                # author profile link애 대한 내용을 저장하는 파일
| ├── author-profile-custom-links.html    # author profile link를 커스마이징한 내용을 저장하는 파일
| ├── breadcrumbs.html                    # breadcrumbs에 대한 내용을 저장하는 파일
| ├── single-page
| ├── page__taxonomy.html                 # 단일 문서에서 태그와 카테고리를 표현하는 방법을 저장하는 파일
| ├── tag-list.html                       # 단일 문서에서 태그 리스트를 표현하는 방법을 저장하는 파일
| └── category-list.html                  # 단일 문서에서 카테고리 리스트를 표현하는 방법을 저장하는 파일
├── _posts                                # 블로그에 포스트한 md 파일을 저장하는 디렉터리
├── _includes
├── _layouts                              # 각 문서의 디자인과 직접적으로 연결된 전체적인 레이아웃 디렉토리
├── _sass                                 # minimal-mistakes.scss에 임포트할 수 있는 scss 파일을 저장하는 스타일시트 디렉터리
├── assets                                # css, js, 이미지 파일을 저장하는 디렉터리
| ├── _css
| ├── _images
| └── _js 
├── _config.yml                           # 블로그를 구성하기 위한 기본적인 설정값을 설정하는 yml 파일
├── Gemfile                               # 사용할 gem 플러그인 목록
├── index.html                            # 블로그 처음 홈 페이지
└── package.json
</code></pre></div></div>

<h2 id="3-블로그-포스트-작성-및-머릿말-작성">3. 블로그 포스트 작성 및 머릿말 작성</h2>
<p><code class="language-plaintext highlighter-rouge">_posts</code> 폴더에 <code class="language-plaintext highlighter-rouge">XXXX(YEAR)-XX(MONTH)-XX(DAY)-(NAME).md</code>을 생성해보자. 이때 YEAR, MONTH, DAY는 포스트가 작성된 연도, 월, 일이 되고 NAME은 포스트의 경로가 된다. 그리고 파일 상단에 위치할 머릿말을 작성하기 위해 아래와 같이 <code class="language-plaintext highlighter-rouge">---</code>에 둘러싸인 내용을 작성해보자.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
title: "[Blog] macOS에서 Minimal Mistakes로 깃허브 블로그 만들기"

categories:
    - Github.io

tag:
    [HTML, JavaScript, SCSS, Ruby]

toc: true
toc_sticky: true

date: 2022-09-26
lastmod: 2022-09-26
---
</code></pre></div></div>

<table>
    <thead>
        <tr>
            <th>양식 이름</th>
            <td>양식 설명</td>
        </tr>
    </thead>
    <tbody>
        <tr>
            <th>title</th>
            <td>포스트 제목</td>
        </tr>
        <tr>
            <th>categories</th>
            <td>포스트 카테고리</td>
        </tr>
        <tr>
            <th>tags</th>
            <td>포스트 태그</td>
        </tr>
        <tr>
            <th>toc</th>
            <td>우측 상단의 목차</td>
        </tr>
        <tr>
            <th>toc_label</th>
            <td>목차 이름</td>
        </tr>
        <tr>
            <th>toc_icon</th>
            <td>목차 아이콘</td>
        </tr>
        <tr>
            <th>toc_sticky</th>
            <td>목차 고정 여부</td>
        </tr>
        <tr>
            <th>date</th>
            <td>포스트 작성일</td>
        </tr>
        <tr>
            <th>lastmod</th>
            <td>포스트 수정일</td>
        </tr>
        <tr>
            <th>author_profile</th>
            <td>프로필 창 표시 여부</td>
        </tr>
    </tbody>
</table>

<p>우리가 글을 작성하는 데에 사용할 <a href="https://www.markdownguide.org/getting-started/">Markdown</a>은 텍스트 기반의 마크업 (MarkUp) 언어로, 특수기호와 문자를 활용한 매우 간단한 구조의 문법을 사용해 보다 빠르게 컨텐츠를 작성할 수 있다! Github의 <code class="language-plaintext highlighter-rouge">README.md</code>가 대표적인 예시인데, Github Pages 역시 이를 활용해 문서를 작성하는 데에 사용한다. 마크다운 문법은 <a href="https://www.markdownguide.org">여기서</a> 상세히 설명하고 있으니 참고하자.</p>

<h2 id="4-블로그-포스트-내에-문자-박스-양식-넣어보기">4. 블로그 포스트 내에 문자 박스 양식 넣어보기</h2>
<p>추가로 <code class="language-plaintext highlighter-rouge">minimal-mistakes theme</code>의 css로 설정된 스타일 요소를 class로 불러와 적용할 수 있는데, 그중 하나인 상자 양식을 활용해보자. Markdown (<code class="language-plaintext highlighter-rouge">.md</code>) 파일이니까 html 태그들을 쓰면 그대로 화면에 표현할 수 있다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;p class="notice--primary"&gt;
  &lt;strong&gt;
    이 항목은 현재 작성중입니다.
  &lt;/strong&gt;&lt;br&gt;
    &gt; 아직 미완성된 코드나 문장 구조가 정확하지 않은 내용이 있을 수 있으니 유의하시기 바랍니다.
&lt;/p&gt;

&lt;p class="notice--info"&gt;
  &lt;strong&gt;
    이 항목은 macOS 기반으로 작성되었습니다.
  &lt;/strong&gt;&lt;br&gt;
    &gt; 프로그램, 단축키 설정 등이 다른 OS 환경과는 호환이 안되는 경우가 많으니 유의하시기 바랍니다.
&lt;/p&gt;

&lt;p class="notice--danger"&gt;
  &lt;strong&gt;
    이 항목은 최신의 내용을 담고 있지 않을 수 있습니다.
  &lt;/strong&gt;&lt;br&gt;
    &gt; 맨 아래의 항목 업데이트 날짜와 OS나 프로그램의 버전 정보를 꼭 확인해주시기 바랍니다.
&lt;/p&gt;

&lt;p class="notice--warning"&gt;
  &lt;strong&gt;
    이 항목은 검증되지 않은, 편향된, 혹은 잘못된 내용을 포함할 수 있습니다.
  &lt;/strong&gt;&lt;br&gt;
    &gt; 작성자 역시 공부하는 학생이기에 해당 부분을 댓글이나 이메일을 통해 지적해주신다면 정말 감사할 것 같습니다.
&lt;/p&gt;
</code></pre></div></div>

<div style="background-color: black; padding: 2% 2% 2% 2%">
  <p class="notice--primary">
    <strong>
      이 항목은 현재 작성중입니다.
    </strong><br />
      &gt; 아직 미완성된 코드나 문장 구조가 정확하지 않은 내용이 있을 수 있으니 유의하시기 바랍니다.
  </p>

  <p class="notice--info">
    <strong>
      이 항목은 macOS 기반으로 작성되었습니다.
    </strong><br />
      &gt; 프로그램, 단축키 설정 등이 다른 OS 환경과는 호환이 안되는 경우가 많으니 유의하시기 바랍니다.
  </p>

  <p class="notice--danger">
    <strong>
      이 항목은 최신의 내용을 담고 있지 않을 수 있습니다.
    </strong><br />
      &gt; 맨 아래의 항목 업데이트 날짜와 OS나 프로그램의 버전 정보를 꼭 확인해주시기 바랍니다.
  </p>

  <p class="notice--warning">
    <strong>
      이 항목은 검증되지 않은, 편향된, 혹은 잘못된 내용을 포함할 수 있습니다.
    </strong><br />
      &gt; 작성자 역시 공부하는 학생이기에 해당 부분을 댓글이나 이메일을 통해 지적해주신다면 정말 감사할 것 같습니다.
  </p>
</div>

<blockquote>
  <p>Reference</p>
  <ul>
    <li><a href="http://jekyllrb-ko.github.io/docs/structure/">Jekyll 디렉토리 구조 (번역)</a></li>
  </ul>
</blockquote>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="Github Pages" /><category term="Github" /><summary type="html"><![CDATA[솔직히 블로그 설정을 건드는 부분은 내가 아는 정보들을 그대로 나열할 수 밖에 없다고 생각한다… 그래도 내가 시행착오를 겪었던 경험을 떠올리면서 하나하나 풀어서 작성하려 하였으니, 미숙한 글이지만 남들에게 도움이 되었으면 정말 좋겠다… 그리고 Github Pages이나 Minimal Mistakes으로 처음 블로그를 운영하시는 분들의 시선에 맞춰 html, css에 대한 자세한 내용은 다른 포스트로 옮겼으니 참고해주셨으면 한다.]]></summary></entry><entry><title type="html">[Github Pages] 4. Github Pages 블로그 개설</title><link href="http://localhost:4000/github%20pages/blog4/" rel="alternate" type="text/html" title="[Github Pages] 4. Github Pages 블로그 개설" /><published>2023-04-03T00:00:00+09:00</published><updated>2023-04-04T00:00:00+09:00</updated><id>http://localhost:4000/github%20pages/blog4</id><content type="html" xml:base="http://localhost:4000/github%20pages/blog4/"><![CDATA[<blockquote>
  <p>이 내용은 작년 9월 말부터 작성한 Minimal Mistakes으로 Github Blog 만들기’의 내용 일부분을 재구성한 것이다. 해당 포스트도 완성도 있는 글이고, 처음 블로그를 설정하시는 분들 또한 도움을 얻을 것이라 생각되나… 그때쯤 작성한 글들 대부분이 너무 나열식으로 쓰였고, 출처에 대한 언급이 많이 부실해 (모르는 부분이 있어 찾으려 하면 출처가 없어서 나도 찾지 못한다…), 부족한 점들을 보완하기 위해 다시 작성되었다.<br />
그리고 현재 작성자의 실행 환경의 OS가 MacOS임을 미리 밝혀둔다. 아마 근시일 내에는 기기를 바꿀 계획이 없으니, 동일한 OS를 사용하시는 분들은 그대로 진행해주시면 된다.</p>
</blockquote>

<h2 id="1-ruby-설치">1. Ruby 설치</h2>
<p>macOS는 Ruby가 기본적으로 설치되어 있으니, 터미널을 실행하고 다음 명령어를 입력해 Ruby의 설치 여부를 확인한다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ruby -v
// ruby X.X.X 출력 : 정상 설치
// "zsh: command not found: ruby" 출력 : 설치 오류
</code></pre></div></div>

<h2 id="2-jekyll-설치">2. Jekyll 설치</h2>
<p>터미널 창에 gem install 명령어를 입력해 Jekyll을 설치한다. 참고로 gem은 분산 패키지로, 라이브러리의 작성, 공개, 설치를 도와주는 시스템이다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem install jekyll
</code></pre></div></div>

<p>그리고 터미널 창에 다음 명령어를 입력해 Jekyll가 정상적으로 설치되었는지 확인한다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jekyll -v
// jekyll X.X.X 출력 : 정상 설치
// "zsh: command not found: jekyll" 출력 : 설치 오류
</code></pre></div></div>

<h2 id="3-jekyll-theme-선택">3. Jekyll theme 선택</h2>
<p>이전 포스트에서 Jekyll은 레이아웃에 해당하는 templates과 컨텐츠에 해당하는 contents를 합쳐 HTML 문서로 미리 빌드해 저장하고, 이를 방문자에게 보여준다고 설명한 바 있다. 그런데 대부분의 블로거들은 레이아웃의 중요성은 알지만 이를 어떻게 구성해야할지 몰라 막막할 것이다. 그런 블로거들을 위해 존재하는 것이 Jekyll theme이다.<br /></p>

<p>Jekyll theme은 다른 사람들이 미리 작업해놓은 templates으로, 많은 Jekyll theme들이 무료로 공개되어 있다. 무료 Jekyll 중에 사람들이 많이 사용하는 것이 <a href="https://mmistakes.github.io/minimal-mistakes/">minimal-mistakes</a>이다. 간결하고 깔끔한 디자인과 꾸준한 업데이트, 그리고 무엇보다 엄청난 양의 한글 래퍼런스 (…)로 인해 나 역시도 minimal-mistakes을 기반으로 블로그를 개설하였기에, 앞으로 진행할 블로그 개설 역시 minimal-mistakes를 기반으로 진행한다.<br /></p>

<p>먼저 <a href="https://github.com/mmistakes/minimal-mistakes">minimal-mistakes Github 페이지</a>에서 <code class="language-plaintext highlighter-rouge">.zip</code> 파일을 다운로드한 후 압축을 해제한다. 그리고 아래 사진을 참고하여 필요한 파일 및 디렉토리만 남기고 나머지는 삭제한다. (아, 기존에 존재하지 않는 <code class="language-plaintext highlighter-rouge">_post</code>와 <code class="language-plaintext highlighter-rouge">_page</code> 디렉토리는 추후에 사용할 예정이니 미리 생성해두자.)</p>

<p><img width="228" alt="blog1-1" src="https://user-images.githubusercontent.com/105341168/229804167-bbb75af4-6ec4-4683-9753-0f2cbf7d97bb.png" /></p>

<h2 id="4-로컬에서-웹-호스팅">4. 로컬에서 웹 호스팅</h2>
<p>터미널 창에 다음 명령어를 입력해 Gemfile을 설치하기 위한 bundler를 사용해보자. 그러면 <code class="language-plaintext highlighter-rouge">.jekyll-cache</code> 폴더와 <code class="language-plaintext highlighter-rouge">Gemfile.lock</code> 파일이 생성된다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem install bundler
</code></pre></div></div>

<p>bundler 설치가 완료되면, 터미널 창에 다음 명령어를 입력해 Gemfile을 검사해 필요한 목록을 설치할 수 있다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle install
</code></pre></div></div>

<p>이제 터미널 창에 다음 명령어를 입력하여 블로그를 로컬에서 호스팅해보자.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle exec jekyll serve
</code></pre></div></div>

<p><a href="http://127.0.0.1:4000">http://127.0.0.1:4000</a>으로 접속하면 minimal-mistakes이 적용된 블로그 화면을 확인할 수 있다.</p>

<h2 id="5-github-pages에서-웹-호스팅">5. GitHub Pages에서 웹 호스팅</h2>

<p>이제 Github에 <code class="language-plaintext highlighter-rouge">(Github ID).github.io</code>의 형식으로 원격 저장소를 생성하자. 다음은 내 블로그가 저장된 원격 저장소 이미지이다.</p>

<p><img width="535" alt="blog1-2" src="https://user-images.githubusercontent.com/105341168/229810964-1fb40be8-4fc9-4949-89b2-1eb4b77fa0ff.png" /></p>

<p>그리고 지금까지 정리한 내용들을 포함한 디렉터리를 github에 push하면, <code class="language-plaintext highlighter-rouge">https://(Github ID).github.io</code>를 주소로 하는 블로그가 생성된 것을 확인해볼 수 있다. 그리고 <code class="language-plaintext highlighter-rouge">https://github.com/(Github ID)/(Github ID).github.io/actions</code>에서 블로그가 빌드된 기록을 확인할 수 있다. 만약 원격 저장소에서 푸시된 내용에 대한 빌드 작업이 실패한다면, 그 내용의 배포가 진행되지 않은 것을 확인해볼 수 있다.</p>

<blockquote>
  <p>Reference</p>
  <ul>
    <li>SW developer 님이 작성하신, <a href="https://devinlife.com/howto/">GitHub Pages 블로그 따라하기</a></li>
  </ul>
</blockquote>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="Github Pages" /><category term="Github" /><summary type="html"><![CDATA[이 내용은 작년 9월 말부터 작성한 Minimal Mistakes으로 Github Blog 만들기’의 내용 일부분을 재구성한 것이다. 해당 포스트도 완성도 있는 글이고, 처음 블로그를 설정하시는 분들 또한 도움을 얻을 것이라 생각되나… 그때쯤 작성한 글들 대부분이 너무 나열식으로 쓰였고, 출처에 대한 언급이 많이 부실해 (모르는 부분이 있어 찾으려 하면 출처가 없어서 나도 찾지 못한다…), 부족한 점들을 보완하기 위해 다시 작성되었다. 그리고 현재 작성자의 실행 환경의 OS가 MacOS임을 미리 밝혀둔다. 아마 근시일 내에는 기기를 바꿀 계획이 없으니, 동일한 OS를 사용하시는 분들은 그대로 진행해주시면 된다.]]></summary></entry><entry><title type="html">[Github Pages] 3. Github Pages 블로그 소개</title><link href="http://localhost:4000/github%20pages/blog3/" rel="alternate" type="text/html" title="[Github Pages] 3. Github Pages 블로그 소개" /><published>2023-04-02T00:00:00+09:00</published><updated>2023-04-02T00:00:00+09:00</updated><id>http://localhost:4000/github%20pages/blog3</id><content type="html" xml:base="http://localhost:4000/github%20pages/blog3/"><![CDATA[<blockquote>
  <p>사실 이전 포스트에서 Github Pages에 대한 내용이 있어 좀 중복되는 느낌이 들 수도 있다. 하지만, 이 포스트에서는 Github Pages의 원리를 짚어보고자 작성한 것이니 혹시 모르는 사람들은 한번 읽어보자.</p>
</blockquote>

<h2 id="github-pages-블로그란">Github Pages 블로그란?</h2>

<p><img src="https://user-images.githubusercontent.com/105341168/229191108-c3f52e0c-4b2b-46af-9e07-5c59bd89183d.jpeg" alt="image" /></p>

<h3 id="정적-웹사이트-생성기-ssg-static-site-generator">정적 웹사이트 생성기 (SSG; Static Site Generator)</h3>

<p>많은 사람들이 Github Pages로 블로그를 사용하고 있어 이를 블로그 서비스로 인식하기 쉽지만, 사실 Github Pages의 실체는! 바로 <b>Github에서 제공하는 정적 웹 사이트 호스팅 서비스</b>이다. 그리고 정적 웹 사이트 호스팅 서비스를 가능하게 하는 것이 바로 SSG란 것이다.<br /></p>

<p>SSG로 생성된 사이트는 모든 웹 페이지를 미리 생성하고, 방문자로부터 요청이 들어오면 미리 만든 웹 페이지를 그대로 응답해준다. 그러므로 서버와 클라이언트 모두 렌더링을 위한 작업이 거의 없기 때문에, SSG로 생성된 웹 사이트는 속도가 매우 빠른 장점을 가진다. 그리고 SSG로 생성된 사이트는 미리 만들어놓은 수많은 웹 페이지로 이루어져 있는 구조라 검색엔진 최적화 (SEO; Search Engine Optimization)가 뛰어나 검색엔진이 사이트를 크롤링하는 데에 적합하다.<br /></p>

<p>그러나 빌드할 때마다 모든 웹 페이지를 생성하는 작업을 매번 하다보니, 컨텐츠를 자주 업데이트하는 웹 사이트나 규모가 커 빌드 시간이 오래 걸리는 웹 사이트에서는 큰 비효율성이 발생해 SSG보다는 다른 렌더링 기술을 사용한다. 그래서 SSG는 개인 블로그와 같이 컨텐츠의 변경이 자주 일어나지 않은, 소규모 웹 사이트를 제작할 때 많이 쓰이는 기술이다. (SSG 외에도 SPA, SSR과 같은 렌더링 기술이 있는데, 달레 님께서 <a href="https://www.daleseo.com/spa-ssg-ssr/">SPA와 SSG, 그리고 SSR</a>이라는 글에서 잘 정리해주셨으니 참고하길 바란다.)<br /></p>

<p>지금 현재 내가 사용하고 있는 Github Pages 테마인 <a href="https://mmistakes.github.io/minimal-mistakes/">Minimal Mistakes</a>는 Jekyll을 정적 웹사이트 생성기로 사용해 웹 사이트를 정적으로 생성한다. Jekyll 외에도 Hexo, Hugo와 같은 여러 정적 웹사이트 생성기들이 존재하는데, 이들을 간단하게 비교해보자.</p>

<ul>
  <li><a href="https://jekyllrb-ko.github.io">Jekyll</a>
    <ul>
      <li>Ruby 기반</li>
      <li>가장 많이 쓰이고, 한글 래퍼런스 많음</li>
      <li>Github Pages에서 공식으로 지원 : push한 글들이 별도의 빌드 과정 없이 알아서 Publish</li>
      <li>글이 많아질수록 전체 빌드 속도가 느려짐
<br /><br /></li>
    </ul>
  </li>
  <li><a href="https://hexo.io/ko/index.html">Hexo</a>
    <ul>
      <li>Node.js (javascript) 기반</li>
      <li>(javascript를 써서 그런지) 한글 래퍼런스 많음</li>
      <li><a href="https://www.holaxprogramming.com/2017/04/16/github-page-and-hexo/">Hexo로 블로그를 만들 때 참고할 만한 글</a>
<br /><br /></li>
    </ul>
  </li>
  <li><a href="https://gohugo.io">Hugo</a>
    <ul>
      <li>Golang 기반</li>
      <li>런타임에 다른 의존성이 필요하지 않아, 빌드 과정을 포함해도 빌드 속도가 빠른 편</li>
      <li>한글 래퍼런스는 상대적으로 적음</li>
      <li><a href="https://github.com/Integerous/Integerous.github.io">Hugo로 블로그를 만들 때 참고할 만한 글</a>
<br /><br /></li>
    </ul>
  </li>
</ul>

<h3 id="지킬-jekyll">지킬 (Jekyll)</h3>

<p><img src="https://user-images.githubusercontent.com/105341168/229413193-0534897e-6fdc-4c1a-888e-8e2e011045c5.jpg" alt="jekyll-logo" /></p>

<p>사실 SSG 중에 Jekyll이 좋은 거 같아 골랐다기보단, Minimal Mistakes 테마가 내 마음에 들어서 설치했는데 구글링해보니 다들 Jekyll을 쓰더라…의 흐름으로 쓰게 된 거고, Jekyll 말고도 다른 SSG가 있는 것을 알게 된 이후에도 어차피 다 같은 SSG인데 Jekyll 말고 굳이 다른 거를 배워서 쓸 필요성을 못 느껴서 (물론 Jekyll이 문제가 많다고 느끼면 다른 SSG를 사용할지에 대해 고민해봐야 할 것이다.) Jekyll을 계속 사용하고 있긴 하다. 일단 Jekyll이 어떤 방식으로 동작하는지 정리해보겠다. (사실 SSG와 동일한 원리인데, 이를 구체화한 것으로 생각하면 된다.)<br /></p>

<p>Jekyll은 동적 웹 사이트 (Dynamic Web Site)과 동일하게, 레이아웃에 해당하는 templates과 컨텐츠에 해당하는 contents를 분리해 저장한다. (이때 Jekyll에서 templates을 작성할 때 사용하는 언어가 Liquid이고, contents를 작성할 때 사용하는 언어가 markdown이다.) 하지만 동적 사이트와 달리, Jekyll은 templates와 contents을 합친 HTML 문서를 미리 빌드해 저장하고, 방문자가 요청을 보내면 정적 컨텐츠에 해당하는 HTML 문서를 전송한다.<br /></p>

<p>그래서 Jekyll은 웹 사이트를 운영하기 위한 HTML 관련 지식을 몰라도, .md 파일로 문서를 작성하면 HTML 파일로 이를 변환해주는 작업을 해주며 변환된 결과물을 토대로 웹 사이트를 구축해서 서비스해준다.</p>

<h3 id="깃허브-페이지-github-pages">깃허브 페이지 (Github Pages)</h3>

<p>상술하였듯 <a href="https://pages.github.com">Github Pages</a>는 Github에서 제공하는 정적 사이트 호스팅 서비스로, 무료 계정에 한해 하나의 Github Pages를 무료로 제공한다. Github Pages는 연동된 Github 저장소에서 HTML, CSS, JavaScript와 같은 정적 컨텐츠를 가져와 그대로 배포하는 방식으로 작동한다. 만약 Github 저장소가 Jekyll 디렉토리의 형태로 존재한다면, Github Pages는 해당 저장소가 Jekyll로 작성된 것임을 알고 이를 Jekyll로 빌드해 배포한다.<br /></p>

<blockquote>
  <p>Reference</p>
  <ul>
    <li>SW developer 님이 작성하신, <a href="https://devinlife.com/howto/">GitHub Pages 블로그 따라하기</a></li>
    <li>Wheel 님이 작성하신, <a href="https://heekangpark.github.io/categories#jekyll">지킬 (Jekyll)</a></li>
  </ul>
</blockquote>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="Github Pages" /><category term="Github" /><summary type="html"><![CDATA[사실 이전 포스트에서 Github Pages에 대한 내용이 있어 좀 중복되는 느낌이 들 수도 있다. 하지만, 이 포스트에서는 Github Pages의 원리를 짚어보고자 작성한 것이니 혹시 모르는 사람들은 한번 읽어보자.]]></summary></entry><entry><title type="html">[Github Pages] 2. 개발 블로그는 어디에 만들어야 하나요?</title><link href="http://localhost:4000/github%20pages/blog2/" rel="alternate" type="text/html" title="[Github Pages] 2. 개발 블로그는 어디에 만들어야 하나요?" /><published>2023-04-01T00:00:00+09:00</published><updated>2023-04-01T00:00:00+09:00</updated><id>http://localhost:4000/github%20pages/blog2</id><content type="html" xml:base="http://localhost:4000/github%20pages/blog2/"><![CDATA[<blockquote>
  <p>글을 시작하기 앞서 말할 부분이 있다. 이번 포스트의 내용은 나의 주관적인 판단이 들어간 서술이 많다. 나야 보시다시피 Github Pages를 사용하지만 다른 사람들은 여러 이유로 다양한 플랫폼을 사용할 것이고, 그 부분을 지적하거나 문제시하는 게 아님을 분명히 밝히고 싶다. 이 글은 어디까지나 개발 블로그로 사용되는 여러 플랫폼에 대해 이야기해보는 과정을 통해 개발 블로그를 처음 만드는 개발자들이 이런 부분을 고려했으면 좋겠다, 는 취지로 작성된 것이다.</p>
</blockquote>

<h2 id="1-네이버-블로그">1. 네이버 블로그</h2>
<p><img src="https://user-images.githubusercontent.com/105341168/229186778-f25b0b7b-0f6e-482b-b2f1-ada95526a101.png" alt="1200x630wa" /></p>

<p>한때는 블로그, 하면 네이버? 라고 할 만큼 국내에서 가장 많이 쓰였던 블로그 플랫폼이다. 나도 개발 관련은 아니지만 작년까지 네이버 블로그를 운영했었다. 그런 점에서 가지는 네이버 블로그의 장점은 (국내 한정) 보편성이다. 보편적으로 쓰이는 만큼 사용자 수가 많고, 대다수가 한번씩은 네이버 블로그에 글 정도는 올려보게 되는 것이다. 그리고 이전의 올드한 디자인도 개선된 편이고 카테고리 사용도 간편하다. (이번에 새로 도입된 웹 에디터는 좀 불편했다.)<br /></p>

<p>하지만, 네이버 블로그의 가장 큰 문제는 역시 구글에서 검색했을 때 노출이 잘 되지 않는다는 것이다. 사실상 이 문제가 다른 모든 장점을 덮고도 남는다고 무방하다. 네이버라는 하나의 생태계에서 자체적으로 생산되는 컨텐츠를 검색할 수 있다는 것이 네이버 검색이 우리나라에서 널리 쓰이는 이유이겠지만, 개발자들 대다수가 구글을 통해 검색하는 만큼 다른 개발자들에게 내 글을 노출시키기 어렵다. (물론 블로그에 글을 올리는 목적이 조회수는 아니지만 내 글을 읽어주는 독자가 있다는 것, 그것이 적어도 내 의욕을 좌지우지하는 것 같다.)<br /></p>

<h2 id="2-티스토리">2. 티스토리</h2>
<p><img src="https://user-images.githubusercontent.com/105341168/229183807-164771aa-00b8-4871-9816-d045e1623345.png" alt="img" /></p>

<blockquote>
  <p>Example</p>
  <ul>
    <li>이동욱 님이 운영하시는, <a href="https://jojoldu.tistory.com">기억보단 기록을</a></li>
  </ul>
</blockquote>

<p>2006년에 창립되어 네이버처럼 국내에서 보편적으로 많이 쓰이는 블로그 플랫폼이다. 옛날엔 초대장 시스템이 있어서 사용자들의 접근성이 다소 떨어졌는데, 이게 사라지고 나서는 많이들 사용하는 것 같다. 예전에는 다음이 운영했는데, 다음이랑 카카오가 합병된 이후로는 카카오가 운영중인 것 같다.<br /></p>

<p>개발자의 시선에서는 코드 삽입도 지원하고, 플러그인도 다양해 커스터마이징도 가능하고, 구글 노출도 되고, 거기다가 구글 애드센스도 달 수 있고… 정말 안 쓸 이유가 없다. 그렇기에 정말 많은 개발 블로그들이 개설되어 있고, 나 역시도 구글링할 때에 제일 많이 들어가는 플랫폼 중 하나이다. 그래서 초심자가 가장 무난하게 개발 블로그를 시작한다면, 티스토리에서 할 것을 권하고 싶다.<br /></p>

<p>아, 생각해보니 티스토리가 이런 팔방미인이 될 수 있었는지를, (TMI지만) 간략하게나마 적어두어야 할 것 같다. 티스토리가 등장하는 2000년대 중반은 막 우리나라에서 블로그라는 개념이 퍼져나가는 태동기였다. 그때는 상술한 네이버 블로그나 지금은 사라진 다음 블로그처럼 IT 기업들이 운영하는 서비스형 블로그들이 주를 이루었는데, 블로그를 정말 자유롭게 이용하기엔 회사의 약관이나 운영방침과 같은 제약이 있어 차질이 생기곤 했다. (카카오가 운영하는 티스토리 또한 이 문제에 자유롭지는 않다.)<br /></p>

<p>그래서 <a href="https://ko.wikipedia.org/wiki/정재훈_(프로그래머)">정재훈</a> 씨가 처음 개발하고,
이후에는 태터앤컴퍼니 (TNC)에서 외국에 존재하던 설치형 블로그를 현지화해 출시한 프로그램이 태터툴즈이었다. 태터툴즈는 기존의 설치형 블로그의 장점을 유지하면서, 한국어에 최적화된 점에서 굉장히 주목을 받았고, 그 TNC가 다음과 합작해 만든 블로그 서비스가 바로 티스토리이다. 이런 알련의 과정 속에서 탄생한 티스토리는 설치형 블로그와 서비스형 블로그의 장점이 적절히 혼합되어 있다.<br /></p>

<p>참고로 <a href="https://korea.googleblog.com/2008/09/blog-post_12.html">TNC는 2008년 국내 최초로 구글에 인수되었고 (!)</a>, 태터툴즈는 태터툴즈 사용자 커뮤니티였던 태터네트워크재단 (TNF)에서 개발을 전담해 텍스트큐브 (TextCube)로 리브랜딩되어 현재도 운영중…이면 좋겠지만, 정식 버전은 2014년 2월에 나온 1.10.10에서 멈춘 것 같고 베타 버전도 2.0 베타 3이 마지막인 것 같다. (<a href="https://github.com/Needlworks/Textcube/">텍스트큐브 Github</a>)<br /></p>

<h2 id="3-브런치">3. 브런치</h2>
<p><img src="https://user-images.githubusercontent.com/105341168/229189060-753356e0-10a1-424c-85e3-3df61b079214.png" alt="CleanShot 2023-04-01 at 02 24 20@2x" /></p>

<blockquote>
  <p>Example</p>
  <ul>
    <li>옛날개발자 님이 운영하시는, <a href="https://brunch.co.kr/@springboot#articles">에디의 기술블로그</a></li>
  </ul>
</blockquote>

<p>브런치는 2015년에 카카오가 글쓰기에 최적화된 플랫폼을 만든다는 야심찬 목표를 갖고 오픈한 블로그 플랫폼이다. 이곳에 글을 올리려면 작가 신청을 하고 에디터팀의 승인 심사에 합격해야 한다고 한다. 그래서 브런치에서 개발 블로그를 몇개 보긴 했는데도, 솔직히 난 소설 글쓰기 플랫폼으로 알고 있었다…<br /></p>

<p>하술할 미디엄을 어느 정도 벤치마킹한 것으로 보이는데, 미디엄과 달리 코드 삽입이 안되서 이미지로 캡쳐해야 한다는 점이 너무 아쉽다. 디자인이랑 폰트가 워낙 깔끔해서 글쓰기엔 특화된 느낌은 확실히 강한데, 개발 블로그로 사용하기에는 한계점이 명확해 보인다.</p>

<h2 id="4-미디엄">4. 미디엄</h2>
<p><img src="https://user-images.githubusercontent.com/105341168/229185067-3110e063-e89a-4312-ab09-981074a7a522.png" alt="cc0998ee99506" /></p>

<blockquote>
  <p>Example</p>
  <ul>
    <li>Moon 님이 운영하시는, <a href="https://medium.com/@moonformeli">medium</a></li>
    <li>박상권 님이 운영하시는, <a href="https://medium.com/@moonformeli">medium</a></li>
  </ul>
</blockquote>

<p>미디엄은 2012년 <a href="https://ko.m.wikipedia.org/wiki/에번_윌리엄스_(기업인)">에반 윌리엄스</a>가 만든 소셜 네트워크 서비스이다. 플랫폼을 처음 보았을 때에는 트위터나 링크드인과 같은 소셜 네트워크 서비스의 느낌이 강해 보였는데, 글을 작성하려 할 때 나오는 메모장 화면이 직관적이라 굉장히 좋았다. (미디엄이 글 쓸 때 나오는 한글 폰트가 구리다는 얘기가 많은데, 확장 프로그램 깔면 해결되는 부분이라 생각해 일단 나는 고려하지 않았다.)<br /></p>

<p>그런데 내가 안쓰는 이유는… 사실 처음 블로그를 만들 때 미디엄에 대해 몰랐다! 원래부터 국내 사용자 수가 적다보니 미디엄을 개발 블로그로 쓰는 분들은 더 적은 거 같다. 그리고 카테고리랑 검색 기능이 없으니, 앞서도 얘기했지만 SNS 같은 느낌이 계속 드는 것 같아서 좀 손이 잘 가지 않는다.</p>

<h2 id="5-notion">5. Notion</h2>
<p><img src="https://user-images.githubusercontent.com/105341168/229185749-c6702213-0a15-49c2-9f54-8255d8c81402.jpg" alt="notion1411" /></p>

<blockquote>
  <p>Example</p>
  <ul>
    <li>younho9 님이 운영하시는, <a href="https://younho9.notion.site/younho9-Blog-9ed630c8603541bab20662b4854a891f">notion</a></li>
  </ul>
</blockquote>

<p>나는 옛날부터 노트에 무언가를 적는 것을 선호해서 스마트폰을 산 뒤로 애플 메모, 네이버 메모, 마이크로스프트 원노트, 에버노트 순으로 메모 앱을 사용했는데 뭔가 아쉬운 점이 한두 개씩은 있엇다. 그런데 노션을 2019년즘에 처음 사용하고 나서는 너무 만족해서 쭈욱 사용하고 있다.<br /></p>

<p>단점을 말하기 앞서… 확실히 짚고 가야할 것이 있다. 노션은 블로그가 아닌 메모장이다. 그런데 메모장을 블로그로 사용하려면 그게 잘 될까? 이것저것 템플릿을 잘 가져와 쓴다고 해도, 메모장이라는 근본적인 한계가 명확하다고 생각한다. 다음은 내가 직접 써보면서 느낀 단점들이다.</p>

<ul>
  <li>페이지 주소가 직관적이지 않고, 페이지 제목이 바뀌면 새로운 주소를 가지게 되어 글을 다시 공유해야 한다.</li>
  <li>하나의 페이지이기 때문에 카테고리, 글 검색, 댓글 기능이 부재되어 있다.</li>
  <li>페이지가 무거우면 페이지를 불러오는 그 로딩 과정이 매우 길다.</li>
</ul>

<p>그러면 노션 블로그를 호스팅하면 되지 않을까? 할텐데, 도메인과 호스팅 비용이 상당히 든다. 당장 무료로 쓸 수 있는 옵션이 이렇게 많은데, 노션이 좋다고 계속해서 돈을 지출하는 것은 좀 과하지 않을까?</p>

<h2 id="6-벨로그">6. 벨로그</h2>
<p><img src="https://user-images.githubusercontent.com/105341168/229186379-572b75c5-6750-4708-9693-0025035bbb01.PNG" /></p>

<p>벨로그는 2018년 <a href="https://velopert.com">velopert</a> 님이 개설한 개발자에 특화된 블로그 서비스이다. 유저 수가 소수였던 초창기와 달리, 지금은 국내 많은 개발자들이 유입되면서 개발자 생태계가 잘 구축되어 있고, 올라오는 정보의 양과 질 모두 좋은 편이다. 또한 코드 삽입, 마크다운 에디터 등 개발자에 특화된 요소들이 눈에 띄는 요소이다. 모두 같은 디자인이고 커스터마이징할 수 있는 요소가 없다는 부분이 단점이긴 하지만, 앞서 말한 티스트리처럼 초심자가 개발 블로그를 처음으로 만든다고 한다면 벨로그가 가장 이상적이라 생각한다.<br /></p>

<h2 id="7-워드프레스-블로그">7. 워드프레스 블로그</h2>
<p><img src="https://user-images.githubusercontent.com/105341168/229307295-2426ca8c-0341-4b54-89c8-5022bf6780d9.jpg" alt="WordPress-Logo-2008-present" /></p>

<p>상술한 티스토리의 TMI 파트에도 잠깐 등장한 워드프레스는 2003년 출시된 오픈소스 기반 CMS이다. 전세계에 있는 정말 많은 사이트나 블로그들이 워드프레스를 기반으로 되어 있고, 다양한 플러그인과 테마 또한 존재한다. 그래서 2018년에 네이버 블로그에서 워드프레스 블로그로 이전을 시도한 적이 있었는데… 결과는 실패였다.<br /></p>

<p>그때 실패한 가장 큰 이유는 그때 군생활이여서 무언가를 공부할 여건이 도저히 되지 않았다는 것이었다. 워드프레스를 처음 접했을 때 생각보다 시간이 걸리고 이에 대해 공부할 부분도 꽤 된다. 그리고 처음에 플러그인을 게임 애드온처럼 이것저것 설치했는데 버전 충돌이 생겨서, 다시 제거하고 하나씩 학습해보고… 거기다가 PHP나 자바스크립트에 대한 공부 또한 필수적이다. 이런 것을 개발자들은 학습곡선 (Learning Curve)이 계속 길어진다고 표현하던데… 정말 맞는 말이라고 생각한다.</p>

<h2 id="8-github-pages">8. Github Pages</h2>
<p><img src="https://user-images.githubusercontent.com/105341168/229191108-c3f52e0c-4b2b-46af-9e07-5c59bd89183d.jpeg" alt="image" /></p>

<blockquote>
  <p>Example</p>
  <ul>
    <li>한재엽 님이 운영하시는, <a href="https://jbee.io">JBEE.io</a></li>
    <li>이종립 님이 운영하시는, <a href="https://johngrib.github.io">기억 보조용 위키</a></li>
  </ul>
</blockquote>

<p>Github Blog라는 하나의 서비스가 존재하는 건 아니고, Github가 제공하는 Github Pages를 이용해 Github 저장소에 블로그나 웹 사이트 같은 웹 서비스를 호스팅하는 방식이다. 아무래도 지금 내가 사용하고 있는 거기도 하고 지난 1년간 공부하고 경험한 것도 있기에 이 부분을 조금 상세히 언급해보고자 한다.</p>

<ul>
  <li>긍정적인 점
    <ul>
      <li><b>커스터마이징의 자유도가 엄청나게 높다.</b> 나처럼 Github Pages용 오픈 소스 테마를 이용해도 되고 아예 처음부터 설계해 만드는 것 또한 가능하다. 구글 검색에 내 블로그를 노출시킬 수도 있고, 구글 애드센스를 통해 광고를 달아줄 수도 있다. 요약하면, <b>개발자가 가지고 놀기에 정말 좋다!</b></li>
      <li><b>Github에 저장소로 올라가는 방식으므로 Github와 연동이 된다.</b> 로컬에서 블로그를 쉽게 편집하고 관리할 수 있으며, commit과 push로 글을 등록하면 된다. Github 저장소에 백업이 되어 있기 때문에 (당연하게도) 이를 원격지에서 다운받아 사용할 수도 있고, 필요한 경우 롤백하는 것도 가능하다.</li>
      <li><b>마크다운 형식으로 작성하는 것을 지원</b>하고, <b>코드 블룩이나 인용 블록 또한 지원</b>한다. 게시글 하나하나가 .md 파일이라 나중에 플랫폼을 이전한다 하더라도 이를 다시 활용하는 것 또한 가능하다.
<br /><br /></li>
    </ul>
  </li>
  <li>복합적인 점
    <ul>
      <li>워드프레스 블로그만큼은 아니지만, <b>다른 것들에 비해 진입장벽이 존재한다.</b> 처음에 웹 사이트의 소스 코드를 올리거나 수정하는 작업이 필요하므로 최소한 git이랑 markdown을 어떻게 사용하는지는 알아야 한다. 블로그를 이것저것 건드려보려고 한다면 백엔드 관련 지식이 요구되고, 커스터마이징을 해보려면 간단한 프론트엔드 관련 지식 또한 필요해진다. 물론 웹 개발자를 지망한다면 이런 일련의 과정을 한번 하는 것도 도움이 된다.</li>
      <li><b>Github 저장소에 올라가는 방식이므로 저장소 내의 소스 코드가 모두 공개된다.</b> 블로그를 노출시키고 싶지만 블로그 내부까지 노출시키고 싶지 않는다면, 유료 걔정으로 전환해서 비공개로 전환해야 한다.</li>
      <li><b>하나의 Github 저장소는 용량과 트래픽에 제한이 존재한다.</b> (1GB의 최대 용량, 월 100GB의 트래픽 제한) 제한을 넘어서 사용하려면 Cloudflare과 같은 CDN을 추가로 사용해야 한다. 일단은 한도 내에서만 쓰면 무료인 것은 장점이지만, 한도를 넘어버린다면 돈을 써야하니 용량이 있는 파일을 올리는 것과 같은 경우에 주의할 필요가 있다.
<br /><br /></li>
    </ul>
  </li>
  <li>부정적인 점
    <ul>
      <li><b>정적 페이지로 빌드한는 것만 지원한다.</b> 그래서 댓글 기능을 추가할 때 외부 데이터베이스와 연동이 되지 않아 이를 위한 플러그인을 별도로 설치해야 한다. (Github가 소스 관리를 위한 서비스이니… 동적 호스팅 서비스는 AWS와 같은 클라우드 벤더 등을 사용하자.)</li>
      <li><b>벨로그처럼 작성하는 문서 서식을 바로 렌더링해서 볼 수 없다.</b> 프리뷰 플러그인을 사용한다 치더라도, 플러그인으로 형성된 화면과 렌더링된 화면이 일치하지 않아 결국엔 플러그인을 잘 안쓰게 된다.</li>
      <li><b>글을 쓸 때 표나 이미지를 넣는 게 불편하다.</b> 나 같은 경우에는 html과 css를 사용해 넣는데, 해당 문법을 알아도 표를 일일이 만드는 것은 굉장히 귀찮다. 이미지 같은 경우에는 외부 사이트에 업로드해 이를 호스팅하는데 그것 또한 좀 번거로운 작업이다.
<br /><br /></li>
    </ul>
  </li>
</ul>

<p>나는 Github Pages 블로그를 운영하는 것은 장단점이 매우 명확하고, 개개인마다의 호불호가 엄청 갈릴 수 밖에 없다고 생각한다. 실제로 Github Pages 블로그를 운영하시다가 다른 블로그 플랫폼으로 이주하시는 분들도 많이 보았고 나 또한 블로그를 개설하면서, 그리고 개설된 블로그를 운영하면서도 이주할지말지에 대해 많이 고민했었다. <br /></p>

<p>그래도 내가 Github Pages 블로그를 운영하는 데에는 <b>git을 이용해 블로그를 관리할 수 있다는 것</b>과 <b>블로그 운영을 통해 웹 개발의 전반적인 과정을 학습해볼 수 있다는 점</b>이 가장 큰 이유인 것 같다. Github Pages 블로그를 개설할 때에는, 정말 아무것도 모르는 감자 (…)라서 많이 헤맸다. 그래서 처음에는 블로그와 연동되는 git에 대해 공부하고자 <a href="https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=302554047">Do it! 지옥에서 온 문서 관리자 깃 &amp; 깃허브 입문</a>이라는 도서를 구매해서 공부해보고, 그 다음에는 블로그를 커스터마이징해보려고 <a href="https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=260564604">Do it! HTML+CSS+자바스크립트 웹 표준의 정석</a>이라는 도서를 구매해서 공부해보고 이를 최대한 적용해보는 식으로 실습하였다. 이렇게 블로그를 성장시키려고 노력하는 과정 속에서 나 또한 많이 성장할 수 있었고, 앞으로도 이런 blog-driven이 잘 이루어졌으면 하는 것이 내 바램이다.</p>

<blockquote>
  <p>Reference</p>
  <ul>
    <li>productuidev 님이 작성하신, <a href="https://velog.io/@productuidev/PREV-Portfolio-1-ProjectBlog#개발-블로그--github">개발자 취업준비 (포트폴리오/블로그)</a></li>
  </ul>
</blockquote>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="Github Pages" /><category term="Github" /><summary type="html"><![CDATA[글을 시작하기 앞서 말할 부분이 있다. 이번 포스트의 내용은 나의 주관적인 판단이 들어간 서술이 많다. 나야 보시다시피 Github Pages를 사용하지만 다른 사람들은 여러 이유로 다양한 플랫폼을 사용할 것이고, 그 부분을 지적하거나 문제시하는 게 아님을 분명히 밝히고 싶다. 이 글은 어디까지나 개발 블로그로 사용되는 여러 플랫폼에 대해 이야기해보는 과정을 통해 개발 블로그를 처음 만드는 개발자들이 이런 부분을 고려했으면 좋겠다, 는 취지로 작성된 것이다.]]></summary></entry><entry><title type="html">[Github Pages] 1. 개발자에게 개발 블로그는 왜 필요한가요?</title><link href="http://localhost:4000/github%20pages/blog1/" rel="alternate" type="text/html" title="[Github Pages] 1. 개발자에게 개발 블로그는 왜 필요한가요?" /><published>2023-03-31T00:00:00+09:00</published><updated>2023-03-31T00:00:00+09:00</updated><id>http://localhost:4000/github%20pages/blog1</id><content type="html" xml:base="http://localhost:4000/github%20pages/blog1/"><![CDATA[<blockquote>
  <p>내가 아직 취업 시장에 발도 담구지 않은 대학생인데 내가 개발 블로그의 필요성에 대해 논하는 것이 의미가 있는 걸까? 라는 의문이 들어 작년에 작성한 글에서는 이 부분을 짚어보지 않았다. 하지만 이 부분을 뺀 채로 블로그를 운영하다보니, 처음에 내가 가졌었던 생각이나 느낌이 희석되면서, 여러 가지를 이유로 들며 블로그 운영을 게을리한 것 같다. 그래서 지난 1년간 내가 작성한 내용을 다시 정리하기 앞서, 이 부분에 대해 이야기하고자 한다.</p>
</blockquote>

<h2 id="1-블로그에-글을-쓰는-과정-또한-하나의-공부가-될-수-있다">1. 블로그에 글을 쓰는 과정 또한 하나의 공부가 될 수 있다.</h2>
<p>사실 글을 쓰는 과정은 엄청나게 귀찮다. 글을 쓰기 위한 소재도 미리 준비해야 하고, 그 소재에 대해 모르는 부분을 공부해야 하고, 내가 잘못된 내용을 적는 게 아닌지 검토하는 과정 또한 거쳐야 하고… 하지만 <b>내가 이전에 공부하거나 경함한 내용을 자세하고 정확히 설명하기 위해 노력하면서, 그 내용에 대한 나의 이해도가 올라가는 것 같다.</b> 이전에 블로그에 글을 쓰기 전의 나는 수업 끝나면 다시 책을 펴보지 않았지만, 지금은 블로그에 글을 쓰기 위해서라도 최대한 기록을 남기려고 노력한다. 이러면서 내가 단순히 개념으로 머릿속에 집어넣은 내용을 블로그의 문장이나 예시로 설명하면서, 내용을 이해하는 것을 넘어서 개념을 응용하는 능력 또한 증진되는 것 같다.<br /></p>

<p><img src="https://user-images.githubusercontent.com/105341168/229170501-4f26985a-ab1a-437a-812c-f9db6ee50863.jpg" alt="pexels-armando-are-3759364" /></p>

<p>글을 쓰는 것과 같이 누군가에게 무언가를 설명하려고 노력하는 행위를 나만 성장하는 데에 있어 도움이 된다고 느낀 건 아닌지, <a href="https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=290172950">실용주의 프로그래머</a>라는 책에서는 프로그래머가 고무 오리 인형에게 코드 한 줄씩 설명하는 <a href="https://ko.wikipedia.org/wiki/고무_오리_디버깅">고무 오리 디버깅 (rubber duck debugging)</a>으로 무언가를 설명해본 경험의 중요성을 강조한다. 이처럼 무언가를 설명해보는 경험이 계속 축적되다보면, 나중엔 무엇을 배우든간에 그것을 어떻게 설명해볼지에 대해 미리 생각해보게 될 것이다.<br /></p>

<p>그리고 당연하지만, <b>글은 하나의 기록이고 그 자체로 나의 history가 된다.</b> 자신이 공부하고 경험한 것을 기록하는 것은, 당연하지만 내가 기억하는 것보다 더 오래 보존된다. 나는 공부를 하거나 이런저런 자료를 참고한 것을 모으는 방법에 대해 늘 고민하곤 했는데 (예를 들면 즐겨찾기에 등록하는 것이나 PDF를 저장하는 것. 2가지 모두 단점이 명확해 중간에 그만두었다), 역시 코드의 주석처럼 글을 쓸 때 바로바로 참고한 내용을 링크를 걸어주는 방법이 제일 즉각적이고 직관적인 것 같다. 또한 만약 생각이나 회고을 적어둔 경우에는 내가 이런 생각을 했구나, 하면서 나중에 참고하기도 좋다.</p>

<h2 id="2-블로그를-운영하는-것이-성장의-동기가-될-수-있다">2. 블로그를 운영하는 것이 성장의 동기가 될 수 있다.</h2>
<p>나는 어렸을 때부터 무언가를 수집하는 것을 좋아했다. 초등학교 때는 TCG 게임의 카드들을 수집해 컬렉터 앨범을 만드는 것을 좋아했고, 중학교 때에는 코인 홀더에 담을 프루프를 사기 위해 용돈을 모아본 적도 있다. 블로그에 글을 쓰는 것 또한 내가 인터넷이나 서적 곳곳에 퍼져 있는 지식들을 수집해 하나의 모음집을 만든다고 느꼈기에 처음 개설하였을 때부터 블로그를 운영하는 데에 애착이 갔다.<br /></p>

<p><img src="https://user-images.githubusercontent.com/105341168/229171570-0609a126-3177-47d8-aa22-1e179c6b7f9e.jpg" alt="pexels-canva-studio-3194523" /></p>

<p>그래서 나는 <b>Blog-driven, 즉 블로그를 운영하기 위해 공부하고 경험하면서 나 또한 성장한다는 개념에 대해 긍정적으로 생각한다.</b> 대다수의 사람들이 보통 블로그에 글을 쓰면서 Blog-driven이 이루어진다고 생각하는데, 나는 Blog-driven이 더 포괄적인 개념이라고 생각한다. 블로그를 계속해서 살아있는 상태로 유지하려면 단순히 블로그에 글을 쓰는 것만이 아닌, 블로그를 개선하고 유지보수하는 과정 또한 필요하다. 지난 1년간 블로그를 운영하면서 알게 모르게 시행착오를 거친 부분이 꽤 되는데 웹 개발을 공부하면서 이를 블로그에 대입해 생각해보기도 하고, 블로그에 적용시켜볼 계획도 세우기도 하는 식으로 앞으로 나아가는 데에 큰 도움이 되었던 것 같다.<br /></p>

<h2 id="3-운영하는-블로그가-개발자에게-새로운-기회를-줄-수-있다">3. 운영하는 블로그가 개발자에게 새로운 기회를 줄 수 있다.</h2>
<p>내가 이번에 대학교 4학년이 되면서 느낀 점이 있다면, <b>나를 포장하고 홍보하는 것 또한 정말 중요하다는 것이다.</b> 수능은 모든 학생을 일렬로 세우고 점수로 평가하지만, 사회에는 어떤 절대적인 기준이 존재하지 않으므로 사람들이 나를 평가할 수 있는 input data를 내가 스스로 가공해 제공할 필요성이 있다. 특히 개발자는 다른 직업보다 정보를 활용하는 능력이 뛰어나다보니, Github 프로필을 만들거나 포트폴리오 사이트를 만드는 것과 같이 나에 대한 정보를 공유하는 것 또한 매우 활발하다.<br /></p>

<p><img src="https://user-images.githubusercontent.com/105341168/229171850-d6723260-8a79-48d0-a288-7e9a55c29f21.jpg" alt="pexels-markus-winkler-4584830" /></p>

<p>요즘 IT 기업들이 지원자의 개발 블로그나 Github의 주소를 요구하는 것 또한 그런 맥락일 것이다. 기업 입장에서는 모든 점에서 뛰어난 인재를 채용하고자 하겠지만, 그것은 매우 소수이다. 그래서 기업은 지원자의 잠재력 또한 확인해 평가하고자 노력한다. 그리고 이런 부분은 개발과 직접적으로 관련되어 있지만 단순한 결과물의 집합체인 이력서나 포트폴리오보다는, 성장하는 데에 있어 중요한 가치를 엿볼 수 있는 개발 블로그나 Github에 잘 들어나는 것 같다.</p>

<blockquote>
  <p>Reference</p>
  <ul>
    <li>코드쓰는사림 님이 작성하신, <a href="https://taegon.kim/archives/7107">개발자가 블로그를 운영해야 할 이유</a></li>
    <li>productuidev 님이 작성하신, <a href="https://velog.io/@productuidev/PREV-Portfolio-1-ProjectBlog#개발-블로그--github">개발자 취업준비 (포트폴리오/블로그)</a></li>
  </ul>
</blockquote>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="Github Pages" /><category term="Github" /><summary type="html"><![CDATA[내가 아직 취업 시장에 발도 담구지 않은 대학생인데 내가 개발 블로그의 필요성에 대해 논하는 것이 의미가 있는 걸까? 라는 의문이 들어 작년에 작성한 글에서는 이 부분을 짚어보지 않았다. 하지만 이 부분을 뺀 채로 블로그를 운영하다보니, 처음에 내가 가졌었던 생각이나 느낌이 희석되면서, 여러 가지를 이유로 들며 블로그 운영을 게을리한 것 같다. 그래서 지난 1년간 내가 작성한 내용을 다시 정리하기 앞서, 이 부분에 대해 이야기하고자 한다.]]></summary></entry><entry><title type="html">[DevOps] 도커 (Docker)</title><link href="http://localhost:4000/devops/docker1/" rel="alternate" type="text/html" title="[DevOps] 도커 (Docker)" /><published>2022-11-02T00:00:00+09:00</published><updated>2022-11-11T00:00:00+09:00</updated><id>http://localhost:4000/devops/docker1</id><content type="html" xml:base="http://localhost:4000/devops/docker1/"><![CDATA[<h2 id="가상화-virtualization--컴퓨터-자원-computer-resource의-추상화">가상화 (<code class="language-plaintext highlighter-rouge">Virtualization</code>) : 컴퓨터 자원 (<code class="language-plaintext highlighter-rouge">Computer Resource</code>)의 추상화</h2>

<ul>
  <li>하드웨어 종속성 배제 : 물리적인 하드웨어 자원을 논리적인 단위로 나누고 이를 통합해 가상의 자원을 활용</li>
</ul>

<h3 id="리소스-가상화-resource-virtualization--컴퓨터-내-특정-자원만을-추상화">리소스 가상화 (<code class="language-plaintext highlighter-rouge">Resource Virtualization</code>) : 컴퓨터 내 특정 자원만을 추상화</h3>
<ul>
  <li>(가상의) 메인 메모리 : 가상 메모리 (<code class="language-plaintext highlighter-rouge">Virtual Memory</code>)</li>
  <li>(가상의) 저장 장치 : 클라우드 (<code class="language-plaintext highlighter-rouge">Cloud</code>)</li>
  <li>(가상의) 그래픽 카드 : <code class="language-plaintext highlighter-rouge">vGPU</code></li>
  <li>(가상의) 네트워크 : 가상 사설 네트워크 (<code class="language-plaintext highlighter-rouge">Virtual Personal Network</code>)</li>
</ul>

<h3 id="플랫폼-가상화-platform-virtualization--여러-개의-프로세스을-구동할-수-있는-플랫폼을-추상화">플랫폼 가상화 (<code class="language-plaintext highlighter-rouge">Platform Virtualization</code>) : 여러 개의 프로세스을 구동할 수 있는 플랫폼을 추상화</h3>
<ul>
  <li>에뮬레이션 (<code class="language-plaintext highlighter-rouge">Emulation</code>) : 다른 컴퓨터 프로세서를 위해 쓰인 운영체제와 응용 프로그램을 실행</li>
  <li>하드웨어 수준 가상화 (<code class="language-plaintext highlighter-rouge">H/W-level Virtualization</code>) : 하드웨어 플랫폼 위의 하이퍼바이저를 통해 가상 머신을 관리함</li>
  <li>
    <p>운영체제 수준 가상화 (<code class="language-plaintext highlighter-rouge">O/S-level Virtualization</code>) : 운영체제의 커널이 각각의 격리된 프로세스를 동작시킴</p>
  </li>
  <li>
    <h4 id="에뮬레이터-emulator--모든-하드웨어-자원의-동작을-소프트웨어로-대체">에뮬레이터 (<code class="language-plaintext highlighter-rouge">Emulator</code>) : 모든 하드웨어 자원의 동작을 소프트웨어로 대체</h4>
    <ul>
      <li>애뮬레이터 안의 응용 프로그램은 물리 하드웨어가 아닌 인터프리터 프로그램을 통해 실행 (<code class="language-plaintext highlighter-rouge">Java Virtual Machine</code>)
        <ul>
          <li>인터프리터 프로그램은 가상 머신에서 명령을 수행할 때마다 물리 CPU가 처리할 바이너리 코드 갱신</li>
          <li>물리 CPU는 에뮬레이터를 실행하기 위한 바이너리 코드를 해석해 이를 대신 실행</li>
        </ul>
      </li>
      <li>장점 : 아키텍쳐가 전혀 다른 하드웨어 역시 가상화할 수 있음 (vs 하이퍼바이저 : 가상화할 수 없음)</li>
      <li>단점 : 물리 CPU 내에서 직접 실행할 때보다 비효율적임</li>
    </ul>
  </li>
  <li>
    <h4 id="하이퍼바이저-hypervisor--다수의-가상-머신을-생성-실행-제어하는-논리적-플랫폼으로써의-프로세스">하이퍼바이저 (<code class="language-plaintext highlighter-rouge">Hypervisor</code>) : 다수의 가상 머신을 생성, 실행, 제어하는 논리적 플랫폼으로써의 프로세스</h4>
    <ul>
      <li>하이퍼바이저 안의 응용 프로그램은 물리 하드웨어를 하이퍼바이저에 의해 제한적으로 사용</li>
      <li>
        <p>하드웨어 가상 머신 (<code class="language-plaintext highlighter-rouge">H/W Virtual Machine</code>) : 하이퍼바이저에 의해 생성된 가상 환경</p>
      </li>
      <li>
        <h5 id="type-1-호스팅-hosting--하이퍼바이저가-일반-프로그램과-같이-운영체제의-소프트웨어-계층에서-실행">Type 1. 호스팅 (<code class="language-plaintext highlighter-rouge">Hosting</code>) : 하이퍼바이저가 일반 프로그램과 같이 운영체제의 소프트웨어 계층에서 실행</h5>
        <ul>
          <li>장점 : 가상의 하드웨어를 구동하기에 호스트 운영 체제에 큰 제약이 없음</li>
          <li>단점 : 호스트 운영 체제 위에서 게스트 운영체제를 구동해 비교적 큰 오버헤드 가짐 / <code class="language-plaintext highlighter-rouge">GPU Passthrough</code> 미지원</li>
        </ul>
      </li>
      <li>
        <h5 id="type-2-네이티브-native--하이퍼바이저를-하드웨어에-직접-임베디드되어-실행">Type 2. 네이티브 (<code class="language-plaintext highlighter-rouge">Native</code>) : 하이퍼바이저를 하드웨어에 직접 임베디드되어 실행</h5>
        <ul>
          <li>장점 : 별도의 호스트 운영체제가 없어 오버헤드가 적음 / 하드웨어를 직접 제어하기에 효율적인 자원 사용 가능</li>
          <li>단점 : 자체적인 가상 머신에 대한 관리 기능이 없기에, 이를 위한 별도의 컴퓨터나 콘솔이 필요</li>
          <li>
            <h6 id="전가상화-full-virtualization--하이퍼바이저에서-명령을-번역">전가상화 (<code class="language-plaintext highlighter-rouge">Full-Virtualization</code>) : 하이퍼바이저에서 명령을 번역</h6>
            <ul>
              <li>게스트 가상 머신이 요청한 명령은 하이퍼바이저가 실행한 관리용 가상 머신 <code class="language-plaintext highlighter-rouge">DOM</code>을 통해 하드웨어에 접근</li>
              <li>하이퍼바이저가 각 가상 머신들의 모든 명령을 번역하여 실행하고, 이에 맞게 자원을 할당해야 함</li>
            </ul>
          </li>
          <li>
            <h6 id="반가상화-para-virtualization--게스트-가상-머신에서-명령을-번역">반가상화 (<code class="language-plaintext highlighter-rouge">Para-Virtualization</code>) : 게스트 가상 머신에서 명령을 번역</h6>
            <ul>
              <li>게스트 가상 머신이 하이퍼 콜 (<code class="language-plaintext highlighter-rouge">Hyper Call</code>)을 통해 하이퍼바이저에 명령을 직접 요청</li>
              <li>게스트 가상 머신의 운영 체제가 하이퍼 콜을 요청할 수 있게 커널을 수정해야 함</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <h4 id="컨테이너-container--소프트웨어-패키지의-추상화">컨테이너 (<code class="language-plaintext highlighter-rouge">Container</code>) : 소프트웨어 패키지의 추상화</h4>
    <ul>
      <li>컨테이너는 프로세스가 동작하는 격리된 사용자 공간 인스턴스
        <ul>
          <li>하나의 응용 프로그램과 그 응용 프로그램의 동작을 위한 라이브러리로 구성</li>
        </ul>
      </li>
      <li>
        <p>운영체제의 커널은 여러 개의 격리된 컨테이너를 갖추어 각각의 개별적인 서버처럼 동작시킴</p>
      </li>
      <li>
        <h5 id="리눅스-컨테이너-linux-container--리눅스에서-제공하는-운영체제-레벨의-가상화">리눅스 컨테이너 (<code class="language-plaintext highlighter-rouge">Linux Container</code>) : 리눅스에서 제공하는 운영체제 레벨의 가상화</h5>
        <ul>
          <li>커널 레벨의 격리된 (<code class="language-plaintext highlighter-rouge">isolated</code>) 공간만 제공할 뿐, 개발 및 서버 운영에 필요한 부가 기능 부족</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<div style="color: white; padding: 3% 2% 2% 2%; background-color: black;">
사용자가 운영체제 A에서만 가능한 a, 운영체제 B에서만 가능한 b, 운영체제 C에서만 가능한 c을 동시에 실행한다고 가정한다면,
<ul>
  <li>에뮬레이션 : 응용 프로그램 ×3 ⊂ 에뮬레이트 운영체제 ×3 ⊂ 에뮬레이터 ×3 ⊂ 호스트 운영체제 ⊂ 하드웨어</li>
  <li>Type 1. 호스팅 : 응용 프로그램 ×3 ⊂ 게스트 운영체제 ×3 ⊂ 하이퍼바이저 ⊂ 호스트 운영체제 ⊂ 하드웨어</li>
  <li>Type 2. 네이티브 &gt; 전가상화 : 응용 프로그램 ×3 ⊂ 게스트 운영체제 ×3 ⊂ DOM ⊂ 하이퍼바이저 ⊂ 하드웨어</li>
  <li>Type 2. 네이티브 &gt; 반가상화 : 응용 프로그램 ×3 ⊂ 수정된 게스트 운영체제 ×3 ⊂ 하이퍼바이저 ⊂ 하드웨어</li>
  <li>운영체제 수준 가상화 : 컨테이너 프로세스 ×3 ⊂ 컨테이너 관리 소프트웨어 ⊂ 운영체제 ⊂ 하드웨어 </li>
</ul>
</div>

<ul>
  <li>Q. <code class="language-plaintext highlighter-rouge">MacOS</code>에서 도커로 윈도우 컨테이너를 실행하는 경우라면? : 응용 프로그램을 실행할 때 (O) 운영 체제를 실행할 때 (X)
    <ul>
      <li>윈도우 컨테이너 ⊂ 가상 머신 (호스팅) ⊂ 컨테이너 관리 소프트웨어 ⊂ 운영체제 ⊂ 하드웨어</li>
    </ul>
  </li>
</ul>

<h2 id="도커-docker--컨테이너-기반-가상화-플랫폼-container-based-virtualization-platform">도커 (<code class="language-plaintext highlighter-rouge">Docker</code>) : 컨테이너 기반 가상화 플랫폼 (<code class="language-plaintext highlighter-rouge">Container-based Virtualization Platform</code>)</h2>

<p><img src="https://pyrasis.com/assets/images/Docker-HOWTO/docker-containerized-appliction-blue-border_2.png.webp" width="50%" /></p>

<ul>
  <li><a href="https://www.docker.com">공식 홈페이지</a>에서 <code class="language-plaintext highlighter-rouge">.dmg</code> 파일을 다운로드 후 설치</li>
  <li>터미널 창에 다음 명령어를 입력해 도커가 정상적으로 설치되었는지 확인</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker version // 현재 도커의 버전 확인

Client:
 Cloud integration: ~
 Version:           ~
 API version:       ~
 Go version:        ~

Server: ~
 Engine:
  Version:          ~
  API version:      ~
  Go version:       ~
</code></pre></div></div>
<blockquote>
  <p>Q. 클라이언트와 서버의 버전 정보가 따로 구성되어 있는 이유?</p>
  <ul>
    <li>도커가 클라이언트와 서버의 역할을 각각 수행할 수 있음
      <ul>
        <li>리눅스 터미널에 도커 명령어를 입력하면 도커 클라이언트가 도커 서버로 명령을 전송하고 이를 터미널에 출력</li>
      </ul>
    </li>
  </ul>
</blockquote>

<h3 id="q-도커를-쓰는-이유--비교적-효율적인-가상화-방식--통일된-개발-환경--배포의-동시성">Q. 도커를 쓰는 이유? : 비교적 효율적인 가상화 방식 + 통일된 개발 환경 + 배포의 동시성</h3>
<ol>
  <li><code class="language-plaintext highlighter-rouge">Virtualization</code> : 응용 프로그램 실행 시 운영체제 수준 가상화 방식이 성능 손실이 더 적고 빠르게 동작한다.</li>
  <li><code class="language-plaintext highlighter-rouge">Development</code> : 운영체제에 상관없이 같은 환경에서 개발할 수 있게 해준다.</li>
  <li><code class="language-plaintext highlighter-rouge">Deployment</code> : 서비스 환경과 응용 프로그램을 같이 배포할 수 있게 한다.</li>
</ol>

<h3 id="도커-파일-dockerfile--서버-운영-기록을-코드화해-저장한-파일---해당-시점의-도커-이미지-빌드">도커 파일 (<code class="language-plaintext highlighter-rouge">Dockerfile</code>) : 서버 운영 기록을 코드화해 저장한 파일 -&gt; 해당 시점의 도커 이미지 빌드</h3>

<blockquote>
  <p>눈송이 서버 (<code class="language-plaintext highlighter-rouge">Snowflakes Server</code>) : 각각의 서버마다 운영 기록이 다르기에 서로 모양이 다른 서버들이 공존하는 상황</p>
  <ul>
    <li>서버 간의 운영체제, 컴파일러, 설치된 패키지 등의 차이로 발생하는 문제 개선을 위해 서버 운영 기록 저장</li>
  </ul>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">DSL</code> (<code class="language-plaintext highlighter-rouge">Domain-Specific Language</code>) : 도커 파일을 작성할 때 쓰는 언어 (도커 이미지의 생성 과정 표현)</li>
</ul>

<h3 id="q-도커-파일을-쓰는-이유--테스트-주도-개발의-순환에-부합한다">Q. 도커 파일을 쓰는 이유? : 테스트 주도 개발의 순환에 부합한다.</h3>
<ul>
  <li>테스트 주도 개발 (<code class="language-plaintext highlighter-rouge">Test Driven Development</code>) : 선 테스트 후 개발 사이클을 반복하는 개발 방법론</li>
</ul>

<div style="color: white; padding: 2% 1% 1% 1%; background-color: black;">
<ol>
  <li>테스트를 작성한다. : 도커 파일을 만든다.</li>
  <li>테스트에 실패하고 코드를 수정한다. : 도커 이미지의 빌드에 실패하고 도커 파일을 수정한다.</li>
  <li>테스트에 성공한다면, 중복된 코드 등을 리펙터링한다. : 도커 이미지의 빌드에 성공한다면, 도커 파일의 내용을 리펙터링하다.</li>
  <li>처음으로 되돌아간다.</li>
</ol>
</div>

<h3 id="도커-이미지-docker-image--컨테이너의-실행에-필요한-모든-파일과-설정값-정보을-포함">도커 이미지 (<code class="language-plaintext highlighter-rouge">Docker Image</code>) : 컨테이너의 실행에 필요한 모든 파일과 설정값 정보을 포함</h3>
<ul>
  <li>상태값을 가지지 않음 (변하지 않는 값들을 저장) &lt;-&gt; 컨테이너 : 이미지가 실행된 살태 (변하는 값들을 저장)</li>
  <li>이미지 레이어 : 도커 이미지는 여러 개의 읽기 전용 (<code class="language-plaintext highlighter-rouge">Read-Only</code>) 레이어로 구성되고, 파일 추가/생성 시 새로운 레이어를 생성
    <ul>
      <li>유니온 파일 시스템 (<code class="language-plaintext highlighter-rouge">Union File Systems</code>)읕 통해 여러 개의 레이어를 하나의 파일 시스템으로 활용</li>
    </ul>
  </li>
  <li>컨테이너 레이어 : 컨테이너가 실행되면 이미지 레이어 위에 읽기/쓰기 (<code class="language-plaintext highlighter-rouge">Read-Write</code>) 레이어를 추가
    <ul>
      <li>컨테이너를 실행하면서 생성되거나 변경된 내용을 저장</li>
    </ul>
  </li>
  <li>이미지 경로 : <code class="language-plaintext highlighter-rouge">URL</code> 방식으로 관리 -&gt; 뒤에 태그 (<code class="language-plaintext highlighter-rouge">/tag</code>)를 붙임</li>
  <li><a href="https://hub.docker.com"> 도커 허브</a> (<code class="language-plaintext highlighter-rouge">Docker Hub</code>) : 도커 이미지를 서버에 무료로 공개하고 관리</li>
</ul>

<h3 id="q-도커-이미지를-쓰는-이유--도커-이미지와-도커-컨테이너들을-클래스나-인스턴스처럼-활용한다">Q. 도커 이미지를 쓰는 이유? : 도커 이미지와 도커 컨테이너들을 클래스나 인스턴스처럼 활용한다.</h3>
<ul>
  <li>도커는 해시 값 (= 컨테이너 ID)과 임의의 이름 (= 컨테이너 이름)를 통해 컨테이너를 구분하고 이들을 환경변수로 관리</li>
</ul>

<div style="color: white; padding: 3% 2% 2% 2%; background-color: black;">
운영자가 지금까지 운영한 서버를 도커 이미지로 배포하고 도커 컨테이너에 설치한다면,
<ul>
  <li>도커 파일 : 지금까지 서버를 운영한 기록</li>
  <li>도커 이미지 (도커 파일 + 실행 시점) : 지금부터 설치된 서버가 가질 초기값</li>
  <li>도커 컨테이너 (도커 파일 + 환경 변수) : 지금부터 설치된 서버가 운영될 장소</li>
</ul>
</div>
<ul>
  <li>도커 안에서는 서버 역시 하나의 소프트웨어처럼 사용할 수 있고, 생성할 수 있는 컨테이너의 개수에도 제한이 없다.</li>
</ul>

<h2 id="도커-명령어-docker-command--docker-command-형식으로-구성">도커 명령어 (<code class="language-plaintext highlighter-rouge">Docker Command</code>) : <code class="language-plaintext highlighter-rouge">docker &lt;command&gt;</code> 형식으로 구성</h2>
<ul>
  <li>리눅스 터미널에 도커 명령어를 입력하면 도커 서버에서 이에 해당되는 작업 수행</li>
  <li>항상 <code class="language-plaintext highlighter-rouge">root</code> 권한으로 실행되기에 <code class="language-plaintext highlighter-rouge">$ sudo</code>를 앞에 붙어야 함</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo usermod -aG docker $USER # 현재 사용자를 docker 그룹에 추가
</code></pre></div></div>

<div style="text-align: center;">
    <table>
        <thead>
            <tr>
                <td>docker 명령어</td>
                <td>명령어 형식</td>
                <td>명령어 설명</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>docker search</td>
                <td>$ docker search [이미지]</td>
                <td>도커 허브에서 이미지 검색</td>
            </tr>
            <tr>
                <td>docker pull</td>
                <td>$ docker pull [사용자명/] 이미지 [:태그]</td>
                <td>도커 허브에서 이미지 다운로드<br />사용자명을 지정해 도커 허브에서 해당 사용자가 올린 이미지을 다운로드<br />태그로 버전을 지정해 다운로드 (latest : 최신 버전)</td>
            </tr>
            <tr>
                <td>docker images</td>
                <td>$ docker images</td>
                <td>사용 가능한 모든 이미지 목록 확인</td>
            </tr>
            <tr>
                <td>docker rmi</td>
                <td>$ docker rmi 이미지 [:태그]</td>
                <td>다운로드한 이미지 삭제<br />태그로 버전을 지정해 다운로드 (latest : 최신 버전)</td>
            </tr>
            <tr>
                <td>docker run</td>
                <td>$ docker run [옵션] [실행할 이미지]</td>
                <td>이미지를 컨테이너로 생성한 뒤 컨테이너 실행<br />입력받은 이미지가 현재 없다면, 해당 이미지를 도커 허브에서 다운로드<br />실행할 파일을 지정해 직접 실행 가능 (여기서 빠져나오면 컨테이너가 정지)<br /><div style="text-align: center; font-size: 120%; padding: 2% 0% 0% 0%">
    <table>
        <thead>
            <tr>
                <td>docker run 옵션</td>
                <td>옵션 설명</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>-d</td>
                <td>백그라운드 모드 (detached mode)</td>
            </tr>
            <tr>
                <td>-p [호스트 포트:컨테이너 포트]</td>
                <td>호스트와 컨테이너의 포트를 연결 (port forwarding)<br />http://호스트 IP:호스트 포트로 컨테이너의 포트 접속</td>
            </tr>
            <tr>
                <td>-v [호스트의 디렉터리]</td>
                <td>호스트의 디렉터리를 컨테이너의 디렉터리에 연결 (mount)</td>
            </tr>
            <tr>
                <td>-e [환경변수]</td>
                <td>컨테이너 내에서 사용할 환경변수 설정 (environment variable)</td>
            </tr>
            <tr>
                <td>--name [컨테이너 이름]</td>
                <td>컨테이너 이름 설정 (container name)</td>
            </tr>
            <tr>
                <td>-rm</td>
                <td>프로세스 종료 시 컨테이너 자동으로 제거 (remove container)</td>
            </tr>
            <tr>
                <td>-link [컨테이너 이름:주소]</td>
                <td>컨테이너와 컨테이너 연결 (link container)<br />[주소:포트번호]로 컨테이너에 접속</td>
            </tr>
            <tr>
                <td>-it</td>
                <td>리눅스 터미널 입력을 위한 옵션 (interactive / Pseudo-tty)</td>
            </tr>
         </tbody>
    </table>
</div></td>
            </tr>
            <tr>
              <td>docker ps</td>
              <td>$ docker ps [옵션]</td>
              <td>실행중인 모든 컨테이너 목록 확인<br />-a 옵션으로 정지된 컨테이너까지 모두 검색</td>
            </tr>
            <tr>
              <td>docker start</td>
              <td>$ docker start [컨테이너 이름 | 컨테이너 ID]</td>
              <td>정지된 컨테이너 재시작</td>
            </tr>
            <tr>
              <td>docker stop</td>
              <td>$ docker exec [컨테이너 이름 | 컨테이너 ID]</td>
              <td>실행 중인 컨테이너 정지</td>
            </tr>
            <tr>
              <td>docker attach</td>
              <td>$ docker attach [컨테이너 이름 | 컨테이너 ID]</td>
              <td>실행 중인 컨테이너에 접속</td>
            </tr>
            <tr>
              <td>docker exec</td>
              <td>$ docker exec [컨테이너 이름 | 컨테이너 ID]<br />[명령] [매개 변수]</td>
              <td>컨테이너 외부에서 컨테이너 내의 명령 실행</td>
            </tr>
            <tr>
              <td>docker diff</td>
              <td>$ docker diff [컨테이너 이름 | 컨테이너 ID]</td>
              <td>컨테이너가 실행되면서 변경된 파일 목록 확인<br />A : 추가된 파일<br />C : 변경된 파일<br />D : 삭제된 파일</td>
            </tr>
            <tr>
              <td>docker cp</td>
              <td>$ docker cp [컨테이너 이름 | 컨테이너 ID]<br />[:컨테이너 경로] [호스트 경로]</td>
              <td>컨테이너의 파일을 호스트의 디렉토리로 복사</td>
            </tr>
            <tr>
              <td>docker attach</td>
              <td>$ docker attach [컨테이너 이름 | 컨테이너 ID]</td>
              <td>실행 중인 컨테이너에 접속</td>
            </tr>
            <tr>
              <td>docker rm</td>
              <td>$ docker exec [컨테이너 이름 | 컨테이너 ID]</td>
              <td>생성된 컨테이너 삭제</td>
            </tr>
            <tr>
              <td>docker commit</td>
              <td>$ docker commit [옵션] [컨테이너 이름 | 컨테이너 ID]<br />[이미지 이름] [:태그]</td>
              <td>컨테이너를 이미지 파일로 생성</td>
            </tr>
            <tr>
              <td>docker build</td>
              <td>$ docker build [옵션] [도커 파일 경로]<br />[--tag 이미지 이름 : 이미지 태그] </td>
              <td>도커 파일에 설정된 내용대로 도커 이미지 생성<br />--tag 뒤에 이미지 이름와 이미지 태그를 설정할 수 있음</td>
            </tr>
            <tr>
              <td>docker history</td>
              <td>$ docker history [이미지 이름 | 이미지 ID] [:태그]</td>
              <td>도커 파일에 설정된 내용대로 이미지 히스토리 생성</td>
            </tr>
            <tr>
              <td>docker inspect</td>
              <td>$ docker inspect<br />[이미지나 컨테이너 이름 | 이미지나 컨테이너 ID]</td>
              <td>이미지나 컨테이너의 세부 정보 출력</td>
            </tr>
         </tbody>
    </table>
</div>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="Devops" /><summary type="html"><![CDATA[가상화 (Virtualization) : 컴퓨터 자원 (Computer Resource)의 추상화]]></summary></entry><entry><title type="html">[DevOps] 깃 (Git)</title><link href="http://localhost:4000/devops/git1/" rel="alternate" type="text/html" title="[DevOps] 깃 (Git)" /><published>2022-10-06T00:00:00+09:00</published><updated>2022-11-16T00:00:00+09:00</updated><id>http://localhost:4000/devops/git1</id><content type="html" xml:base="http://localhost:4000/devops/git1/"><![CDATA[<h2 id="버전-관리-version-control--특정한-시간-기준으로-파일-변화를-저장하고-관리">버전 관리 (<code class="language-plaintext highlighter-rouge">Version Control</code>) : 특정한 시간 기준으로 파일 변화를 저장하고 관리</h2>

<ul>
  <li>버전 (<code class="language-plaintext highlighter-rouge">Version</code>) : 어떤 파일이 수정된 기록이나 그 파일이 수정된 내용</li>
</ul>

<h3 id="1-로컬-버전-관리-local-version-control">1. 로컬 버전 관리 (<code class="language-plaintext highlighter-rouge">Local Version Control</code>)</h3>
<ul>
  <li>로컬 사용자가 서버 없이 로컬 컴퓨터 내의 데이터베이스를 이용해 파일의 변경 정보 관리
    <ul>
      <li>협업에서 사용하기 어려움, 내부 정보가 손상되면 복구할 방법이 없음</li>
    </ul>
  </li>
</ul>

<h3 id="2-중앙집중식-버전-관리-central-version-control--서브-머신-svn">2. 중앙집중식 버전 관리 (<code class="language-plaintext highlighter-rouge">Central Version Control</code>) : 서브 머신 (<code class="language-plaintext highlighter-rouge">SVN</code>)</h3>
<ul>
  <li>클라이언트가 최종본를 관리하는 데이터베이스 서버로부터 개별 파일을 로컬에 다운로드, 수정본을 서버에 올림
    <ul>
      <li>데이터베이스 서버에 의존적, 협업 규모가 커지면 수정 충돌 문제 발생 (유사 사례 : <a href="https://namu.wiki/w/편집%20충돌">나무위키의 편집 충돌</a>)</li>
    </ul>
  </li>
</ul>

<h3 id="3-분산형-버전-관리-distributed-version-control--깃-git">3. 분산형 버전 관리 (<code class="language-plaintext highlighter-rouge">Distributed Version Control</code>) : 깃 (<code class="language-plaintext highlighter-rouge">Git</code>)</h3>
<ul>
  <li>클라이언트가 원격 저장소에서 전체 기록과 각 기록을 추적할 수 있는 정보를 포함한 데이터를 로컬 저장소에 저장
    <ul>
      <li>클라이언트가 자신의 작업을 원격 저장소에 독립적인 로컬 저장소에 버전별로 저장하고 관리</li>
      <li>여러 클라이언트들의 작업을 여러 로컬 저장소로 다원화해 각 클라이언트는 충돌의 염려 없이 작업 가능</li>
      <li>필요한 경우에 클라이언트가 서버의 원격 저장소에 원하는 버전을 통합 (서버 단위의 편집 버전을 +1)
        <ul>
          <li>클라이언트는 원격 저장소에 자신의 작업을 통합시킬 때만 서버와 통신하면 됨</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="깃-git--분산형-버전-관리-시스템-distributed-version-control-system"><a href="https://git-scm.com">깃</a> (<code class="language-plaintext highlighter-rouge">Git</code>) : 분산형 버전 관리 시스템 (<code class="language-plaintext highlighter-rouge">Distributed Version Control System</code>)</h2>
<ul>
  <li>터미널 창에 다음 명령어를 입력해 <a href="https://pocj8ur4in.github.io/mac/homebrew1/"><code>homebrew</code></a>를 통해 <code class="language-plaintext highlighter-rouge">git</code> 설치</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew install git
</code></pre></div></div>

<h3 id="gitignore-디렉터리--버전-관리를-하지-않을-파일이나-디렉터리-혹은-파일-확장자를-설정"><code class="language-plaintext highlighter-rouge">.gitignore</code> 디렉터리 : 버전 관리를 하지 않을 파일이나 디렉터리, 혹은 파일 확장자를 설정</h3>

<ul>
  <li>특정한 이름을 가진 파일 제외</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>filename.txt
</code></pre></div></div>

<ul>
  <li>특정한 확장자를 가진 파일 제외</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>*.txt
</code></pre></div></div>

<ul>
  <li>특정한 경로 아래의 파일 제외</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>folder/
</code></pre></div></div>

<ul>
  <li>특정한 경로 아래의 특정한 확장자를 가진 파일 제외</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>folder/filename.txt
</code></pre></div></div>

<ul>
  <li>예외 만들기</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>!filename.txt
</code></pre></div></div>

<h3 id="readmemd-파일--프로젝트에-대한-설명과-사용-방법-license-등의-내용을-작성"><code class="language-plaintext highlighter-rouge">README.md</code> 파일 : 프로젝트에 대한 설명과 사용 방법, <code class="language-plaintext highlighter-rouge">LICENSE</code> 등의 내용을 작성</h3>
<ul>
  <li>기존의 <code><a href="_posts/2022-10-29-markdown1.md">Markdown</a></code>에 깃허브에서만 사용 가능한 기능을 추가한 <code class="language-plaintext highlighter-rouge">Github Flavored Markdown</code>을 이용</li>
  <li><code class="language-plaintext highlighter-rouge">Github</code> 프로젝트 레포지토리 페이지에서 <code class="language-plaintext highlighter-rouge">README.md</code>가 표현된 것을 확인 가능
    <ul>
      <li>자신의 아이디와 같은 이름의 레포지토리의 <code class="language-plaintext highlighter-rouge">README.md</code>는 해당 사용자의 깃허브 프로필에 표시됨</li>
    </ul>
  </li>
</ul>

<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2Fb18y0K%2FbtruITygdgC%2FV4XYZs3D0ZMlzqlkHZkH9k%2Fimg.png" /></p>

<ul>
  <li><a href="https://shields.io">뱃지</a> : 해당 사이트에서 뱃지의 구성 요소들을 직접 지정해 생성한 후 <code class="language-plaintext highlighter-rouge">img</code> 태그로 삽입</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;img src="https://img.shields.io/badge/(아이콘 내용)-(아이콘 색상)?style=flat-square&amp;logo=(로고 이름)&amp;logoColor=(로고 색상)"/&gt;
</code></pre></div></div>

<p><img alt="GitHub followers" src="https://img.shields.io/github/followers/pocj8ur4in?style=social" /></p>

<ul>
  <li><a href="https://hits.seeyoufarm.com">방문자 수</a> : 해당 사이트에서 <code class="language-plaintext highlighter-rouge">Target URL</code>과 로고를 선택한 후 <code class="language-plaintext highlighter-rouge">a</code> 태그로 삽입</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;a href="https://github.com/pocj8ur4in"&gt; ... &lt;/a&gt;
</code></pre></div></div>

<p><a href="https://github.com/pocj8ur4in"><img src="https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Fseondal&amp;count_bg=%23000000&amp;title_bg=%23000000&amp;icon=github.svg&amp;icon_color=%23E7E7E7&amp;title=GitHub&amp;edge_flat=false)" /></a></p>

<ul>
  <li><a href="https://github.com/mazassumnida/mazassumnida"><code>Solved.ac</code> 티어</a> : 해당 사이트에서 마크다운 언어로 삽입</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[![Solved.ac 프로필]
(http://mazassumnida.wtf/api/v2/generate_badge?boj={백준ID})]
(https://solved.ac/백준ID)
</code></pre></div></div>

<p><img src="https://camo.githubusercontent.com/82c9b109cd774ae61438576d5cece4102c8844e1bd1db3a3767dca13eaf93fee/687474703a2f2f6d617a617373756d6e6964612e7774662f6170692f76322f67656e65726174655f62616467653f626f6a3d73747261774a49" /></p>

<ul>
  <li><a href="https://github.com/mazassumnida/mazandi"><code>Solved.ac</code> 잔디</a> : 해당 사이트에서 <code class="language-plaintext highlighter-rouge">img</code> 태그로 삽입</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;img src="http://mazandi.herokuapp.com/api?handle={백준ID}&amp;theme=warm"/&gt;
</code></pre></div></div>

<p><img src="http://mazandi.herokuapp.com/api?handle=pocj8ur4in&amp;theme=warm" /></p>

<ul>
  <li><a href="https://github.com/mazassumnida/mazandi">자주 사용한 언어</a> : 해당 사이트에서 마크다운 언어로 삽입</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[![Top Langs]
(https://github-readme-stats.vercel.app/api/top-langs/?username=깃허브ID)]
(https://github.com/깃허브ID/github-readme-stats)
</code></pre></div></div>

<p><img src="https://camo.githubusercontent.com/fbf4f4aadb79493225ed43d6daca84015eafa94d496ef07bbf723200e12f923c/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170692f746f702d6c616e67732f3f757365726e616d653d616e7572616768617a7261" /></p>

<ul>
  <li><a href="https://github.com/kyechan99/capsule-render"><code>Header &amp; Footer</code></a> : 해당 사이트에서 마크다운 언어로 삽입</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>![header]
(https://capsule-render.vercel.app/api?type=모양&amp;color=auto&amp;height=높이&amp;section=header&amp;text=내용&amp;fontSize=폰트크기)
</code></pre></div></div>
<p><img src="https://camo.githubusercontent.com/0da1f68bf3ed97f972472f31e1dbf68514bc3f72761bf300f8474f53ffab7932/68747470733a2f2f63617073756c652d72656e6465722e76657263656c2e6170702f6170693f747970653d776176696e6726636f6c6f723d6175746f266865696768743d3330302673656374696f6e3d68656164657226746578743d63617073756c6525323072656e64657226666f6e7453697a653d393026616e696d6174696f6e3d66616465496e26666f6e74416c69676e593d333826646573633d4465636f7261746525323047697448756225323050726f66696c652532306f72253230616e792532305265706f2532306c696b652532306d65212664657363416c69676e593d35312664657363416c69676e3d3632" /></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>![Footer]
(https://capsule-render.vercel.app/api?type=모양&amp;color=auto&amp;height=높이&amp;section=header&amp;text=내용&amp;fontSize=폰트크기)
</code></pre></div></div>
<p><img src="https://camo.githubusercontent.com/2d4943deac939925b872b56f5dae84d2f2da502ebabb3da5b51fd6750fef5947/68747470733a2f2f63617073756c652d72656e6465722e76657263656c2e6170702f6170693f747970653d7761766526636f6c6f723d6175746f266865696768743d3230302673656374696f6e3d666f6f74657226746578743d4e6f772532305573652532306d652126666f6e7453697a653d3930" /></p>

<h3 id="git-디렉터리--깃의-버전을-저장할-로컬-저장소"><code class="language-plaintext highlighter-rouge">.git</code> 디렉터리 : 깃의 버전을 저장할 로컬 저장소</h3>
<ul>
  <li>버전 (<code class="language-plaintext highlighter-rouge">Version</code>) : 어떤 파일이 수정된 기록이나 그 파일이 수정된 내용
    <ul>
      <li>작업 트리 (<code class="language-plaintext highlighter-rouge">working tree</code>) : 파일 수정, 저장 등의 작업을 하는 작업 디렉터리
        <ul>
          <li>스테이징 (<code class="language-plaintext highlighter-rouge">Staging</code>) : 작업 트리에서 작업한 파일을 버전으로 만들기 위해 스테이지로 이동</li>
        </ul>
      </li>
      <li>스테이지 (<code class="language-plaintext highlighter-rouge">stage</code>) : 버전으로 만들 파일이 대기하는 스테이징 영역
        <ul>
          <li>커밋 (<code class="language-plaintext highlighter-rouge">Commit</code>) : 스테이지에서 대기중인 파일을 버전으로 만들어 레포지토리에 저장</li>
        </ul>
      </li>
      <li>레포지토리 (<code class="language-plaintext highlighter-rouge">repository</code>) : 스테이지에서 대기하고 있던 파일들을 버전으로 만들어 저장하는 저장소</li>
    </ul>
  </li>
</ul>

<h2 id="깃-명령어-git-command--git-command-형식으로-구성">깃 명령어 (<code class="language-plaintext highlighter-rouge">Git Command</code>) : <code class="language-plaintext highlighter-rouge">git &lt;command&gt;</code> 형식으로 구성</h2>
<blockquote>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">git</code> : 깃 명령 다음에 입력할 수 있는 명령어 옵션 확인</li>
  </ul>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git
...
</code></pre></div>  </div>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">git init</code> : 깃 저장소를 만들 디렉터리 초기화 (깃 저장소인 <code class="language-plaintext highlighter-rouge">.git</code> 디렉터리가 생성)</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git init
Initialized empty Git repository in ...
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">git status</code> :  깃의 현재 상태 확인
    <ul>
      <li><code class="language-plaintext highlighter-rouge">untracked</code> 상태 : 현재 깃이 해당 파일의 수정 여부를 추적하고 있지 않습니다. (파일이 스테이지에서 대기 : <code class="language-plaintext highlighter-rouge">false</code>)</li>
      <li><code class="language-plaintext highlighter-rouge">tracked</code> 상태 : 현재 깃이 해당 파일의 수정 여부를 추적하고 있습니다. (파일이 스테이지에서 대기 : <code class="language-plaintext highlighter-rouge">true</code>)
        <ul>
          <li><code class="language-plaintext highlighter-rouge">unmodified</code> 상태 : 깃에 현재 버전이 저장된 이후 파일이 수정되지 않았습니다.
            <ul>
              <li><code class="language-plaintext highlighter-rouge">Working tree clean</code></li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">modified</code> 상태 : 깃에 현재 버전이 저장된 이후 파일이 수정되었으나 스테이징되지 않았습니다.
            <ul>
              <li><code class="language-plaintext highlighter-rouge">Changes not stage for commit:</code></li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">staged</code> 상태 : 깃에 현재 버전이 저장된 이후 파일이 수정되었고 스테이징되었습니다.
            <ul>
              <li><code class="language-plaintext highlighter-rouge">Changes to be committed:</code></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git status
On branch master  // 현재 master 브랜치에 위치해 있음
No commits yet    // 아직 커밋한 파일이 존재하지 않음
nothing to commit // 현재 커밋한 파일이 존재하지 않음
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git status
On branch master
No commits yet
untracked files   // untracked 상태 : 아직 버전 관리하지 않은 파일들이 존재함
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">git add</code> : 작업 트리에서 스테이지로 스테이징</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git add helloWorld.txt
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">git commit</code> : 스테이지에 있는 파일을 버전으로 커밋
    <ul>
      <li><code class="language-plaintext highlighter-rouge">-m</code> 옵션을 통해 커밋과 함께 메시지 저장</li>
      <li><code class="language-plaintext highlighter-rouge">-am</code> 옵션을 통해 스테이징과 커밋을 동시에 처리</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git commit -m "message1"
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">git log</code> : 레포지토리에 저장된 버전 정보 확인
    <ul>
      <li>커밋 해시 (<code class="language-plaintext highlighter-rouge">commit hash</code>) : 커밋을 구별하는 ID (<code class="language-plaintext highlighter-rouge">HEAD-&gt;master</code> : 해당 버전이 가장 최신임을 표시)</li>
      <li>작성자 (<code class="language-plaintext highlighter-rouge">Author</code>) : <code class="language-plaintext highlighter-rouge">git config --global user</code>를 통해 입력한 사용자 정보 (이름과 이메일)</li>
      <li>작성일 (<code class="language-plaintext highlighter-rouge">Date</code>) : 버전이 작성된 시각</li>
      <li>커밋 메시지 (<code class="language-plaintext highlighter-rouge">commit message</code>) : <code class="language-plaintext highlighter-rouge">git commit -m</code>을 통해 저장된 메시지</li>
    </ul>
  </li>
</ul>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="Devops" /><summary type="html"><![CDATA[버전 관리 (Version Control) : 특정한 시간 기준으로 파일 변화를 저장하고 관리]]></summary></entry><entry><title type="html">[F/E] CSS</title><link href="http://localhost:4000/frontend/css1/" rel="alternate" type="text/html" title="[F/E] CSS" /><published>2022-09-26T00:00:00+09:00</published><updated>2022-11-18T00:00:00+09:00</updated><id>http://localhost:4000/frontend/css1</id><content type="html" xml:base="http://localhost:4000/frontend/css1/"><![CDATA[<h2 id="css-cascading-style-sheet--웹-문서가-표현되는-방법을-기술하는-스타일시트-언어"><code class="language-plaintext highlighter-rouge">CSS</code> (<code class="language-plaintext highlighter-rouge">Cascading Style Sheet</code>) : 웹 문서가 표현되는 방법을 기술하는 스타일시트 언어</h2>

<p><img src="https://velog.velcdn.com/images%2Fteo%2Fpost%2F30a6da36-0203-467a-962f-38e170f31f0e%2Fimage.png" /></p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">~1996</code> : <code class="language-plaintext highlighter-rouge">HTML</code> 문서에 사용자가 원하는 스타일을 적용하고자 함</p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Inline Style</code> : <code class="language-plaintext highlighter-rouge">HTML</code> 태그의 <code class="language-plaintext highlighter-rouge">style</code> 속성으로 태그의 속성을 일일이 적용</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;p style="color: blue"&gt;
    hello world
&lt;/p&gt;
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Inline Style Sheet</code> : <code class="language-plaintext highlighter-rouge">HTML</code> 문서 내 <code class="language-plaintext highlighter-rouge">&lt;style&gt;</code> 태그로 한 문서의 스타일 적용</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;head&gt;
    &lt;style&gt;
        body { background-color: black; }
    &lt;/style&gt;
&lt;/head&gt;
</code></pre></div></div>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">1996</code> : 레이아웃 및 디자인 정보로 인해 <code class="language-plaintext highlighter-rouge">HTML</code> 문서의 구조화가 어려워진 문제를 해결하기 위해 <code class="language-plaintext highlighter-rouge">CSS</code> 탄생</p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Linking Style Sheet</code> : 내용으로부터 스타일 정보를 분리해 별도의 스타일시트 (<code class="language-plaintext highlighter-rouge">.css</code>) 파일을 만들고 <code class="language-plaintext highlighter-rouge">HTML</code> 문서와 연결</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;link rel="stylesheet" href="style.css"&gt;
</code></pre></div></div>
<h3 id="css-스타일시트-css-style-sheet--스타일을-선언하고-태그를-선택하는-css-ruleset의-집합"><code class="language-plaintext highlighter-rouge">CSS</code> 스타일시트 (<code class="language-plaintext highlighter-rouge">CSS Style Sheet</code>) : 스타일을 선언하고 태그를 선택하는 <code class="language-plaintext highlighter-rouge">CSS RuleSet</code>의 집합</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">CSS</code> 선택자 (<code class="language-plaintext highlighter-rouge">CSS Selector</code>) : 어떤 <code class="language-plaintext highlighter-rouge">HTML</code> 태그나 <code class="language-plaintext highlighter-rouge">HTML</code> 속성을 꾸밀지 지정</li>
  <li><code class="language-plaintext highlighter-rouge">CSS</code> 선언 (<code class="language-plaintext highlighter-rouge">CSS declaration</code>) : <code class="language-plaintext highlighter-rouge">CSS</code> 선택자에 대한 <code class="language-plaintext highlighter-rouge">CSS</code> 속성과 <code class="language-plaintext highlighter-rouge">CSS</code> 값을 정의
    <ul>
      <li><code class="language-plaintext highlighter-rouge">CSS</code> 속성 (<code class="language-plaintext highlighter-rouge">CSS Attributes</code>) : 선택자가 지정한 것을 어떤 속성으로 꾸밀지 지정</li>
      <li><code class="language-plaintext highlighter-rouge">CSS</code> 변수 (<code class="language-plaintext highlighter-rouge">CSS Arguments</code>) : 지정된 속성을 어떻게 나타낼지 지정</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CSS 선택자 {
    CSS 속성 : CSS 값; /* CSS 선언 */
}

CSS 선택자 { /* 세미클론 (;)으로 선언을 구분해 여러 번의 선언 가능 */
    CSS 속성1 : CSS 값1;
    CSS 속성2 : CSS 값2;
}


CSS 선택자 { /* 작은따옴표 ('') 혹은 큰따옴표 ("")으로 값의 공백 처리 */
    CSS 속성1 : 'CSS 값1';
    CSS 속성2 : "CSS 값2";
}
</code></pre></div></div>

<blockquote>
  <p>! 같은 <code class="language-plaintext highlighter-rouge">CSS</code> 선택자나 <code class="language-plaintext highlighter-rouge">CSS</code> 속성이 선언되었다면? : <code class="language-plaintext highlighter-rouge">CSS RuleSet</code>에 대한 우선순위의 필요성</p>
</blockquote>

<h3 id="캐스케이딩-cascading--같은-css-선언이-여러-번-선언하였다면-나중에-선언된-것을-적용">캐스케이딩 (<code class="language-plaintext highlighter-rouge">Cascading</code>) : 같은 <code class="language-plaintext highlighter-rouge">CSS</code> 선언이 여러 번 선언하였다면, 나중에 선언된 것을 적용</h3>
<ul>
  <li>나중에 선언된 것이 먼저 선언된 것을 덮어버림 (<code class="language-plaintext highlighter-rouge">Override</code>)</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CSS 선택자 { /* 나중에 선언된 CSS 속성1의 값2가 적용된다. */
    CSS 속성1 : CSS 값1;
    CSS 속성1 : CSS 값2;
}
</code></pre></div></div>
<ul>
  <li>전역적인 것을 먼저 적용하고, 그 다음에 지역적인 것을 적용
    <ul>
      <li>부모 태그에서 선언된 속성은 자식 태그로 상속되어, 부모 자식에서 선언된 값이 적용된다.</li>
      <li>자식 태그에서 상속받은 속성을 다시 선언되면, 자식 태그에서 선언된 값이 적용된다.</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;p style="color: red"&gt;
    &lt;span style="color: blue"&gt;
        CSS 우선순위 : span의 font-color 속성이 p의 font-color 속성보다 높다.
    &lt;/span&gt;
&lt;/p&gt;
</code></pre></div></div>

<p style="font-size:15px; background-color: black; color: red">
    <span style="color: blue">
        CSS 우선순위 : span의 font-color 속성이 p의 font-color 속성보다 높다.
    </span>
</p>

<h3 id="css-명시도-specificity--작성된-순서가-아닌-css-선언에-적용되는-가중치에-따라-우선순위-적용"><code class="language-plaintext highlighter-rouge">CSS</code> 명시도 (<code class="language-plaintext highlighter-rouge">Specificity</code>) : 작성된 순서가 아닌, <code class="language-plaintext highlighter-rouge">CSS</code> 선언에 적용되는 가중치에 따라 우선순위 적용</h3>
<ul>
  <li>가중치는 네 가지 기준을 숫자로 표현 (<code class="language-plaintext highlighter-rouge">0,0,0,0</code>) : 제일 앞의 숫자가 높을수록 높은 우선순위를 가짐
    <ul>
      <li>명시도가 동일할 경우, 나중에 선언된 것을 우선해 적용 (<code class="language-plaintext highlighter-rouge">Cascading</code>)</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p..div &gt; span { color : green;} /* 몀시도 : 0,1,0,2 */
b span {color : red;} /* 명시도 : 0,0,0,2 */
</code></pre></div></div>

<ul>
  <li>첫번째 <code class="language-plaintext highlighter-rouge">0</code> : 인라인 스타일 (<code class="language-plaintext highlighter-rouge">inline style</code>)의 개수</li>
  <li>세번째 <code class="language-plaintext highlighter-rouge">0</code> : 클래스, 가상 클래스, 속성 선택자의 개수</li>
  <li>두번째 <code class="language-plaintext highlighter-rouge">0</code> : <code class="language-plaintext highlighter-rouge">ID</code> 선택자의 개수</li>
  <li>네번째 <code class="language-plaintext highlighter-rouge">0</code> : 태그 선택자, 가상 요소 선택자의 개수</li>
</ul>

<h3 id="important--기존의-우선순위를-무시하고-해당-css-선언을-우선해-적용"><code class="language-plaintext highlighter-rouge">!important</code> : 기존의 우선순위를 무시하고 해당 <code class="language-plaintext highlighter-rouge">CSS</code> 선언을 우선해 적용</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CSS 선택자 { */
    CSS 속성1 : CSS 값1 !important;
    CSS 속성1 : CSS 값2;
}
</code></pre></div></div>
<h3 id="css-선택자-css-selector--html-문서에-스타일을-입힐-요소를-선택하는-문자">CSS 선택자 (<code class="language-plaintext highlighter-rouge">CSS Selector</code>) : <code class="language-plaintext highlighter-rouge">HTML</code> 문서에 스타일을 입힐 요소를 선택하는 문자</h3>
<ul>
  <li>여러 종류의 선택자를 중첩 가능 (<code class="language-plaintext highlighter-rouge">p.span</code>)</li>
  <li>여러 종류의 선택자를 <code class="language-plaintext highlighter-rouge">space</code> 키로 구분해 동시에 선택 가능  (<code class="language-plaintext highlighter-rouge">p.span p.img</code>)</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CSS 선택자 {
    CSS 속성 : CSS 값;
}
</code></pre></div></div>

<h4 id="전체-선택자---모든-요소를-선택하는-선택자">전체 선택자 <code class="language-plaintext highlighter-rouge">*</code> : 모든 요소를 선택하는 선택자</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>* {
  color: blue;
}
</code></pre></div></div>

<h4 id="태그-선택자-tag--해당-태그의-요소를-선택하는-선택자">태그 선택자 <code class="language-plaintext highlighter-rouge">tag</code> : 해당 태그의 요소를 선택하는 선택자</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tag {
  color: aqua;
}
</code></pre></div></div>

<h4 id="아이디-선택자-id--해당-아이디의-요소를-선택하는-선택자">아이디 선택자 <code class="language-plaintext highlighter-rouge">#id</code> : 해당 아이디의 요소를 선택하는 선택자</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#tag {
  color: red;
}
</code></pre></div></div>

<h4 id="클래스-선택자-class--해당-클래스의-요소를-선택하는-선택자">클래스 선택자 <code class="language-plaintext highlighter-rouge">.class</code> : 해당 클래스의 요소를 선택하는 선택자</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.class {
  color: green;
}
</code></pre></div></div>

<h4 id="후손-선택자-selector1-selector2--해당-선택자의-모든-하위-요소-중-하나를-지정해-선택하는-선택자">후손 선택자 <code class="language-plaintext highlighter-rouge">(selector1) (selector2)</code> : 해당 선택자의 모든 하위 요소 중 하나를 지정해 선택하는 선택자</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>div tag {
     color: yellow;
}
...
&lt;div&gt;
    &lt;tag&gt;
        hello world
    &lt;/tag&gt;
&lt;/div&gt;
&lt;div&gt;
    &lt;span&gt;
        &lt;tag&gt;
            hello world
        &lt;/tag&gt;
    &lt;/span&gt;
&lt;/div&gt;
</code></pre></div></div>

<h4 id="자손-선택자-selector1selector2--해당-선택자의-자식-요소-중-하나를-지정해-선택하는-선택자">자손 선택자 <code class="language-plaintext highlighter-rouge">(selector1)&gt;(selector2)</code> : 해당 선택자의 자식 요소 중 하나를 지정해 선택하는 선택자</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>div &gt; tag{
     color: purple;
}
...
&lt;div&gt;
    &lt;tag&gt;
        hello world
    &lt;/tag&gt;
&lt;/div&gt;
</code></pre></div></div>

<h4 id="형제-선택자-selector1selector2--해당-선택자의-형제-요소-중-하나를-지정해-선택하는-선택자">형제 선택자 <code class="language-plaintext highlighter-rouge">(selector1)~(selector2)</code> : 해당 선택자의 형제 요소 중 하나를 지정해 선택하는 선택자</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>div ~ tag{
     color: pink;
}
...
&lt;div&gt;
    hello world
&lt;/div&gt;
&lt;tag&gt;
    !
&lt;/tag&gt;
</code></pre></div></div>

<h4 id="인접-형제-선택자-selector1selector2--선택자의-형제-중-바로-다음에-오는-요소를-선택하는-선택자">인접 형제 선택자 <code class="language-plaintext highlighter-rouge">(selector1)+(selector2)</code> : 선택자의 형제 중 바로 다음에 오는 요소를 선택하는 선택자</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>div + tag{
     color: gray;
}
...
&lt;div&gt;
    hello world
&lt;/div&gt;
&lt;tag&gt;
    ?
&lt;/tag&gt;
&lt;tag&gt;
    !
&lt;/tag&gt;
/* 첫번째 형제 요소인 "?"가 회색으로 출력 */
</code></pre></div></div>

<h4 id="속성-선택자-attr--태그에-해당-속성이-명시되어-있는-요소들을-모두-선택하는-선택자">속성 선택자 <code class="language-plaintext highlighter-rouge">[attr]</code> : 태그에 해당 속성이 명시되어 있는 요소들을 모두 선택하는 선택자</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">[attr = "A"]</code> : 해당 속성이 명시되어 있는 요소들 중 값이 일치하는 것들만 선택</li>
  <li><code class="language-plaintext highlighter-rouge">[attr ~= "B"]</code> : 해당 속성이 명시되어 있는 요소들 (띄어쓰기로 여러 값이 저장된 요소 포함) 중 값이 일치하는 것들만 선택</li>
  <li><code class="language-plaintext highlighter-rouge">[attr ^= "C"]</code> : 해당 속성이 명시되어 있는 요소들 중 값을 접두사로 가지는 것들만 선택</li>
  <li><code class="language-plaintext highlighter-rouge">[attr $= "D"]</code> : 해당 속성이 명시되어 있는 요소들 중 값을 접미사로 가지는 것들만 선택</li>
  <li><code class="language-plaintext highlighter-rouge">[attr *= "E"]</code> : 해당 속성이 명시되어 있는 요소들 중 값을 포함하는 것들만 선택</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tag[attributes]{
     color: white;
}
...
&lt;tag attributes="true"&gt;
    hello world
&lt;/tag&gt;

tag[attributes="attr"]{
     color: yellow;
}
...
&lt;tag attributes="attr"&gt;
    hello world
&lt;/tag&gt;
</code></pre></div></div>

<h4 id="가상-클래스-선택자-pseudo-class-selector--가상-클래스를-선택하는-선택자">가상 클래스 선택자 (<code class="language-plaintext highlighter-rouge">Pseudo-class Selector</code>) : 가상 클래스를 선택하는 선택자</h4>
<ul>
  <li>앵커 가상 클래스 : 어떤 요소에 대한 스타일을 추가하는 선택자
    <ul>
      <li><code class="language-plaintext highlighter-rouge">link</code> : 사용자가 이전에 방문하지 않은 요소에 대한 스타일을 추가하는 선택자</li>
      <li><code class="language-plaintext highlighter-rouge">visited</code> : 사용자가 이전에 방문하였던 요소에 대한 스타일을 추가하는 선택자</li>
      <li><code class="language-plaintext highlighter-rouge">:hover</code> : 사용자가 해당 요소에 커서를 접근시킬 때의 동적인 스타일을 추가하는 선택자</li>
      <li><code class="language-plaintext highlighter-rouge">:active</code> : 사용자가 해당 요소를 클릭할 때의 동적인 스타일을 추가하는 선택자</li>
      <li><code class="language-plaintext highlighter-rouge">:focus</code> : 사용자가 해당 요소에 키보드로 포커싱할 때의 동적인 스타일을 추가하는 선택자</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a:link {
    color: black;
}
a:visited {
    color: gray;
}
a:hover {
    color: red;
}
a:active {
    color: gray;
}
a:focus {
    color: yellow;
}
</code></pre></div></div>

<ul>
  <li>순서 가상 클래스 : 순서가 존재하는 요소의 특정 항목에 대한 스타일을 추가하는 선택자
    <ul>
      <li><code class="language-plaintext highlighter-rouge">:first-child</code> : <code class="language-plaintext highlighter-rouge">li</code>의 첫번쩨 요소에 대한 스타일를 추가하는 선택자</li>
      <li><code class="language-plaintext highlighter-rouge">:last-child</code> : <code class="language-plaintext highlighter-rouge">li</code>의 마지막 요소에 대한 스타일를 추가하는 선택자</li>
      <li><code class="language-plaintext highlighter-rouge">:nth-child(n)</code> : <code class="language-plaintext highlighter-rouge">li</code>의 <code class="language-plaintext highlighter-rouge">n</code>번쩨 요소에 대한 스타일를 추가하는 선택자</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ol li:first-child {
    border-top: none;
}
ol li:last-child {
    border-top: none;
}
ol li:nth-child(2) {
    border-top: none;
}
</code></pre></div></div>

<h4 id="가상-요소-선택자-pseudo-element-selector--가상-요소를-선택하는-선택자">가상 요소 선택자 (<code class="language-plaintext highlighter-rouge">Pseudo-element Selector</code>) : 가상 요소를 선택하는 선택자</h4>
<ul>
  <li>선택된 요소의 태그 안에 가상 요소가 자식 요소로 위치 (<code class="language-plaintext highlighter-rouge">::before</code> &gt; 컨텐츠 &gt; <code class="language-plaintext highlighter-rouge">::after</code> 순)</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>선택자::가상 요소 {
    property: value;
}
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">::before</code> : 요소 내용의 앞에 새 컨텐츠를 추가하는 선택자</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tag::before {
    content: "Hello, ";
}
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">::after</code> : 요소 내용의 뒤에 새 컨텐츠를 추가하는 선택자</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tag::after {
    content: "World! ";
}
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">::first-letter</code> : 요소의 첫번째 글자를 선택하는 선택자</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tag::first-line {
  color: orange;
}
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">::first-line</code> : 요소의 첫번째 줄을 선택하는 선택자</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tag::first-line {
  color: orange;
}
</code></pre></div></div>

<blockquote>
  <p>현재까지 배운 것을 토대로 여러 <code class="language-plaintext highlighter-rouge">HTML</code> 문서로 이루어진 가상의 웹사이트를 디자인한다고 가정해보자.</p>
  <ul>
    <li>태그나 문서에 스타일을 적용하는 경우를 배제하고, 스타일시트에 모든 스타일 정보가 존재한다 가정하자.</li>
    <li>모든 <code class="language-plaintext highlighter-rouge">HTML</code>문서가 <code class="language-plaintext highlighter-rouge">&lt;body&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;main&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;section&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;p&gt;</code>만 존재하고, 다음의 구조를 이룬다.</li>
  </ul>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;body&gt;
  &lt;main&gt;
    &lt;section&gt;
      &lt;p&gt; Hello World! &lt;/p&gt;
    &lt;/section&gt;
  &lt;/main&gt;
&lt;/body&gt;
</code></pre></div>  </div>

  <ul>
    <li>그리고 스타일시트에는 다음과 같은 <code class="language-plaintext highlighter-rouge">CSS</code> 선택자만 사용한다고 가정하자.
      <ul>
        <li>문서의 전반적인 스타일을 적용하기 위한 <code class="language-plaintext highlighter-rouge">&lt;body&gt;</code>를 지정할 선택자</li>
        <li>메인 컨텐츠의 스타일을 적용하기 위한 <code class="language-plaintext highlighter-rouge">&lt;main&gt;</code>를 지정할 선택자</li>
        <li>세부 컨텐츠의 스타일을 적용하기 위한 <code class="language-plaintext highlighter-rouge">&lt;section&gt;</code>를 지정할 선택자</li>
        <li>문단의 스타일을 적용하기 위한 <code class="language-plaintext highlighter-rouge">&lt;p&gt;</code>를 지정할 선택자</li>
      </ul>
    </li>
  </ul>

  <p><code class="language-plaintext highlighter-rouge">A</code>는 모든 문서의 “Hello World!”를 빨간색으로 적용하고 싶어서 태그에 스타일을 적용했다.</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p {
   color:green;
}
</code></pre></div>  </div>

  <p>그런데 <code class="language-plaintext highlighter-rouge">B</code>가 특정 문서의 “Hello World!”를 초록색으로 적용하고 싶어서 <code class="language-plaintext highlighter-rouge">id</code>와 <code class="language-plaintext highlighter-rouge">#</code>를 사용했다.</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;p id="sec2"&gt; Hello World! &lt;/p&gt;
</code></pre></div>  </div>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#sec {
   color:green;
}
</code></pre></div>  </div>

  <p><code class="language-plaintext highlighter-rouge">A</code>가 그걸 보고</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p {
   color:green;
}
</code></pre></div>  </div>

  <ul>
    <li><code class="language-plaintext highlighter-rouge">CSS</code>는 시대가 요구하는 의도대로 설계되었으나, 기존의 설계와 새로운 요구사항에 괴리가 발생
      <ul>
        <li><u>문서를 잘 표현하기 위해 설계된 방법 vs 어플리케이션을 잘 표현하기 위해 설계된 방법</u>
          <ul>
            <li>이를 절충하기 위해 기존의 의도와는 다른 방식으로 <code class="language-plaintext highlighter-rouge">CSS</code>를 사용해 화면을 표현</li>
          </ul>
        </li>
      </ul>
    </li>
    <li><code class="language-plaintext highlighter-rouge">CSS</code>가 웹 문서를 웹 사이트에 표현하는 데에서 시작되어 대규모 웹 서비스를 만드는 데에 한계점 존재
      <ul>
        <li>그러므로, 이를 극복하기 위한 최신 기술들을 꾸준히 학습하고, 프로젝트에 도입해야 된다!</li>
      </ul>
    </li>
  </ul>

  <p><img src="https://velog.velcdn.com/images%2Fteo%2Fpost%2Fdaba1ce2-4a19-4e4c-91fd-46423fde95b1%2Fimage.png" width="70%" /></p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">CSS</code> 변수 (<code class="language-plaintext highlighter-rouge">CSS variables</code>) : <code class="language-plaintext highlighter-rouge">CSS</code> 사용자 속성 (<code class="language-plaintext highlighter-rouge">CSS</code> 일반 속성과 동일한 문법으로 변수를 정의 가능)
    <ul>
      <li><code class="language-plaintext highlighter-rouge">var()</code> 함수 : <code class="language-plaintext highlighter-rouge">CSS</code> 변수값을 읽는 데에 사용</li>
      <li><code class="language-plaintext highlighter-rouge">:root</code> : CSS 변수를 전역 변수로 정의</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.ex {
    --variable-name: value;
}

:root {
       --variable-name: value;
}
</code></pre></div></div>

<h2 id="-박스-모델-box-model-관련-css-속성"># 박스 모델 (<code class="language-plaintext highlighter-rouge">Box Model</code>) 관련 <code class="language-plaintext highlighter-rouge">CSS</code> 속성</h2>
<ul>
  <li>모든 HTML 엘리멘트들은 박스 모양으로 구성되어 있음
    <ul>
      <li>마진 영역 (<code class="language-plaintext highlighter-rouge">Margin Area</code>)</li>
      <li>테두리 영역 (<code class="language-plaintext highlighter-rouge">Border Area</code>)</li>
      <li>패딩 영역 (<code class="language-plaintext highlighter-rouge">Padding Area</code>)</li>
      <li>컨텐츠 영역 (<code class="language-plaintext highlighter-rouge">Content Area</code>)</li>
    </ul>
  </li>
</ul>

<div style="
    background-color: black;
    text-align: center;
    margin-left: auto;
    margin-right: auto;
    padding-top: 2%;
    padding-bottom: 2%;
    ">
    <div style="
            border-style: solid;
            border-width: 5px;
            border-color: red;
            margin-left: 3%;
            margin-right: 3%;
            padding-bottom: 2%;">
        마진 영역 (Margin Area)
        <div style="
            border-style: inherit;
            border-width: inherit;
            border-color: blue;
            margin-left: inherit;
            margin-right: inherit;
            padding-bottom: inherit;">
            테두리 영역 (Border Area)
            <div style="
                border-style: inherit;
                border-width: inherit;
                border-color: green;
                margin-left: inherit;
                margin-right: inherit;
                padding-bottom: inherit;">
                패딩 영역 (Padding Area)
                <div style="
                    border-style: inherit;
                    border-width: inherit;
                    border-color: purple;
                    margin-left: inherit;
                    margin-right: inherit;">
                    컨텐츠 영역 (Content Area)
                </div>
            </div>
        </div>
    </div>
</div>

<h3 id="width-height--박스의-가로-세로-길이를-지정하는-속성"><code class="language-plaintext highlighter-rouge">width</code>, <code class="language-plaintext highlighter-rouge">height</code> : 박스의 가로, 세로 길이를 지정하는 속성</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div style="
    position: relative;
    background-color: black;
    margin-left: auto;
    margin-right: auto;
    width: 200px;
    height: 200px;"&gt;
    &lt;div style="
        position: absolute;
        background-color: white;
        margin-left: auto;
        margin-right: auto;
        width: 70%;
        height: 70%;"&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre></div></div>

<div style="
    position: relative;
    background-color: black;
    margin-left: auto;
    margin-right: auto;
    width: 200px;
    height: 200px;">
    <div style="
        position: absolute;
        background-color: white;
        margin-left: auto;
        margin-right: auto;
        width: 70%;
        height: 70%;">
    </div>
</div>

<h3 id="margin--마진에-값을-부여하는-속성"><code class="language-plaintext highlighter-rouge">margin</code> : 마진에 값을 부여하는 속성</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">margin-top:</code> : 위쪽 마진에 값을 부여하는 속성</li>
  <li><code class="language-plaintext highlighter-rouge">margin-right:</code> : 오른쪽 마진에 값을 부여하는 속성</li>
  <li><code class="language-plaintext highlighter-rouge">margin-bottom:</code> : 아랫쪽 마진에 값을 부여하는 속성</li>
  <li><code class="language-plaintext highlighter-rouge">margin-left:</code> : 왼쪽 마진에 값을 부여하는 속성</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.box {
    margin: xx yy zz ww;
    /* xx는 위쪽 마진, yy는 오른쪽 마진, zz는 아랫쪽 마진, ww는 왼쪽 마진 */
    margin-top: xx;
    margin-right: yy;
    margin-bottom: zz;
    margin-left: ww;
}
</code></pre></div></div>

<div style="
    background-color: black;
    text-align: center;
    margin-left: auto;
    margin-right: auto;
    padding-top: 2%;
    padding-bottom: 2%;
    ">
    <div style="
            background-color:red;
            border-style: solid;
            border-width: 5px;
            border-color: red;
            margin-left: 3%;
            margin-right: 3%;">
        margin-top
        <div>
            <div style="display: inline-block;">
                margin-left<br /><br /><br />
            </div>
            <div style="
                display: inline-block;
                background-color: blue;
                border-style: solid;
                border-width: 5px;
                border-color: blue;
                margin-left: 5%;
                margin-right: 5%;
                padding-left: 8%;
                padding-right: 8%;
                padding-bottom: 2%;">
                테두리 영역<br />(Border Area)
                <div style="
                    background-color:green;
                    border-style: inherit;
                    border-width: 5px;
                    border-color: green;
                    padding-left: 8%;
                    padding-right: 8%;
                    margin-left: inherit;
                    margin-right: inherit;
                    padding-bottom: 2%;">
                    패딩 영역<br />(Padding Area)
                    <div style="
                        background-color:purple;
                        border-style: inherit;
                        border-width: inherit;
                        border-color: purple;
                        margin-left: inherit;
                        margin-right: inherit;
                        padding-bottom: inherit;">
                        컨텐츠 영역 (Content Area)
                    </div>
                </div>
            </div>
            <div style="display: inline-block;">margin-right<br /><br /><br /></div>
            </div>
        <div>margin-bottom</div>
    </div>
</div>

<h3 id="padding--패딩에-값을-부여하는-속성"><code class="language-plaintext highlighter-rouge">padding</code> : 패딩에 값을 부여하는 속성</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">padding-top:</code> : 위쪽 패딩에 값을 부여하는 속성</li>
  <li><code class="language-plaintext highlighter-rouge">padding-right:</code> : 오른쪽 패딩에 값을 부여하는 속성</li>
  <li><code class="language-plaintext highlighter-rouge">padding-bottom:</code> : 아랫쪽 패딩에 값을 부여하는 속성</li>
  <li><code class="language-plaintext highlighter-rouge">padding-left:</code> : 왼쪽 패딩에 값을 부여하는 속성</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.box {
    padding: xx yy zz ww;
    /* xx는 위쪽 패딩, yy는 오른쪽 패딩, zz는 아랫쪽 패딩, ww는 왼쪽 패딩 */
    padding-top: xx;
    padding-right: xx;
    padding-bottom: xx;
    padding-left: xx;
}
</code></pre></div></div>

<div style="
    background-color: black;
    text-align: center;
    margin-left: auto;
    margin-right: auto;
    padding-top: 2%;
    padding-bottom: 2%;
    ">
    <div style="
            border-style: solid;
            border-width: 5px;
            border-color: red;
            background-color:red;
            margin-left: 3%;
            margin-right: 3%;
            padding-bottom: 2%;">
        마진 영역 (Margin Area)
    <div style="
            border-style: inherit;
            border-width: inherit;
            border-color: blue;
            background-color:blue;
            margin-left: inherit;
            margin-right: inherit;
            padding-bottom: inherit;">
            테두리 영역 (Border Area)
    <div style="
        border-style: solid;
        border-width: 5px;
        border-color: green;
        background-color:green;
        margin-left: 10%;
        margin-right: 10%;">
        padding-top
        <div style="display: flex;">
            <div style="flex: 1;">
                <br />padding-left
            </div>
           <div style="
                flex: 1;
                background-color:purple;
                border-style: solid;
                border-width: 5px;
                border-color: purple;">
                컨텐츠 영역<br />(Content Area)
            </div>
            <div style="flex: 1;"><br />padding-right</div>
        </div>
        <div>padding-bottom</div>
    </div>
    </div>
    </div>
</div>

<h3 id="border--테두리에-값을-부여하는-속성"><code class="language-plaintext highlighter-rouge">border</code> : 테두리에 값을 부여하는 속성</h3>

<div style="text-align: center;">
    <table>
        <thead>
            <tr>
                <td>border: 속성</td>
                <td>설명</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>기본값</td>
                <td>medium, none, color</td>
            </tr>
            <tr>
                <td>상속 여부</td>
                <td>N</td>
            </tr>
            <tr>
                <td>애니메이션 여부</td>
                <td>Y</td>
            </tr>
            <tr>
                <td>문법</td>
                <td>
                    <div style="font-size: 120%">
                        <table>
                            <thead>
                                <tr>
                                    <td>border: 값</td>
                                    <td>설명</td>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>border-width</td>
                                    <td>
                                        <table style="font-size: 106%">
                                            <thead>
                                                <tr>
                                                    <td>border-width: 값</td>
                                                    <td>테두리의 두께 정도 지정</td>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr>
                                                    <td>medium</td>
                                                    <td>기본값</td>
                                                </tr>
                                                <tr>
                                                    <td>thick</td>
                                                    <td>기본값보다 굵게</td>
                                                </tr>
                                                <tr>
                                                    <td>thin</td>
                                                    <td>기본값보다 얇게</td>
                                                </tr>
                                                <tr>
                                                    <td>%, px, em, rem</td>
                                                    <td>직접 테두리의 두께 정도 지정</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </td>
                                </tr>
                                <tr>
                                    <td>border-style</td>
                                    <td>
                                        <table style="font-size: 106%">
                                            <thead>
                                                <tr>
                                                    <td>border-style: 값</td>
                                                    <td>테두리의 모양 지정</td>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr>
                                                    <td>none</td>
                                                    <td>테두리를 생성하지 않음 (기본값)</td>
                                                </tr>
                                                <tr>
                                                    <td>dashed, dotted,<br />double, groove,<br />hidden, inset,<br /> outset, ridge,<br />solid</td>
                                                    <td>여러 모양의 테두리를 생성</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </td>
                                </tr>
                                <tr>
                                    <td>border-color</td>
                                    <td>테두리의 색상 지정</td>
                                </tr>
                                <tr>
                                    <td>border-radius</td>
                                    <td>%, px, em, rem 등으로 테두리의 모서리에 대한 둥근 정도 지정
                                        <div style="text-align: left;">
                                            <li>top-left-x</li>
                                            <li>top-right-x</li>
                                            <li>bottom-right-x</li>
                                            <li>bottom-left-x</li>
                                            <li>top-left-y</li>
                                            <li>top-right-y</li>
                                            <li>bottom-right-y</li>
                                            <li>bottom-left-y</li>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div style="
    background-color: black;
    text-align: center;
    margin-left: auto;
    margin-right: auto;
    padding-top: 2%;
    padding-bottom: 2%;
    "&gt;
    &lt;div style="
        border: dashed 5px red;
        margin-left: 5%;
        margin-right: 5%;
        border-radius: 25%;
        padding-bottom: inherit;"&gt;
    dashed 5px red (border-radius: 25%)
        &lt;div style="
            border: dotted 3px blue;
            margin-left: inherit;
            margin-right: inherit;
            padding-bottom: inherit;"&gt;
        dotted 3px blue
            &lt;div style="
                border: double 7px green;
                margin-left: inherit;
                margin-right: inherit;
                padding-bottom: inherit;"&gt;
            double 7px green
                &lt;div style="
                    border: solid 3px gray;
                    margin-left: inherit;
                    margin-right: inherit;
                    padding-bottom: inherit;"&gt;
                    solid 3px gray
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre></div></div>

<div style="
    background-color: black;
    text-align: center;
    margin-left: auto;
    margin-right: auto;
    padding-top: 2%;
    padding-bottom: 2%;
    ">
    <div style="
        border: dashed 5px red;
        margin-left: 5%;
        margin-right: 5%;
        border-radius: 25%;
        padding-bottom: inherit;">
    dashed 5px red (border-radius: 25%)
        <div style="
            border: dotted 3px blue;
            margin-left: inherit;
            margin-right: inherit;
            padding-bottom: inherit;">
        dotted 3px blue
            <div style="
                border: double 7px green;
                margin-left: inherit;
                margin-right: inherit;
                padding-bottom: inherit;">
            double 7px green
                <div style="
                    border: solid 3px gray;
                    margin-left: inherit;
                    margin-right: inherit;
                    padding-bottom: inherit;">
                    solid 3px gray
                </div>
            </div>
        </div>
    </div>
</div>

<h3 id="box-sizing--박스-크기의-기준을-지정하는-속성"><code class="language-plaintext highlighter-rouge">box-sizing</code> : 박스 크기의 기준을 지정하는 속성</h3>

<div style="text-align: center;">
    <table>
        <thead>
            <tr>
                <td>box-sizing: 속성</td>
                <td>설명</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>기본값</td>
                <td>content-box</td>
            </tr>
            <tr>
                <td>상속 여부</td>
                <td>N</td>
            </tr>
            <tr>
                <td>애니메이션 여부</td>
                <td>N</td>
            </tr>
            <tr>
                <td>문법</td>
                <td>
                    <div style="font-size: 120%">
                        <table>
                            <thead>
                                <tr>
                                    <td>box-sizing: 값</td>
                                    <td>설명</td>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>content-box</td>
                                    <td>컨텐츠 영역을 기준으로 지정</td>
                                </tr>
                                <tr>
                                    <td>border-box</td>
                                    <td>테두리 영역을 기준으로 지정</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.cb {
    box-sizing: content-box;
}
.bb {
    box-sizing: border-box;
}
.iib {
    box-sizing: initial;
}
.ihb {
    box-sizing: inherit;
}
</code></pre></div></div>

<h2 id="-배경-관련-css-속성"># 배경 관련 <code class="language-plaintext highlighter-rouge">CSS</code> 속성</h2>

<h3 id="background-color--배경의-색상을-지정하는-속성"><code class="language-plaintext highlighter-rouge">background-color</code> : 배경의 색상을 지정하는 속성</h3>

<div style="text-align: center;">
    <table>
        <thead>
            <tr>
                <td>background-color: 속성</td>
                <td>설명</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>기본값</td>
                <td>transparent</td>
            </tr>
            <tr>
                <td>상속 여부</td>
                <td>N</td>
            </tr>
            <tr>
                <td>애니메이션 여부</td>
                <td>Y</td>
            </tr>
            <tr>
                <td>문법</td>
                <td>
                    <div style="font-size: 120%">
                        <table>
                            <thead>
                                <tr>
                                    <td>background-color: 값</td>
                                    <td>설명</td>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>transparent</td>
                                    <td>배경색 없음</td>
                                </tr>
                                <tr>
                                    <td>color</td>
                                    <td>배경색 지정</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div style="
    position: relative;
    background-color: black;
    width: 200px;
    height: 200px;"&gt;
    &lt;div style="
        position: absolute;
        background-color: white;
        margin-left: auto;
        margin-right: auto;
        width: 70%;
        height: 70%;"&gt;
        &lt;div style="
            position: absolute;
            background-color: black;
            margin-left: auto;
            margin-right: auto;
            width: 70%;
            height: 70%;"&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre></div></div>

<div style="
    position: relative;
    background-color: black;
    width: 200px;
    height: 200px;">
    <div style="
        position: absolute;
        background-color: white;
        margin-left: auto;
        margin-right: auto;
        width: 70%;
        height: 70%;">
        <div style="
            position: absolute;
            background-color: black;
            margin-left: auto;
            margin-right: auto;
            width: 70%;
            height: 70%;">
        </div>
    </div>
</div>

<h3 id="background-image--배경-이미지를-지정하는-속성"><code class="language-plaintext highlighter-rouge">background-image</code> : 배경 이미지를 지정하는 속성</h3>

<div style="text-align: center;">
    <table>
        <thead>
            <tr>
                <td>background-image: 속성</td>
                <td>설명</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>기본값</td>
                <td>none</td>
            </tr>
            <tr>
                <td>상속 여부</td>
                <td>N</td>
            </tr>
            <tr>
                <td>애니메이션 여부</td>
                <td>N</td>
            </tr>
            <tr>
                <td>문법</td>
                <td>
                    <div style="font-size: 120%">
                        <table>
                            <thead>
                                <tr>
                                    <td>background-image: 값</td>
                                    <td>설명</td>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>none</td>
                                    <td>배경 이미지 사용 안함</td>
                                </tr>
                                <tr>
                                    <td>url("")</td>
                                    <td>배경 이미지 URL 지정</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">background-attachment</code> : 배경 이미지의 스크롤 여부를 지정하는 속성
    <ul>
      <li><code class="language-plaintext highlighter-rouge">scroll</code> : 내용을 스크롤하면 배경 이미지는 스크롤되지 않음</li>
      <li><code class="language-plaintext highlighter-rouge">fixed</code> : 배경 이미지가 움직이지 않음</li>
      <li><code class="language-plaintext highlighter-rouge">local</code> : 내용을 스크롤하면 배경 이미지는 스크롤</li>
      <li><code class="language-plaintext highlighter-rouge">initial</code> : 현재의 속성값을 기본값으로 지정</li>
      <li><code class="language-plaintext highlighter-rouge">inherit</code> : 부모 요소의 속성값 상속</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">background-position</code> : 배경 이미지의 위치를 지정하는 속성
    <ul>
      <li><code class="language-plaintext highlighter-rouge">x y</code> : 가로와 세로 위치 지정 (<code class="language-plaintext highlighter-rouge">left-right</code>, <code class="language-plaintext highlighter-rouge">center</code>, <code class="language-plaintext highlighter-rouge">top-bottom</code>, <code class="language-plaintext highlighter-rouge">%</code>, <code class="language-plaintext highlighter-rouge">length</code>)</li>
      <li><code class="language-plaintext highlighter-rouge">initial</code> : 현재의 속성값을 기본값으로 지정</li>
      <li><code class="language-plaintext highlighter-rouge">inherit</code> : 부모 요소의 속성값 상속</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">background-size</code> : 배경 이미지의 크기를 지정하는 속성
    <ul>
      <li><code class="language-plaintext highlighter-rouge">length</code> : 배경 이미지의 가로와 세로 크기나 백분율을 직접 지정</li>
      <li><code class="language-plaintext highlighter-rouge">cover</code> : 가로/세로 비율을 유지하면서, 배경을 다 채울 수 있도록 이미지 조절</li>
      <li><code class="language-plaintext highlighter-rouge">contain</code> : 가로/세로 비율을 유지하면서, 배경을 벗어나지 않도록 이미지 조절</li>
      <li><code class="language-plaintext highlighter-rouge">initial</code> : 현재의 속성값을 기본값으로 지정</li>
      <li><code class="language-plaintext highlighter-rouge">inherit</code> : 부모 요소의 속성값 상속</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div style="background-image: https://cdn.pixabay.com/photo/2020/10/21/04/01/leaves-5672036_1280.png;"&gt;
    background-image
&lt;/div&gt;
</code></pre></div></div>

<h3 id="overflow--컨텐츠가-요소의-크기를-벗어날-때의-처리-방법을-지정하는-속성"><code class="language-plaintext highlighter-rouge">overflow</code> : 컨텐츠가 요소의 크기를 벗어날 때의 처리 방법을 지정하는 속성</h3>

<div style="text-align: center;">
    <table>
        <thead>
            <tr>
                <td>overflow: 속성</td>
                <td>설명</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>기본값</td>
                <td>visible</td>
            </tr>
            <tr>
                <td>상속 여부</td>
                <td>N</td>
            </tr>
            <tr>
                <td>애니메이션 여부</td>
                <td>N</td>
            </tr>
            <tr>
                <td>문법</td>
                <td>
                    <div style="font-size: 120%">
                        <table>
                            <thead>
                                <tr>
                                    <td>overflow: 값</td>
                                    <td>설명</td>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>visible</td>
                                    <td>박스를 넘어가도 내용을 표시</td>
                                </tr>
                                <tr>
                                    <td>hidden</td>
                                    <td>박스를 넘어간 부분은 표시하지 않음</td>
                                </tr>
                                <tr>
                                    <td>scroll</td>
                                    <td>무조건 스크롤바 표시</td>
                                </tr>
                                <tr>
                                    <td>auto</td>
                                    <td>박스를 넘어가면 스크롤바 표시</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div&gt;
    &lt;div style="
        width: 20%;
        height: 150px;
        background-color: black;
        float: left;
        overflow: visible;
        margin-right: 5%;"&gt;
            visible
    &lt;/div&gt;
    &lt;div style="
        width: 20%;
        height: 150px;
        background-color: black;
        float: left;
        overflow: hidden;
        margin-right: 5%;"&gt;
            hidden
    &lt;/div&gt;
    &lt;div style="
        width: 20%;
        height: 150px;
        background-color: black;
        float: left;
        overflow: scroll;
        margin-right: 5%;"&gt;
            scroll
    &lt;/div&gt;
    &lt;div style="
        width: 20%;
        height: 150px;
        background-color: black;
        float: left;
        overflow: auto;
        margin-right: 5%"&gt;
            auto
    &lt;/div&gt;
&lt;/div&gt;
</code></pre></div></div>

<div>
    <div style="width: 20%;
            height: 150px;
            background-color: black;
            float: left;
            overflow: visible;
            margin-right: 5%;">
                자기가 무엇에 홀려 있음을 깨닫는다. 그 넉넉한 뱃길에 여태껏 알아보지 못하고, 숨바꼭질을 하고, 피하려 하고 총으로 쏘려고까지 한 일을 생각하면, 무엇에 씌었던 게 틀림없다. 큰 새 작은 새는 좋아서 미칠 듯이, 물속에 가라앉을 듯, 탁 스치고 지나가는가 하면, 되돌아오면서, 그렇다고 한다.
    </div>
    <div style="width: 20%;
            height: 150px;
            background-color: black;
            float: left;
            overflow: hidden;
            margin-right: 5%;">
                자기가 무엇에 홀려 있음을 깨닫는다. 그 넉넉한 뱃길에 여태껏 알아보지 못하고, 숨바꼭질을 하고, 피하려 하고 총으로 쏘려고까지 한 일을 생각하면, 무엇에 씌었던 게 틀림없다. 큰 새 작은 새는 좋아서 미칠 듯이, 물속에 가라앉을 듯, 탁 스치고 지나가는가 하면, 되돌아오면서, 그렇다고 한다.
    </div>
    <div style="width: 20%;
            height: 150px;
            background-color: black;
            float: left;
            overflow: scroll;
            margin-right: 5%;">
                자기가 무엇에 홀려 있음을 깨닫는다. 그 넉넉한 뱃길에 여태껏 알아보지 못하고, 숨바꼭질을 하고, 피하려 하고 총으로 쏘려고까지 한 일을 생각하면, 무엇에 씌었던 게 틀림없다. 큰 새 작은 새는 좋아서 미칠 듯이, 물속에 가라앉을 듯, 탁 스치고 지나가는가 하면, 되돌아오면서, 그렇다고 한다.
    </div>
    <div style="width: 20%;
            height: 150px;
            background-color: black;
            float: left;
            overflow: auto;
            margin-right: 5%">
                자기가 무엇에 홀려 있음을 깨닫는다. 그 넉넉한 뱃길에 여태껏 알아보지 못하고, 숨바꼭질을 하고, 피하려 하고 총으로 쏘려고까지 한 일을 생각하면, 무엇에 씌었던 게 틀림없다. 큰 새 작은 새는 좋아서 미칠 듯이, 물속에 가라앉을 듯, 탁 스치고 지나가는가 하면, 되돌아오면서, 그렇다고 한다.
    </div>
</div>
<div style="height: 300px;"></div>

<h3 id="z-index--요소들의-수직-위치를-지정하는-속성"><code class="language-plaintext highlighter-rouge">z-index</code> : 요소들의 수직 위치를 지정하는 속성</h3>
<ul>
  <li>숫자가 클수록 위에, 숫자가 작을수록 아래에 위치</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 수직 위치를 역순으로 배치
&lt;div style="
    width: 100px;
	height: 100px;
	position: absolute;
    top: 30px;
	left: 210px;
    background-color: red;
    z-index: 1;"&gt;&lt;/div&gt;
&lt;div style="width: 100px;
	height: 100px;
	position: absolute;
    top: 60px;
	left: 270px;
    background-color: blue;"&gt;&lt;/div&gt;
&lt;div style="width: 100px;
	height: 100px;
    position: absolute;
    top: 90px;
	left: 240px;
    background-color: green;
    z-index: -1;"&gt;&lt;/div&gt;
</code></pre></div></div>

<h2 id="-글자-관련-css-속성"># 글자 관련 <code class="language-plaintext highlighter-rouge">CSS</code> 속성</h2>

<h3 id="color--글자의-색상을-지정하는-속성"><code class="language-plaintext highlighter-rouge">color</code> : 글자의 색상을 지정하는 속성</h3>

<div style="text-align: center;">
    <table>
        <thead>
            <tr>
                <td>color: 속성</td>
                <td>설명</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>기본값</td>
                <td>#000000</td>
            </tr>
            <tr>
                <td>상속 여부</td>
                <td>Y</td>
            </tr>
            <tr>
                <td>애니메이션 여부</td>
                <td>Y</td>
            </tr>
            <tr>
                <td>문법</td>
                <td>
                    <div style="font-size: 120%">
                        <table>
                            <thead>
                                <tr>
                                    <td>color: 값</td>
                                    <td>설명</td>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>color</td>
                                    <td>색상 지정</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div style="color:red"&gt;
    hello world
&lt;/div&gt;
</code></pre></div></div>
<div style="color: red; font-size: 15px; background-color: black;">
    hello world
</div>

<h3 id="font-size--글자의-크기를-지정하는-속성"><code class="language-plaintext highlighter-rouge">font-size</code> : 글자의 크기를 지정하는 속성</h3>

<div style="text-align: center;">
    <table>
        <thead>
            <tr>
                <td>font-size: 속성</td>
                <td>설명</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>기본값</td>
                <td>medium</td>
            </tr>
            <tr>
                <td>상속 여부</td>
                <td>Y</td>
            </tr>
            <tr>
                <td>애니메이션 여부</td>
                <td>Y</td>
            </tr>
            <tr>
                <td>문법</td>
                <td>
                    <div style="font-size: 120%">
                        <table>
                            <thead>
                                <tr>
                                    <td>font-size: 값</td>
                                    <td>설명</td>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>medium</td>
                                    <td>웹 브라우저에서 정한 기본값</td>
                                </tr>
                                <tr>
                                    <td>xx-small, x-small, small, large, x-large, xx-large</td>
                                    <td>기본값에 대한 상대적인 크기</td>
                                </tr>
                                <tr>
                                    <td>smaller, larger</td>
                                    <td>부모 요소의 글자 크기에 대한 상대적인 크기</td>
                                </tr>
                                <tr>
                                    <td>px</td>
                                    <td>글자 크기를 직접 지정</td>
                                </tr>
                                <tr>
                                    <td>%, em</td>
                                    <td>부모 요소의 글자 크기에 대한 상대적인 글자 크기의 비율을 직접 지정</td>
                                </tr>
                                <tr>
                                    <td>rem</td>
                                    <td>최상위 요소의 글자 크기에 대한 상대적인 글자 크기의 비율을 직접 지정</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div style="font-size: xx-small"&gt;xx-small&lt;/div&gt;
&lt;div style="font-size: x-small"&gt;x-small&lt;/div&gt;
&lt;div style="font-size: small"&gt;small&lt;/div&gt;
&lt;div style="font-size: medium"&gt;medium&lt;/div&gt;
&lt;div style="font-size: large"&gt;large&lt;/div&gt;
&lt;div style="font-size: x-large"&gt;x-large&lt;/div&gt;
&lt;div style="font-size: xx-large"&gt;xx-large&lt;/div&gt;
</code></pre></div></div>

<div style="color: white; background-color: black;">
    <div style="font-size: xx-small">xx-small</div>
    <div style="font-size: x-small">x-small</div>
    <div style="font-size: small">small</div>
    <div style="font-size: medium">medium</div>
    <div style="font-size: large">large</div>
    <div style="font-size: x-large">x-large</div>
    <div style="font-size: xx-large">xx-large</div>
</div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div style="font-size: smaller"&gt;smaller&lt;/div&gt;
&lt;div&gt;medium&lt;/div&gt;
&lt;div style="font-size: larger"&gt;larger&lt;/div&gt;
</code></pre></div></div>

<div style="color: white; background-color: black;">
    <div style="font-size: smaller">smaller</div>
    <div>medium</div>
    <div style="font-size: larger">larger</div>
</div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div style="font-size: 10px"&gt;
    10px
    &lt;i style="font-size: 200%;"&gt;
        20px
        &lt;span style="font-size: 0.8em"&gt;
            16px
            &lt;b style="font-size: 1rem"&gt;
                1rem
            &lt;/b&gt;
        &lt;/span&gt;
    &lt;/i&gt;
&lt;/div&gt;
</code></pre></div></div>

<div style="color: white; background-color: black; font-size: 10px">
    10px
    <i style="font-size: 200%;">
        20px
        <span style="font-size: 0.8em">
            16px
            <b style="font-size: 1rem">
                1rem
            </b>
        </span>
    </i>
</div>

<h3 id="font-family--글꼴을-지정하는-속성"><code class="language-plaintext highlighter-rouge">font-family</code> : 글꼴을 지정하는 속성</h3>

<div style="text-align: center;">
    <table>
        <thead>
            <tr>
                <td>font-family: 속성</td>
                <td>설명</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>기본값</td>
                <td>웹 브라우저의 기본 글꼴</td>
            </tr>
            <tr>
                <td>상속 여부</td>
                <td>Y</td>
            </tr>
            <tr>
                <td>애니메이션 여부</td>
                <td>N</td>
            </tr>
            <tr>
                <td>문법</td>
                <td>
                    <div style="font-size: 120%">
                        <table>
                            <thead>
                                <tr>
                                    <td>font-family: 값</td>
                                    <td>설명</td>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>font</td>
                                    <td>글꼴 이름 / 글꼴 유형</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div style="font-family: (지정할 글꼴);"&gt;
    지정된 글꼴로 출력합니다.
&lt;/div&gt;
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div style="font-family: (지정할 글꼴1), (지정할 글꼴2);"&gt;
    지정된 글꼴1로 출력하되 (i) 해당 글꼴이 존재하지 않는다면 (ii) 표현할 수 없다면, 지정된 글꼴2로 출력합니다.
&lt;/div&gt;
</code></pre></div></div>

<h3 id="font-weight--글자의-굵기-정도를-지정하는-속성"><code class="language-plaintext highlighter-rouge">font-weight</code> : 글자의 굵기 정도를 지정하는 속성</h3>
<ul>
  <li>나타낼 수 있는 굵기의 정도는 글꼴마다 다름</li>
</ul>

<div style="text-align: center;">
    <table>
        <thead>
            <tr>
                <td>font-weight: 속성</td>
                <td>설명</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>기본값</td>
                <td>normal</td>
            </tr>
            <tr>
                <td>상속 여부</td>
                <td>Y</td>
            </tr>
            <tr>
                <td>애니메이션 여부</td>
                <td>Y</td>
            </tr>
            <tr>
                <td>문법</td>
                <td>
                    <div style="font-size: 120%">
                        <table>
                            <thead>
                                <tr>
                                    <td>font-weight: 값</td>
                                    <td>설명</td>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>normal</td>
                                    <td>보통 굵기 (400)</td>
                                </tr>
                                <tr>
                                    <td>bold</td>
                                    <td>굵은 굵기 (700)</td>
                                </tr>
                                <tr>
                                    <td>bolder</td>
                                    <td>상속된 값보다 굵은 크기</td>
                                </tr>
                                <tr>
                                    <td>lighter</td>
                                    <td>상속된 값보다 얇은 크기</td>
                                </tr>
                                <tr>
                                    <td>number</td>
                                    <td>굵기 정도를 직접 지정</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div style="font-weight: normal"&gt;
    &lt;div style="font-weight: lighter"&gt;normal-lighter&lt;/div&gt;
    normal
    &lt;div style="font-weight: bolder"&gt;normal-bolder&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-weight: bold"&gt;
    &lt;div style="font-weight: lighter"&gt;bold-lighter&lt;/div&gt;
    bold
    &lt;div style="font-weight: bolder"&gt;bold-bolder&lt;/div&gt;
&lt;/div&gt;
</code></pre></div></div>

<div style="color: white; font-size: 15px; background-color: black;">
    <div style="font-weight: normal">
        <div style="font-weight: lighter">normal-lighter</div>
        normal
        <div style="font-weight: bolder">normal-bolder</div>
    </div>
    <div style="font-weight: bold">
        <div style="font-weight: lighter">bold-lighter</div>
        bold
        <div style="font-weight: bolder">bold-bolder</div>
    </div>
</div>

<h2 id="-텍스트-관련-css-속성"># 텍스트 관련 <code class="language-plaintext highlighter-rouge">CSS</code> 속성</h2>

<h3 id="text-align--텍스트를-정렬하는-속성"><code class="language-plaintext highlighter-rouge">text-align</code> : 텍스트를 정렬하는 속성</h3>

<div style="text-align: center;">
    <table>
        <thead>
            <tr>
                <td>text-align: 문법</td>
                <td>설명</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>left</td>
                <td>왼쪽 정렬</td>
            </tr>
            <tr>
                <td>right</td>
                <td>오른쪽 정렬</td>
            </tr>
            <tr>
                <td>center</td>
                <td>가운데 정렬</td>
            </tr>
            <tr>
                <td>justify</td>
                <td>양쪽 정렬</td>
            </tr>
        </tbody>
    </table>
</div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div style="text-align: left;"&gt;바다는 크레파스보다 진한 푸르고 육중한 비늘을 무겁게 뒤채면서, 숨을 쉰다.&lt;/div&gt;
&lt;div style="text-align: right;"&gt;중립국으로 가는 석방 포로를 실은 인도 배 타고르호는, 흰 페인트로 말쑥하게 칠한 삼천 톤의 몸을 떨면서, 물건처럼 빼곡이 들어찬 동지나 바다의 훈김을 헤치며 미끄려져 간다.&lt;/div&gt;
&lt;div style="text-align: center;"&gt;석방 포로 이명준(李明俊)은, 오른편의 곧장 갑판으로 통한 사닥다리를 타고 내려가, 배 뒤쪽 난간에 가서, 거기에 기대어 선다.&lt;/div&gt;
&lt;div style="text-align: justify;"&gt;담배를 꺼내 물고 라이터를 켜댔으나 바람에 이내 꺼지고 하여, 몇 번이나 그르친 끝에, 그 자리에 쭈그리고 앉아서 오른팔로 얼굴을 가리고 간신히 댕긴다.&lt;/div&gt;
</code></pre></div></div>

<div style="color: white; font-size: 15px; background-color: black;">
    <div style="text-align: left;">바다는 크레파스보다 진한 푸르고 육중한 비늘을 무겁게 뒤채면서, 숨을 쉰다.</div>
    <div style="text-align: right;">중립국으로 가는 석방 포로를 실은 인도 배 타고르호는, 흰 페인트로 말쑥하게 칠한 삼천 톤의 몸을 떨면서, 물건처럼 빼곡이 들어찬 동지나 바다의 훈김을 헤치며 미끄려져 간다.</div>
    <div style="text-align: center;">석방 포로 이명준(李明俊)은, 오른편의 곧장 갑판으로 통한 사닥다리를 타고 내려가, 배 뒤쪽 난간에 가서, 거기에 기대어 선다.</div>
    <div style="text-align: justify;">담배를 꺼내 물고 라이터를 켜댔으나 바람에 이내 꺼지고 하여, 몇 번이나 그르친 끝에, 그 자리에 쭈그리고 앉아서 오른팔로 얼굴을 가리고 간신히 댕긴다.</div>
</div>

<h3 id="text-decoration--텍스트을-꾸미는-선을-지정하는-속성"><code class="language-plaintext highlighter-rouge">text-decoration</code> : 텍스트을 꾸미는 선을 지정하는 속성</h3>

<div style="text-align: center;">
    <table>
        <thead>
            <tr>
                <td>text-decoration: 속성</td>
                <td>설명</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>기본값</td>
                <td>none</td>
            </tr>
            <tr>
                <td>상속 여부</td>
                <td>N</td>
            </tr>
            <tr>
                <td>애니메이션 여부</td>
                <td>N</td>
            </tr>
            <tr>
                <td>문법</td>
                <td>
                    <div style="font-size: 120%">
                        <table>
                            <thead>
                                <tr>
                                    <td>text-decoration: 값</td>
                                    <td>설명</td>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>none</td>
                                    <td>선을 만들지 않음</td>
                                </tr>
                                <tr>
                                    <td>line-through</td>
                                    <td>취소선 생성</td>
                                </tr>
                                <tr>
                                    <td>overline</td>
                                    <td>윗줄 생성</td>
                                </tr>
                                <tr>
                                    <td>underline</td>
                                    <td>밑줄 생성</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div style="text-decoration: none"&gt;none&lt;/div&gt;
&lt;div style="text-decoration: line-through"&gt;line-through&lt;/div&gt;
&lt;div style="text-decoration: overline"&gt;overline&lt;/div&gt;
&lt;div style="text-decoration: underline"&gt;underline&lt;/div&gt;
&lt;div style="text-decoration: line-through overline underline"&gt;text-decoration&lt;/div&gt;
</code></pre></div></div>

<div style="color: white; font-size: 15px; background-color: black;">
    <div style="text-decoration: none">none</div>
    <div style="text-decoration: line-through">line-through</div>
    <div style="text-decoration: overline">overline</div>
    <div style="text-decoration: underline">underline</div>
    <div style="text-decoration: line-through overline underline">text-decoration</div>
</div>

<h3 id="columns--여러-개의-문단을-만드는-속성"><code class="language-plaintext highlighter-rouge">columns</code> : 여러 개의 문단을 만드는 속성</h3>

<div style="text-align: center;">
    <table>
        <thead>
            <tr>
                <td>columns: 속성</td>
                <td>설명</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>기본값</td>
                <td>auto</td>
            </tr>
            <tr>
                <td>속성값</td>
                <td>문단의 최대 개수 or 문단의 최소 가로 길이</td>
            </tr>
         </tbody>
    </table>
</div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div style="columns: 3;"&gt;자기가 무엇에 홀려 있음을 깨닫는다. 그 넉넉한 뱃길에 여태껏 알아보지 못하고, 숨바꼭질을 하고, 피하려 하고 총으로 쏘려고까지 한 일을 생각하면, 무엇에 씌었던 게 틀림없다. 큰 새 작은 새는 좋아서 미칠 듯이, 물속에 가라앉을 듯, 탁 스치고 지나가는가 하면, 되돌아오면서, 그렇다고 한다. 무덤을 이기고 온, 못 잊을 고운 각시들이, 손짓해 본다. 내 딸아. 비로소 마음이 놓인다. 옛날, 어느 벌판에서 겪은 신내림이, 문득 떠오른다. 그러자, 언젠가 전에, 이렇게 이 배를 타고 가다가, 그 벌판을 지금처럼 떠올린 일이, 그리고 딸을 부르던 일이, 이렇게 마음이 놓이던 일이 떠올랐다. 거울 속에 비친 남자는 활짝 웃고 있다.&lt;/div&gt;
</code></pre></div></div>

<div style="color: white; font-size: 15px; background-color: black;">
    <div style="columns: 3;">자기가 무엇에 홀려 있음을 깨닫는다. 그 넉넉한 뱃길에 여태껏 알아보지 못하고, 숨바꼭질을 하고, 피하려 하고 총으로 쏘려고까지 한 일을 생각하면, 무엇에 씌었던 게 틀림없다. 큰 새 작은 새는 좋아서 미칠 듯이, 물속에 가라앉을 듯, 탁 스치고 지나가는가 하면, 되돌아오면서, 그렇다고 한다. 무덤을 이기고 온, 못 잊을 고운 각시들이, 손짓해 본다. 내 딸아. 비로소 마음이 놓인다. 옛날, 어느 벌판에서 겪은 신내림이, 문득 떠오른다. 그러자, 언젠가 전에, 이렇게 이 배를 타고 가다가, 그 벌판을 지금처럼 떠올린 일이, 그리고 딸을 부르던 일이, 이렇게 마음이 놓이던 일이 떠올랐다. 거울 속에 비친 남자는 활짝 웃고 있다.</div>
</div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div style="columns: 150px;"&gt;자기가 무엇에 홀려 있음을 깨닫는다. 그 넉넉한 뱃길에 여태껏 알아보지 못하고, 숨바꼭질을 하고, 피하려 하고 총으로 쏘려고까지 한 일을 생각하면, 무엇에 씌었던 게 틀림없다. 큰 새 작은 새는 좋아서 미칠 듯이, 물속에 가라앉을 듯, 탁 스치고 지나가는가 하면, 되돌아오면서, 그렇다고 한다. 무덤을 이기고 온, 못 잊을 고운 각시들이, 손짓해 본다. 내 딸아. 비로소 마음이 놓인다. 옛날, 어느 벌판에서 겪은 신내림이, 문득 떠오른다. 그러자, 언젠가 전에, 이렇게 이 배를 타고 가다가, 그 벌판을 지금처럼 떠올린 일이, 그리고 딸을 부르던 일이, 이렇게 마음이 놓이던 일이 떠올랐다. 거울 속에 비친 남자는 활짝 웃고 있다.&lt;/div&gt;
</code></pre></div></div>

<div style="color: white; font-size: 15px; background-color: black;">
    <div style="columns: 150px;">자기가 무엇에 홀려 있음을 깨닫는다. 그 넉넉한 뱃길에 여태껏 알아보지 못하고, 숨바꼭질을 하고, 피하려 하고 총으로 쏘려고까지 한 일을 생각하면, 무엇에 씌었던 게 틀림없다. 큰 새 작은 새는 좋아서 미칠 듯이, 물속에 가라앉을 듯, 탁 스치고 지나가는가 하면, 되돌아오면서, 그렇다고 한다. 무덤을 이기고 온, 못 잊을 고운 각시들이, 손짓해 본다. 내 딸아. 비로소 마음이 놓인다. 옛날, 어느 벌판에서 겪은 신내림이, 문득 떠오른다. 그러자, 언젠가 전에, 이렇게 이 배를 타고 가다가, 그 벌판을 지금처럼 떠올린 일이, 그리고 딸을 부르던 일이, 이렇게 마음이 놓이던 일이 떠올랐다. 거울 속에 비친 남자는 활짝 웃고 있다.</div>
</div>

<h2 id="-애니메이션-관련-css-속성"># 애니메이션 관련 <code class="language-plaintext highlighter-rouge">CSS</code> 속성</h2>

<h3 id="transform--요소의-형태를-변화시키는-속성"><code class="language-plaintext highlighter-rouge">transform:</code> : 요소의 형태를 변화시키는 속성</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>transform: rotate( angle )  /* 요소를 angle (각의 크기)만큼 회전 (단위 : deg, turn) */
transform: rotateX( angle ) /* 가로를 축으로 회전 */
transform: rotateY( angle ) /* 세로를 축으로 회전 */

transform: translate( Xpx, Ypx ) /* 요소를 가로축, 세로축 기준으로 이동 */
transform: translateX( px ) /* 가로축을 기준으로 이동 */
transform: translateY( px ) /* 세로축을 기준으로 이동 */

transform: scale( X ) /* 가로와 세로를 모두 X배만큼 확대 */
transform: scale( X, Y ) /* 가로로 X배만큼 확대, 세로로 Y배만큼 확대 */
transform: scaleX( X ) /* 가로로 X배만큼 확대 */
transform: scaleY( Y ) /* 세로로 Y배만큼 확대 */

transform: skewX( Xdeg ) // 가로 뱡향으로 비틈
transform: skewY( Ydeg ) // 세로 뱡향으로 비틈
transform: skewX( Xdeg, Ydeg ) // 가로 뱡향으로 X도만큼, 세로 방향으로 Y도만큼 비틈
</code></pre></div></div>

<h3 id="animation--요소에-애니메이션-효과를-넣는-속성"><code class="language-plaintext highlighter-rouge">animation</code> : 요소에 애니메이션 효과를 넣는 속성</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@keyframes name { /* 애니메이션에 이름을 붙이고, 어떤 모양에서 어떤 모양으로 바꿀지 지정 */
0% { ... } /* 시작할 때 요소의 모양 지정 */
n% { ... } /* n%일 때 요소의 모양 지정 */
100% { ... } /* 끝날 때 요소의 모양 지정 */}

animation-name: /* 어떤 이름의 @keyframes를 사용할지 지정 */; 

animation-duration: /* 애니메이션이 진행될 시간 지정 (단위: s 또는 ms) */;

animation-timing-function: /* 애니메이션의 진행 속도 지정 */
  /* cubic-bezier(n,n,n,n) 함수 : 애니메이션을 3차원 베지에 곡선에 맞게 표현 */
  /* linear : cubic-bezier(0,0,1,1). 애니메이션 효과가 처음부터 끝까지 일정한 속도로 진행 */
  /* ease : 기본값. cubic-bezier(0.25,0.1,0.25,1). 애니메이션 효과가 천천히 시작되어 빨라졌다가 다시 느려짐 */
  /* ease-in : cubic-bezier(0.42,0,1,1). 애니메이션 효과가 천천히 시작됨 */
  /* ease-out : cubic-bezier(0,0,0.58,1). 애니메이션 효과가 천천히 끝남 */
  /* ease-in-out : cubic-bezier(0.42,0,0.58,1). 애니메이션 효과가 천천히 시작되어 천천히 끝남 */
  /* steps(1,...) 함수 : 애니메이션을 스텝에 맞게 끝어서 표현 */
  /* step-start : steps(1,start). 시작하는 지점에 스텝 */
  /* step-end : steps(1,end). 끝나는 지점에 스텝 */

animation-delay: /* 애니메이션이 시작하기 전에 대기하는 시간 지정 (단위: s 또는 ms) */;

animation-iteration-count: /* 애니메이션이 반복하는 횟수 지정 */;

animation-direction: /* 애니메이션이 진행하는 방향 지정 (normal | reverse | alternate | alternate-reverse) */;

animation-fill-mode: /* 애니메이션 종료 후의 상태 지정 (none | forwards | backwards | both) */;

animation-play-state : /* 애니메이션의 진행 여부 지정 (running | paused) */;
</code></pre></div></div>

<h3 id="transition--요소에-트랜지션-효과를-넣는-속성"><code class="language-plaintext highlighter-rouge">transition:</code> : 요소에 트랜지션 효과를 넣는 속성</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>transition-property: /* 트랜지션의 속성 지정 (none | all | property) */;

transition-timing-function: /* 트랜지션의 진행 속도 지정 */;
  /* cubic-bezier(n,n,n,n) 함수 : 애니메이션을 3차원 베지에 곡선에 맞게 표현 */
  /* linear : cubic-bezier(0,0,1,1). 애니메이션 효과가 처음부터 끝까지 일정한 속도로 진행 */
  /* ease : 기본값. cubic-bezier(0.25,0.1,0.25,1). 애니메이션 효과가 천천히 시작되어 빨라졌다가 다시 느려짐 */
  /* ease-in : cubic-bezier(0.42,0,1,1). 애니메이션 효과가 천천히 시작됨 */
  /* ease-out : cubic-bezier(0,0,0.58,1). 애니메이션 효과가 천천히 끝남 */
  /* ease-in-out : cubic-bezier(0.42,0,0.58,1). 애니메이션 효과가 천천히 시작되어 천천히 끝남 */
  /* steps(1,...) 함수 : 애니메이션을 스텝에 맞게 끝어서 표현 */
  /* step-start : steps(1,start). 시작하는 지점에 스텝 */
  /* step-end : steps(1,end). 끝나는 지점에 스텝 */

transition-duration: /* 트랜지션이 진행될 시간 지정 (단위: s 또는 ms) */;

transition-delay: /* 트랜지션이 시작하기 전에 대기하는 시간 지정 (단위: s 또는 ms) */;
</code></pre></div></div>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="Frontend" /><category term="HTML" /><category term="CSS" /><summary type="html"><![CDATA[CSS (Cascading Style Sheet) : 웹 문서가 표현되는 방법을 기술하는 스타일시트 언어]]></summary></entry><entry><title type="html">[macOS] 홈브류 (Homebrew)</title><link href="http://localhost:4000/mac/homebrew1/" rel="alternate" type="text/html" title="[macOS] 홈브류 (Homebrew)" /><published>2022-09-26T00:00:00+09:00</published><updated>2022-09-26T00:00:00+09:00</updated><id>http://localhost:4000/mac/homebrew1</id><content type="html" xml:base="http://localhost:4000/mac/homebrew1/"><![CDATA[<h2 id="homebrew--macos용-패키지-관리-어플리케이션-package-management-application"><a href="https://brew.sh/index_ko">Homebrew</a> : macOS용 패키지 관리 어플리케이션 (Package Management Application)</h2>

<ul>
  <li>일반적으로 커맨드라인 도구나 시스템 패키지 설치에 사용</li>
  <li>cask Package : GUI 어플리케이션 설치도 가능하게 해주는 Homebrew 확장 패키지</li>
  <li>mas Package : App Store 어플리케이션 설치도 가능하게 해주는 Homebrew 확장 패키지</li>
</ul>

<h3 id="homebrew-설치">Homebrew 설치</h3>
<ul>
  <li>터미널 실행 후 다음 명령어를 입력</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
</code></pre></div></div>

<ul>
  <li>터미널 창에 다음 명령어를 입력해 Homebrew가 정상적으로 설치되었는지 확인</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew --version
// "Homebrew X.X.X" 출력 : 정상 설치
// "zsh: command not found: brew" 출력 : 설치 오류
</code></pre></div></div>

<h3 id="cask-package-설치">cask Package 설치</h3>
<ul>
  <li>터미널 창에 다음 명령어를 입력</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew install cask
</code></pre></div></div>

<ul>
  <li>터미널 창에 다음 명령어를 입력해 cask Package가 정상적으로 설치되었는지 확인</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew list
</code></pre></div></div>

<h3 id="mas-package-설치">mas Package 설치</h3>
<ul>
  <li>터미널 창에 다음 명령어를 입력</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew install mas
</code></pre></div></div>

<ul>
  <li>터미널 창에 다음 명령어를 입력해 mas Package가 정상적으로 설치되었는지 확인</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew list
</code></pre></div></div>

<h3 id="homebrew-명령어">Homebrew 명령어</h3>

<table>
    <thead>
        <tr>
            <th>Homebrew 명령어 이름</th>
            <th>Homebrew 명령어 설명</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <th>brew --version</th>
            <td>Homebrew의 버전 정보 확인</td>
        </tr>
        <tr>
            <th>brew doctor</th>
            <td>Homebrew 설치 환경을 검사</td>
        </tr>
        <tr>
            <th>brew update</th>
            <td>Homebrew를 최신 버전으로 업데이트</td>
        </tr>
        <tr>
            <th>brew list</th>
            <td>설치된 패키지를 확인</td>
        </tr>
        <tr>
            <th>brew upgrade</th>
            <td>설치된 모든 패키지를 업데이트</td>
        </tr>
        <tr>
            <th>brew search (패키지명)</th>
            <td>해당 패키지가 설치되어 있는지 검색</td>
        </tr>
        <tr>
            <th>brew install (패키지명)</th>
            <td>해당 패키지를 최신 버전으로 설치</td>
        </tr>
        <tr>
            <th>brew info (패키지명)</th>
            <td>해당 패키지의 정보 확인</td>
        </tr>
        <tr>
            <th>brew upgrade (패키지명)</th>
            <td>해당 패키지를 업데이트</td>
        </tr>
        <tr>
            <th>brew uninstall (패키지명)</th>
            <td>해당 패키지를 삭제</td>
        </tr>
        <tr>
            <th>brew outdated</th>
            <td>최신 버전이 존재하는 패키지 확인</td>
        </tr>
        <tr>
            <th>brew cleanup (패키지명)</th>
            <td>해당 패키지의 구버전에 해당하는 파일 삭제</td>
        </tr>
    </tbody>
</table>

<h3 id="cask-명령어">cask 명령어</h3>
<ul>
  <li>기존의 brew 명령어 뒤에 <code class="language-plaintext highlighter-rouge">--cask</code>를 추가</li>
</ul>

<h3 id="mas-명령어">mas 명령어</h3>

<table>
    <thead>
        <tr>
            <th>mas 명령어 이름</th>
            <th>mas 명령어 설명</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <th>mas version</th>
            <td>mas의 버전 정보 확인</td>
        </tr>
        <tr>
            <th>mas list</th>
            <td>mas로 설치된 패키지 확인</td>
        </tr>
        <tr>
            <th>mas upgrade</th>
            <td>mas로 설치된 모든 패키지를 최신 버전으로 업데이트</td>
        </tr>
        <tr>
            <th>mas search (검색어)</th>
            <td>앱스토어에서 해당 검색어와 일치하는 패키지 검색</td>
        </tr>
        <tr>
            <th>mas install (패키지 ID)</th>
            <td>해당되는 ID를 가진 패키지를 최신 버전으로 설치</td>
        </tr>
        <tr>
            <th>mas upgrade (패키지 ID)</th>
            <td>해당되는 ID를 가진 패키지를 최신 버전으로 업데이트</td>
        </tr>
        <tr>
            <th>mas uninstall (패키지명)</th>
            <td>mas로 설치된 해당 패키지를 삭제</td>
        </tr>
        <tr>
            <th>mas outdated</th>
            <td>mas로 설치된 패키지 중 최신 버전이 존재하는 패키지 확인</td>
        </tr>
    </tbody>
</table>

<h3 id="homebrew-삭제">Homebrew 삭제</h3>
<ul>
  <li>터미널 실행 후 다음 명령어를 입력</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Homebrew로 설치한 모든 package를 일괄 삭제
brew remove --force --ignore-dependencies $(brew list)

// Homebrew 삭제
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)"
</code></pre></div></div>

<ul>
  <li>터미널 창에 다음 명령어를 입력해 Homebrew가 정상적으로 삭제되었는지 확인</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew --version
// "zsh: command not found: brew" 출력 : 정상 삭제
// "Homebrew X.X.X" 출력 : 삭제 오류
</code></pre></div></div>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="Mac" /><summary type="html"><![CDATA[Homebrew : macOS용 패키지 관리 어플리케이션 (Package Management Application)]]></summary></entry></feed>