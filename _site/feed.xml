<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-01-13T00:47:25+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">pocj8ur4in’s blog</title><subtitle></subtitle><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><entry><title type="html">[System Design Interview] 1. 사용자 수에 따른 규모 확장성</title><link href="http://localhost:4000/system_design_interview1/" rel="alternate" type="text/html" title="[System Design Interview] 1. 사용자 수에 따른 규모 확장성" /><published>2024-01-12T00:00:00+09:00</published><updated>2024-01-12T00:00:00+09:00</updated><id>http://localhost:4000/system_design_interview1</id><content type="html" xml:base="http://localhost:4000/system_design_interview1/"><![CDATA[<h2 id="시스템-디자인-면접-system-design-interview--시스템-아키텍처를-설계하는-면접">시스템 디자인 면접 (<code class="language-plaintext highlighter-rouge">System Design Interview</code>) : 시스템 아키텍처를 설계하는 면접</h2>

<ul>
  <li>질문 범위도 매우 크고 모호하며, 답변 절차 또한 정형화되어 있지 않음
    <ul>
      <li>시스템에 따른 변이 (<code class="language-plaintext highlighter-rouge">variation</code>)이 많음
        <ul>
          <li>의사소통 및 문제 해결 능력이 소프트웨어 엔지니어의 필요 능력과 비슷함</li>
          <li>지원자들은 그 모호한 문제를 어떻게 분석하고 단계적으로 해결하는지를 확인
            <ul>
              <li>문제 해결 아이디어를 어떻게 설명하고 토론하는지?</li>
              <li>문제 해결 아이디어를 어떻게 평가하고 개선하는지?</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="사용자-수에-따른-규모-확장성--사용자가-얼마나-되는지에-따라-변화하는-시스템-설계">사용자 수에 따른 규모 확장성 : 사용자가 얼마나 되는지에 따라 변화하는 시스템 설계</h2>

<h3 id="단일-서버--모든-컴포넌트가-단-한-대의-서버에서-실행되는-시스템을-설계">단일 서버 : 모든 컴포넌트가 단 한 대의 서버에서 실행되는 시스템을 설계</h3>

<ul>
  <li>웹, 어플리케이션, 데이터베이스, 캐시 모두가 하나의 서버에서 실행</li>
</ul>

<blockquote>
  <p>단일 서버에서 사용자의 요청이 처리되는 과정</p>

  <ol>
    <li>사용자는 도메인 네임을 이용해 웹 사이트에 접속한다.
      <ol>
        <li>도메인 네임을 <code class="language-plaintext highlighter-rouge">DNS</code> (<code class="language-plaintext highlighter-rouge">Domain Name Service</code>)에 질의한다.</li>
        <li><code class="language-plaintext highlighter-rouge">DNS</code> 조회 결과로 <code class="language-plaintext highlighter-rouge">IP</code> 주소 (웹 서버의 주소)가 반환된다.</li>
      </ol>
    </li>
    <li>해당 <code class="language-plaintext highlighter-rouge">IP</code> 주소로 <code class="language-plaintext highlighter-rouge">HTTP</code> 요청이 전달된다.</li>
    <li>요청을 받은 웹 서버는 <code class="language-plaintext highlighter-rouge">HTML</code> 페이지나 <code class="language-plaintext highlighter-rouge">JSON</code> 형태의 응답을 반환한다.</li>
  </ol>
</blockquote>

<ul>
  <li>그렇다면 실제 요청은 어디에서 오는가?
    <ol>
      <li>웹 어플리케이션인 경우?
        <ol>
          <li>비즈니스 로직의 구현과 데이터 저장의 처리를 위한 서버 구현</li>
          <li>사용자에게 표현하기 위한 클라이언트 구현</li>
        </ol>
      </li>
      <li>모바일 앱인 경우?
        <ol>
          <li>모바일 앱과 웹 서버 간의 통신에는 <code class="language-plaintext highlighter-rouge">HTTP</code> 프로토콜을 이용</li>
          <li><code class="language-plaintext highlighter-rouge">HTTP</code> 프로토콜을 통해 반환될 응답 데이터의 포맷으로 <code class="language-plaintext highlighter-rouge">JSON</code>을 사용</li>
        </ol>
      </li>
    </ol>
  </li>
</ul>

<h3 id="데이터베이스-서버--트래픽을-처리할-서버-웹-계층에-db-서버-데이터-계층을-증설">데이터베이스 서버 : 트래픽을 처리할 서버 (웹 계층)에 DB 서버 (데이터 계층)을 증설</h3>

<ul>
  <li>어떤 데이터베이스를 사용할 것인가?
    <ol>
      <li>관계형 데이터베이스를 선택할 경우?
        <ul>
          <li>관계형 데이터베이스 관리 시스템 (<code class="language-plaintext highlighter-rouge">RDBMS</code>) : <code class="language-plaintext highlighter-rouge">MySQL</code>, …</li>
          <li>자료를 테이블, 열, 칼럼으로 표현</li>
          <li>여러 테이블에 있는 데이터를 그 관계에 따라 조인 (<code class="language-plaintext highlighter-rouge">join</code>)</li>
        </ul>
      </li>
      <li>비관계형 데이터베이스 (<code class="language-plaintext highlighter-rouge">NoSQL</code>)를 선택할 경우?
        <ul>
          <li>저장소 : 키-값 (<code class="language-plaintext highlighter-rouge">key-value</code>), 그래프 (<code class="language-plaintext highlighter-rouge">graph</code>), 칼럼 (<code class="language-plaintext highlighter-rouge">column</code>), 문서 (<code class="language-plaintext highlighter-rouge">document</code>)</li>
        </ul>
      </li>
      <li>비관계형 데이터베이스가 최선인 경우는 언제?
        <ul>
          <li>아주 낮은 지연 시간 (<code class="language-plaintext highlighter-rouge">latency</code>)이 요구됨</li>
          <li>다루는 데이터가 비정형 (<code class="language-plaintext highlighter-rouge">unstructured</code>) 데이터임</li>
          <li><code class="language-plaintext highlighter-rouge">JSON</code> 등 데이터를 직렬화 (<code class="language-plaintext highlighter-rouge">serialize</code>)하거나 역직렬화할 수 있기만 하면 됨</li>
          <li>아주 많은 양의 데이터를 저장해야 함</li>
        </ul>
      </li>
    </ol>
  </li>
</ul>

<h3 id="수직적-규모-확장-vs-수평적-규모-확장">수직적 규모 확장 vs 수평적 규모 확장?</h3>

<ul>
  <li>수직적 확장 (<code class="language-plaintext highlighter-rouge">scale-up</code>) : 서버에 고사양 자원을 추가
    <ul>
      <li>서버로 유입되는 트래픽의 양이 적을 때 최선</li>
      <li>단순하지만, 한계가 명확함 : 하나의 서버에 <code class="language-plaintext highlighter-rouge">CPU</code>나 메모리를 무한대로 증설할 수 없음</li>
      <li>장애에 대한 자동 복구 (<code class="language-plaintext highlighter-rouge">failover</code>)이나 다중화 (<code class="language-plaintext highlighter-rouge">re-dundancy</code>) 방안을 제시하지 않음
        <ul>
          <li>서버에 장애가 발생하면, 어플리케이션이 그대로 중단된다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>수평적 확장 (<code class="language-plaintext highlighter-rouge">scale-out</code>) : 더 많은 서버를 추가하여 성능을 개선
    <ul>
      <li>로드밸런서 (<code class="language-plaintext highlighter-rouge">Load balancer</code>) : 부하 분산 집합 내의 웹 서버들에게 트래픽 부하를 분산
        <ul>
          <li>로드밸런서의 공개 <code class="language-plaintext highlighter-rouge">IP</code>로 접속 : 웹 서버가 클라이언트의 접속을 직접 처리하지 않음</li>
          <li>같은 네트워크 내의 서버 간 통신에는 사설 <code class="language-plaintext highlighter-rouge">IP</code> 주소 사용</li>
          <li>장애를 자동으로 복구하지 못하는 문제 (<code class="language-plaintext highlighter-rouge">no failover</code>) 해소
            <ul>
              <li>서버 <code class="language-plaintext highlighter-rouge">a</code>가 오프라인으로 상태가 변경되어도 모든 트래픽이 서버 b로 전송</li>
            </ul>
          </li>
          <li>웹 계층의 가용성 (<code class="language-plaintext highlighter-rouge">availability</code>) 향상
            <ul>
              <li>로드밸런서를 통해 트래픽을 자동적으로 분산 가능</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>데이터베이스 다중화 : 원본은 <code class="language-plaintext highlighter-rouge">master</code> 서버에, 사본은 <code class="language-plaintext highlighter-rouge">slave</code> 서버에 저장
        <ul>
          <li>쓰기 연산 (<code class="language-plaintext highlighter-rouge">write</code>)과 <code class="language-plaintext highlighter-rouge">DB</code>를 변경하는 명령어의 입력은 <code class="language-plaintext highlighter-rouge">master</code> 서버에서만 가능</li>
          <li><code class="language-plaintext highlighter-rouge">slave</code> 서버는 <code class="language-plaintext highlighter-rouge">master</code> 서버에서 사본을 전달받아, 읽기 연산 (<code class="language-plaintext highlighter-rouge">read</code>)만을 지원
            <ul>
              <li>성능 향상 : 다중화 모델을 통해 병렬로 처리될 수 있는 질의 (<code class="language-plaintext highlighter-rouge">query</code>)의 수 증가</li>
              <li>안정성 (<code class="language-plaintext highlighter-rouge">reliability</code>) : 다중화된 <code class="language-plaintext highlighter-rouge">DB</code>를 여러 곳에 분산 가능</li>
              <li>가용성 (<code class="language-plaintext highlighter-rouge">availability</code>) : 어떤 <code class="language-plaintext highlighter-rouge">DB</code> 서버에 장애가 발생해도 서비스 지속 가능</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">DB</code> 서버 하나가 오프라인 상태가 된다면?
            <ul>
              <li>1대뿐인 <code class="language-plaintext highlighter-rouge">slave</code> 서버가 오프라인 상태인 경우?
                <ul>
                  <li>읽기 연산이 한시적으로 모두 <code class="language-plaintext highlighter-rouge">master</code> 서버로 전달</li>
                </ul>
              </li>
              <li>여러 대의 <code class="language-plaintext highlighter-rouge">slave</code> 서버 중 하나가 오프라인 상태인 경우?
                <ul>
                  <li>읽기 연산이 나머지 <code class="language-plaintext highlighter-rouge">slave</code> 서버로 분산</li>
                </ul>
              </li>
              <li>1대뿐인 <code class="language-plaintext highlighter-rouge">slave</code> 서버를 가진 <code class="language-plaintext highlighter-rouge">master</code> 서버가 오프라인 상태인 경우?
                <ul>
                  <li>해당 <code class="language-plaintext highlighter-rouge">slave</code> 서버가 <code class="language-plaintext highlighter-rouge">master</code> 서버가 돠어 모든 <code class="language-plaintext highlighter-rouge">DB</code> 연산 수행</li>
                  <li>프로덕션 (<code class="language-plaintext highlighter-rouge">production</code>) 환경 : <code class="language-plaintext highlighter-rouge">slave</code> 서버의 데이터가 최신이 아닐 수도 있음
                    <ul>
                      <li>복구 스크립트 (<code class="language-plaintext highlighter-rouge">recovery script</code>)를 통한 추가</li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>로드밸런서와 데이터베이스 다중화를 고려한 설계
    <ul>
      <li>사용자는 DNS로부터 로드밸런서의 공개 <code class="language-plaintext highlighter-rouge">IP</code> 주소를 받는다.</li>
      <li>사용자는 해당 <code class="language-plaintext highlighter-rouge">IP</code> 주소를 사용해 로드밸런서에 접속한다.</li>
      <li><code class="language-plaintext highlighter-rouge">HTTP</code> 요청은 서버 1이나 서버 2로 전달된다.</li>
      <li>웹 서버는 사용자의 데이터를 <code class="language-plaintext highlighter-rouge">slave</code> 데이터베이스에서 읽는다.</li>
      <li>웹 서버는 데이터 변경 연산을 <code class="language-plaintext highlighter-rouge">master</code> 데이터베이스로 전달한다.</li>
    </ul>
  </li>
</ul>

<h4 id="캐시-cache--응답-시간-latency-개선을-위해-데이터를-잠시-보관">캐시 (<code class="language-plaintext highlighter-rouge">Cache</code>) : 응답 시간 (<code class="language-plaintext highlighter-rouge">latency</code>) 개선을 위해 데이터를 잠시 보관</h4>

<ul>
  <li>캐시 계층 : 값비싼 연산 결과 또는 자주 참조되는 데이터를 메모리 안에 보관
    <ul>
      <li>주도형 캐시 전략 (<code class="language-plaintext highlighter-rouge">read-through caching strategy</code>)
        <ol>
          <li>만약 데이터가 캐시에 있다면, 캐시에서 데이터를 읽음
            <ul>
              <li>데이터가 캐시에 없다면, <code class="language-plaintext highlighter-rouge">DB</code>에서 해당 데이터를 읽어 캐시에 씀</li>
            </ul>
          </li>
          <li>캐시에서 웹 서버로 데이터를 반환함</li>
        </ol>
      </li>
    </ul>
  </li>
  <li>캐시를 사용할 때 고려해야 할 점?
    <ul>
      <li>캐시는 어떤 상황에 바람직한가? : 갱신이 드물지만, 참조가 빈번한 데이터</li>
      <li>어떤 데이터를 캐시에 저장? : 영속적이지 않은 데이터</li>
      <li>캐시 내의 데이터는 어떻게 만료 (<code class="language-plaintext highlighter-rouge">expire</code>)할까? : 캐시에서 정책에 따라 삭제</li>
      <li>일관성 (<code class="language-plaintext highlighter-rouge">consistency</code>)는 어떻게 유지할까? : 원본 갱신 연산과 캐시 갱신 연산이 단일 트랜잭션으로 처리되어야</li>
      <li>장애에는 어떻게 대처할까? : 단일 장애 지점의 발생을 피해 캐시 서버를 분산</li>
      <li>캐시 메모리의 크기는? : 캐시 메모리를 과할당 (<code class="language-plaintext highlighter-rouge">over-provision</code>)</li>
      <li>데이터 방출 (<code class="language-plaintext highlighter-rouge">eviction</code>) 정책은? : <code class="language-plaintext highlighter-rouge">LRU</code>, <code class="language-plaintext highlighter-rouge">LFU</code> 등을 경우에 맞게 적용</li>
    </ul>
  </li>
</ul>

<h4 id="컨텐츠-전송-네트워크-cdn--정적-컨텐츠의-전송에-쓰이는-분산-서버-네트워크">컨텐츠 전송 네트워크 (<code class="language-plaintext highlighter-rouge">CDN</code>) : 정적 컨텐츠의 전송에 쓰이는 분산 서버 네트워크</h4>
<ul>
  <li>정적 컨텐츠 (이미지, 비디오, <code class="language-plaintext highlighter-rouge">CSS</code>, <code class="language-plaintext highlighter-rouge">JavaScript</code> 파일 등)을 캐시</li>
  <li>사용자가 웹 사이트에 방문하면, 가장 가까운 <code class="language-plaintext highlighter-rouge">CDN</code> 서버가 정적 컨텐츠를 전달</li>
</ul>

<blockquote>
  <ol>
    <li>사용자가 이미지 <code class="language-plaintext highlighter-rouge">URL</code>를 통해 <code class="language-plaintext highlighter-rouge">image.png</code>에 접근한다.
      <ul>
        <li><code class="language-plaintext highlighter-rouge">URL</code>의 도메인은 <code class="language-plaintext highlighter-rouge">CDN</code> 서비스 사업자가 제공</li>
      </ul>
    </li>
    <li><code class="language-plaintext highlighter-rouge">CDN</code> 서버의 캐시에 해당 이미지가 없으면 원본 서버에서 파일을 요청
      <ul>
        <li>원본 서버가 파일을 반환할 때, 응답 <code class="language-plaintext highlighter-rouge">HTTP</code> 헤더는 <code class="language-plaintext highlighter-rouge">TTL</code> 값을 포함</li>
      </ul>
    </li>
    <li><code class="language-plaintext highlighter-rouge">CDN</code> 서버는 파일을 캐시하고 사용자에 반환 (<code class="language-plaintext highlighter-rouge">TTL</code> 값만큼 캐시)
      <ul>
        <li>사용자가 만료가 안된 이미지의 요청을 <code class="language-plaintext highlighter-rouge">CDN</code> 서버에 전송하면, 캐시로 처리</li>
      </ul>
    </li>
  </ol>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">CDN</code> 사용 시 고려할 사항?
    <ul>
      <li>비용 : 자주 사용되지 않는 컨텐츠를 캐싱하는 것은 비효율적</li>
      <li>만료 기한 : <code class="language-plaintext highlighter-rouge">time-sensitive</code>한 컨텐츠의 만료 기한은 신중히 설정해야 함</li>
      <li><code class="language-plaintext highlighter-rouge">CDN</code> 장애 대처 방안 : <code class="language-plaintext highlighter-rouge">CDN</code>이 오프라인 상태일 때의 동작에 대한 고려</li>
      <li>컨텐츠 무효화 (<code class="language-plaintext highlighter-rouge">Invalidation</code>) 방법 : <code class="language-plaintext highlighter-rouge">CDN</code> 서비스 사업자가 제공하는 <code class="language-plaintext highlighter-rouge">API</code>를 이용한 컨텐츠 무효화
        <ul>
          <li>컨텐츠의 다른 버전을 서비스하도록 오브젝트 버저닝 (<code class="language-plaintext highlighter-rouge">object versioning</code>) 이용</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">CDN</code>과 캐시를 추가한 설계
    <ul>
      <li>정적 컨텐츠는 웹 서버가 아닌 <code class="language-plaintext highlighter-rouge">CDN</code>을 통해 서비스됨</li>
      <li>캐시를 통해 데이터베이스의 부하가 줄어들 수 있음</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>Reference</p>

  <ul>
    <li><a href="https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=278536695">가상 면접으로 배우는 대규모 시스템 설계</a></li>
  </ul>
</blockquote>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="System Design Interview" /><summary type="html"><![CDATA[시스템 디자인 면접 (System Design Interview) : 시스템 아키텍처를 설계하는 면접]]></summary></entry><entry><title type="html">[Engineer Information Processing] 1. 소프트웨어 공학과 개발 방법론</title><link href="http://localhost:4000/engineer_information_processing1/" rel="alternate" type="text/html" title="[Engineer Information Processing] 1. 소프트웨어 공학과 개발 방법론" /><published>2024-01-12T00:00:00+09:00</published><updated>2024-01-12T00:00:00+09:00</updated><id>http://localhost:4000/engineer_information_processing1</id><content type="html" xml:base="http://localhost:4000/engineer_information_processing1/"><![CDATA[<h2 id="소프트웨어-software--프로그램과-프로그램-수행에-필요한-절차-규칙-관련-문서-등을-총칭">소프트웨어 (<code class="language-plaintext highlighter-rouge">Software</code>) : 프로그램과 프로그램 수행에 필요한 절차, 규칙, 관련 문서 등을 총칭</h2>

<ul>
  <li>프로그램 (<code class="language-plaintext highlighter-rouge">Program</code>) : 컴퓨터를 통해 일련의 작업을 처리하기 위한 명령어와 관련된 데이터의 집합</li>
  <li>자료구조 (<code class="language-plaintext highlighter-rouge">Date Structure</code>) : 컴퓨터 기억 장치 내에 자료의 표현, 처리, 저장 방법 등을 총칭
    <ul>
      <li>데이터 간의 논리적 관계나 데이터를 처리하는 알고리즘을 의미</li>
    </ul>
  </li>
  <li>문서 (<code class="language-plaintext highlighter-rouge">Document</code>) : 소프트웨어를 개발하면서 작성하는 문서들을 총칭
    <ul>
      <li>사용자 설명서, 소프트웨어 요구 분석서, 평가서, 명세서, 프로젝트 계획서, 감사 계획서 등을 의미</li>
    </ul>
  </li>
</ul>

<h3 id="소프트웨어의-특징">소프트웨어의 특징</h3>

<ul>
  <li>상품성 : 소프트에어를 개발하면 상품이 되어 판매할 수 있다.</li>
  <li>복잡성 : 개발하는 과정이 복잡하고 관리가 어렵다.</li>
  <li>변경 가능성 : 프로그램을 일부 수정하여 업그레이드 및 오류 수정 등을 할 수 있다.</li>
  <li>복제성 : 복제가 쉬워 쉅게 복사 및 유통이 가능하다.</li>
  <li>순응성 : 기술의 발전, 사용자 요구, 사회적 흐름의 변화에 맞춰 적절히 변형된다.</li>
  <li>비가시성 : 소프트웨어 구조는 외관으로 나타나 있지 않고 코드로 내재되어 있다.</li>
</ul>

<h3 id="소프트웨어의-분류">소프트웨어의 분류</h3>

<ul>
  <li>시스템 소프트웨어 (<code class="language-plaintext highlighter-rouge">System Software</code>) : 하드웨어를 관리하고 컴퓨터 자원을 활용하는 소프트웨어
    <ul>
      <li>운영체제, 컴파일러, 로더, 디버거 등</li>
    </ul>
  </li>
  <li>응용 소프트웨어 (<code class="language-plaintext highlighter-rouge">Application Software</code>) : 사용자가 원하는 목적에 맞게 만들어진 소프트웨어
    <ul>
      <li>엑셀, 파워포인트, 워드프로세서, 포토샵 등</li>
    </ul>
  </li>
  <li>미들웨어 소프트웨어 (<code class="language-plaintext highlighter-rouge">Middleware</code>) : 시스템 소프트웨어와 응용 소프트웨어를 연결해주는 중간 단계의 소프트웨어
    <ul>
      <li>데이터베이스 관리 시스템, 웹 서버, 어플리케이션 서버, 트랜잭션 처리 모니터 등</li>
    </ul>
  </li>
</ul>

<h3 id="시스템-system--컴퓨터로-처리할-자료를-입력해-저장-처리-가공해-출력하도록-설계-및-구현된-정보-체계">시스템 (<code class="language-plaintext highlighter-rouge">System</code>) : 컴퓨터로 처리할 자료를 입력해 저장, 처리, 가공해 출력하도록 설계 및 구현된 정보 체계</h3>

<ul>
  <li>하나의 목적을 위해 시스템의 여러 요소들이 유기적으로 결합된 것
    <ul>
      <li>입력 (<code class="language-plaintext highlighter-rouge">Input</code>) : 처리 방법, 제어 조건, 처리할 데이터를 시스템이 투입하는 요소</li>
      <li>출력 (<code class="language-plaintext highlighter-rouge">Output</code>) : 처리된 결과를 시스템에서 출력하는 요소</li>
      <li>처리 (<code class="language-plaintext highlighter-rouge">Process</code>) : 입력된 자료를 처리 조건에 따라 변환 및 가공하는 요소</li>
      <li>제어 (<code class="language-plaintext highlighter-rouge">Control</code>) : 시스템의 기본 요소들이 각 과정을 올바르게 행하는지 감독하는 요소</li>
      <li>피드백 (<code class="language-plaintext highlighter-rouge">Feedback</code>) : 처리된 결과를 측정 및 파악하여 목표에 도달되었는지 검사하고, 만약 불충분한 경우에 목표 달성을 위해 다시 입력하는 요소</li>
    </ul>
  </li>
</ul>

<h3 id="소프트웨어의-위기-software-crisis--소프트웨어-개발-속도가-하드웨어-개발-속도을-따라가지-못함">소프트웨어의 위기 (<code class="language-plaintext highlighter-rouge">Software Crisis</code>) : 소프트웨어 개발 속도가 하드웨어 개발 속도을 따라가지 못함</h3>

<ul>
  <li>하드웨어 비용을 초과하는 개발 비용의 증가</li>
  <li>개발 기간의 지연</li>
  <li>개발 인력의 부족 및 인건비 상승 → 개발 인력을 최대한 많이 투입하는 것은 해결책이 아님</li>
  <li>성능 및 신뢰성 부족</li>
  <li>유지보수의 어려움에 따른 엄청난 비용</li>
</ul>

<h2 id="소프트웨어-공학-software-engineering--경제적으로-신뢰도-높은-소프트웨어를-만드는-체계">소프트웨어 공학 (<code class="language-plaintext highlighter-rouge">Software Engineering</code>) : 경제적으로 신뢰도 높은 소프트웨어를 만드는 체계</h2>

<ul>
  <li>전기전자공학자협회 (<code class="language-plaintext highlighter-rouge">IEEE</code>) → 소프트웨어의 개발, 운용, 유지보수 및 파기에 대한 체계적인 접근 방법으로 정의</li>
</ul>

<h3 id="소프트웨어의-등장-배경">소프트웨어의 등장 배경</h3>

<ul>
  <li>소프트웨어 개발에 필요한 시간과 비용 예측력이 부족</li>
  <li>개발된 소프트웨어의 품질 수준이 부족</li>
  <li>하드웨어에 대한 소프트웨어의 상대적인 비용이 증대</li>
  <li>유지보수 역할의 증대</li>
  <li>하드웨어 및 소프트웨어 기술의 급속한 발전</li>
  <li>크고 복잡한 소프트웨어에 대한 수요의 증가</li>
  <li>특정 개인에 의존하는 시스템의 개발</li>
</ul>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="Engineer Information Processing" /><summary type="html"><![CDATA[소프트웨어 (Software) : 프로그램과 프로그램 수행에 필요한 절차, 규칙, 관련 문서 등을 총칭]]></summary></entry><entry><title type="html">[Clean Code] 1. 깨끗한 코드</title><link href="http://localhost:4000/clean_code1/" rel="alternate" type="text/html" title="[Clean Code] 1. 깨끗한 코드" /><published>2024-01-11T00:00:00+09:00</published><updated>2024-01-11T00:00:00+09:00</updated><id>http://localhost:4000/clean_code1</id><content type="html" xml:base="http://localhost:4000/clean_code1/"><![CDATA[<h2 id="코드-code--프로그래밍의-결과로서-요구사항을-상세히-표현하는-수단">코드 (<code class="language-plaintext highlighter-rouge">Code</code>) : 프로그래밍의 결과로서 요구사항을 상세히 표현하는 수단</h2>

<ul>
  <li>프로그래밍 (<code class="language-plaintext highlighter-rouge">Programming</code>) : 요구사항을 상세히 명시하는 작업
    <ul>
      <li>나쁜 코드는 프로젝트의 개발 속도를 떨어뜨리며, 팀 생산성을 떨어뜨림</li>
      <li>나쁜 코드는 나쁜 코드를 ‘유혹’한다 : 나쁜 코드를 고치면서 오히려 더 나쁜 코드를 만들어냄</li>
    </ul>
  </li>
</ul>

<h3 id="그렇다면-깨끗한-코드란-무엇인가">그렇다면, 깨끗한 코드란 무엇인가?</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">by</code> 비야네 스트롭스트룹
    <ul>
      <li>보는 사람에게 즐거움을 선사하는 ‘우아한’ 코드</li>
      <li>시간과 자원을 낭비하지 않는 ‘효율적인’ 코드</li>
      <li>세세한 사항까지 철저히 오류 처리를 하는 코드</li>
      <li>‘깨끗한 코드란 한 가지를 잘한다.’ : 나쁜 코드는 많은 일을 하려 애쓰다가 의도와 목적이 흐려진다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">by</code> 그래디 부치
    <ul>
      <li>‘잘 쓴 문장처럼 읽혀야 한다.’ → 가독성 높은 코드</li>
      <li>‘명쾌한 추상화와 단순한 제어문’ → 추측이 아니라 사실에 기반한 코드</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">by</code> 데이브 토마스
    <ul>
      <li>다른 사람이 고치기 쉬운 코드</li>
      <li>테스트 케이스가 존재하는 코드</li>
      <li>작을수록 좋은, ‘최소한의’ 코드</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">by</code> 마이클 페더스
    <ul>
      <li>작성자가 모든 사항을 고려하여, 주의 깊게 작성한 코드</li>
      <li>시간을 들여 깔끔하고 단정하게 정리된 코드</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">by</code> 론 제프리스
    <ul>
      <li>중복을 피하고, 한 기능만을 수행하면서, 표현력이 높으며, 초반부터 간단한 추상화를 고려한 코드</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">by</code> 워드 커닝햄
    <ul>
      <li>읽으면서 ‘짐작했던 기능을 그대로 수행’하는 코드</li>
      <li>언어를 단순하게 보이도록 만드는 책임이 우리에게 달려 있음</li>
    </ul>
  </li>
</ul>

<h3 id="우리가-저자다--저자에게는-독자와-잘-소통할-책임이-있다">우리가 저자다 : 저자에게는 독자와 잘 소통할 책임이 있다.</h3>
<ul>
  <li>코드를 짤 때에는 자신이 저자라는 사실을, 그리고 저자의 노력을 보고 판단할 독자가 잊지 말자!</li>
  <li>저자 역시 독자다 : 새 코드를 짜면서 끊임없이 기존 코드를 읽기에, 읽기 쉽게 만들면 짜기 또한 쉽다.</li>
</ul>

<h3 id="보이스카우트-규칙--캠프장은-처음-왔을-때보다-더-깨끗하게-해놓고-떠나라">보이스카우트 규칙 : “캠프장은 처음 왔을 때보다 더 깨끗하게 해놓고 떠나라.”</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Check-out</code>할 때보다 좀 더 깨끗한 코드를 <code class="language-plaintext highlighter-rouge">Check-in</code>한다면, 코드는 절대 나빠지지 않는다.</li>
</ul>

<blockquote>
  <p>Reference</p>

  <ul>
    <li><a href="https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=248640013">클린 코드 Clean Code</a></li>
  </ul>
</blockquote>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="Clean Code" /><summary type="html"><![CDATA[코드 (Code) : 프로그래밍의 결과로서 요구사항을 상세히 표현하는 수단]]></summary></entry><entry><title type="html">[MacOS] tmux</title><link href="http://localhost:4000/tmux1/" rel="alternate" type="text/html" title="[MacOS] tmux" /><published>2024-01-09T00:00:00+09:00</published><updated>2024-01-09T00:00:00+09:00</updated><id>http://localhost:4000/tmux1</id><content type="html" xml:base="http://localhost:4000/tmux1/"><![CDATA[<h2 id="tmux--터미널-멀티플렉서-terminal-multiplexer"><code class="language-plaintext highlighter-rouge">tmux</code> : 터미널 멀티플렉서 (<code class="language-plaintext highlighter-rouge">Terminal Multiplexer</code>)</h2>

<ul>
  <li>단일 단말기 창 혹은 원격 터미널에서 여러 터미널 세션에 액세스할 수 있도록 가상 콘솔을 다중화
    <ul>
      <li>하나의 터미널에서 화면을 분할하여 사용할 수 있음</li>
      <li>영구적인 세션을 제공하기에 작업 중에 원격 서버와의 연결이 끊겨도 작업 내용이 사라지지 않음</li>
    </ul>
  </li>
</ul>

<h3 id="tmux-구조--tmux-서버와-tmux-클라이언트로-구성"><code class="language-plaintext highlighter-rouge">tmux</code> 구조 : <code class="language-plaintext highlighter-rouge">tmux</code> 서버와 <code class="language-plaintext highlighter-rouge">tmux</code> 클라이언트로 구성</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">tmux</code>를 실행하면 하나의 윈도우를 가진 새로운 세션이 생성되어 화면에 출력
    <ul>
      <li>화면 아래의 상태 표시줄에 현재 세션에 대한 정보가 표시, <code class="language-plaintext highlighter-rouge">interactive commands</code>를 입력할 때 사용</li>
    </ul>
  </li>
</ul>

<p><img src="https://github.com/pocj8ur4in/pocj8ur4in.github.io/assets/105341168/447ea4a0-758d-4a8e-9f12-8a4cff8df627" /></p>

<ul>
  <li>
    <h4 id="세션-session--하나-이상의-윈도우가-있는-독립된-작업-공간">세션 (<code class="language-plaintext highlighter-rouge">Session</code>) : 하나 이상의 윈도우가 있는 독립된 작업 공간</h4>
    <ul>
      <li>세션은 <code class="language-plaintext highlighter-rouge">tmux</code> 서버에서 실행되는 프로세스로, <code class="language-plaintext highlighter-rouge">tmux</code>가 관리하는 가상 터미널</li>
      <li>세션은 1개 이상의 <code class="language-plaintext highlighter-rouge">tmux</code> 클라이언트로 접속할 수 있음</li>
    </ul>
  </li>
  <li>
    <h4 id="윈도우-window--동일한-세션에서-시각적으로-분리된-부분">윈도우 (<code class="language-plaintext highlighter-rouge">Window</code>) : 동일한 세션에서 시각적으로 분리된 부분</h4>
    <ul>
      <li>세션은 무조건 1개 이상의 윈도우를 가짐</li>
      <li>윈도우는 인덱스로 구분되며, 0번부터 시작</li>
    </ul>
  </li>
  <li>
    <h4 id="패널-panel--동일한-윈도우에서-분리된-부분">패널 (<code class="language-plaintext highlighter-rouge">Panel</code>) : 동일한 윈도우에서 분리된 부분</h4>
    <ul>
      <li>패널은 윈도우 내에 1개 이상 존재하면서, 입력을 받는 부분</li>
    </ul>
  </li>
</ul>

<h3 id="tmux-명령어"><code class="language-plaintext highlighter-rouge">tmux</code> 명령어</h3>

<table>
    <thead>
        <tr>
            <th>tmux 명령어 이름</th>
            <th>tmux 명령어 설명</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td colspan="2" style="text-align: center;">세션 관련</td>
        </tr>
        <tr>
            <td>tmux</td>
            <td>새로운 세션 시작</td>
        </tr>
        <tr>
            <td>tmux new -s {이름}</td>
            <td>특정 이름을 가진 새로운 세션 시작</td>
        </tr>
        <tr>
            <td>tmux ls</td>
            <td>현재 열린 세션 목록 나열</td>
        </tr>
        <tr>
            <td>tmux -a</td>
            <td>마지막 세션으로 접속</td>
        </tr>
        <tr>
            <td>tmux -a -t {이름}</td>
            <td>특정 이름을 가진 세션으로 접속</td>
        </tr>
        <tr>
            <td>(tmux에서) exit</td>
            <td>현재 세션 종료</td>
        </tr>
        <tr>
            <td colspan="2" style="text-align: center;">윈도우 관련</td>
        </tr>
        <tr>
            <td>ctrl+b → c</td>
            <td>새로운 윈도우 생성</td>
        </tr>
        <tr>
            <td>ctrl+d</td>
            <td>현재 윈도우 닫기</td>
        </tr>
        <tr>
            <td>ctrl+b → p</td>
            <td>이전 윈도우로 이동</td>
        </tr>
        <tr>
            <td>ctrl+b → n</td>
            <td>다음 윈도우로 이동</td>
        </tr>
        <tr>
            <td>ctrl+b → l</td>
            <td>마지막 윈도우로 이동</td>
        </tr>
        <tr>
            <td>ctrl+b → ,</td>
            <td>현재 윈도우 이름 바꾸기</td>
        </tr>
        <tr>
            <td>ctrl+b → w</td>
            <td>현재 열린 윈도우 목록 나열</td>
        </tr>
         <tr>
            <td>ctrl+b → [</td>
            <td>copy 모드로 전환 (스크롤 가능)</td>
        </tr>
        <tr>
            <td colspan="2" style="text-align: center;">패널 관련</td>
        </tr>
        <tr>
            <td>ctrl+b → "</td>
            <td>현재 패널을 가로로 나누기</td>
        </tr>
        <tr>
            <td>ctrl+b → %</td>
            <td>현재 페널을 세로로 나누기</td>
        </tr>
        <tr>
            <td>ctrl+b → {방향키}</td>
            <td>현재 패널에서 방향키 방향의 패널으로 이동</td>
        </tr>
        <tr>
            <td>ctrl+b → z</td>
            <td>현재 패널 확대/축소 전환</td>
        </tr>
        <tr>
            <td>ctrl+b → ␣</td>
            <td>현재 패널에서 다른 패널으로 순환</td>
        </tr>
        <tr>
            <td>ctrl+b → x</td>
            <td>현재 패널 삭제</td>
        </tr>
    </tbody>
</table>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="MacOS" /><summary type="html"><![CDATA[tmux : 터미널 멀티플렉서 (Terminal Multiplexer)]]></summary></entry><entry><title type="html">[TIL] 2024년 01월 TIL</title><link href="http://localhost:4000/til1/" rel="alternate" type="text/html" title="[TIL] 2024년 01월 TIL" /><published>2023-12-31T00:00:00+09:00</published><updated>2024-01-03T00:00:00+09:00</updated><id>http://localhost:4000/til1</id><content type="html" xml:base="http://localhost:4000/til1/"><![CDATA[<h2 id="2024년에는-til를-작성하자">2024년에는 <code class="language-plaintext highlighter-rouge">TIL</code>를 작성하자!</h2>

<p>2023년은 내게 있어 다사다난한 해였다. 교수님 밑에서 친구들과 함께 프로젝트도 해보고, 기업에 취업하고자 여러 군데에 서류도 넣어 면접까지 진행하였다. 그리고 내가 부족하다고 느낀 부분을 메꾸기 위해 여러 도서들을 사서 정리하기도 하였으며, 주니어 개발자를 위한 여러 행사들 또한 참여하였다. 그런데 지금 올해를 회고하는 내게 있어서 아쉬운 점은 <b>내가 경험한 것들, 내가 공부한 것들, 내가 작업한 것들을 성실히 기록하지 않았다는 점</b>이다. 그래서 이제 하루 앞으로 다가온 2024년에는, 내가 매일매일 성장한 기록을 글의 형태로 남기고자 한다.<br /></p>

<p><code class="language-plaintext highlighter-rouge">TIL</code>은 <code class="language-plaintext highlighter-rouge">Today I Learned</code>의 약자로, 오늘 하루동안 배운 것 혹은 경험하고 느낀 것들을 기록하면서 회고하는 것이다. 이미 여러 개발 블로그들을 보면, <a href="https://github.com/cheese10yun/TIL">김남윤님의 <code class="language-plaintext highlighter-rouge">TIL</code></a>이나 <a href="https://wayhome25.github.io">초보몽키님의 <code class="language-plaintext highlighter-rouge">TIL</code></a>처럼 많이들 <code class="language-plaintext highlighter-rouge">TIL</code>을 쓰시는 것을 볼 수 있다. <code class="language-plaintext highlighter-rouge">TIL</code>이 정해진 양식이나 규칙 없이 자유롭게 자신의 스타일로 작성하다 보니 보고서처럼 쓰시는 분들도, 일기처럼 쓰시는 분들도 있어 정말 다양하게 쓰신다는 것을 알 수 있었다. 원래는 양식이나 규칙을 확실히 정해놓고 매일매일 쓰려고 하였는데 일단은<code class="language-plaintext highlighter-rouge">TIL</code>을 한번도 작성해본 적이 없다보니, 한 일주일 정도는 여러 형태로 글을 써보면서 나한테 적합한 글쓰기 방식을 찾아봐야할 것 같다. 대신에 내가 왜 <code class="language-plaintext highlighter-rouge">TIL</code>을 작성해야 하는지에 대해 생각해보았다.</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">TIL</code>을 쓰는 이유 1. 내가 매일 경험한 것을 회고하기 위해<br />
  하루를 보내면서 내가 모르는 내용이나 개념을 만나는 경우가 정말 많다. 그리고 나의 솔루션이 옳은지에 대한 기술적인 고민을 하는 과정 또한 경험하게 된다. 그러나 그동안 내가 경험한 것들을 기록할 때에는, 이런 과정을 생략하고 개조식으로 글을 써서 내가 중요하다고 생각한 부분 위주로 잘 정리하고자 노력하였다. 지금 와서 내가 정리한 글들을 보면 <b>‘내가 어떤 문제 상황에서 어떻게 해결하였는지?’</b>에 대한 과정이 결여되었다는 느낌을 받았다. 하지만 <code class="language-plaintext highlighter-rouge">TIL</code>처럼 매일 내가 경험한 것들을 작성한다면, 나의 문제 해결 과정이 잘 들어난 글쓰기가 되지 않을까 생각하였다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">TIL</code>을 쓰는 이유 2. 나 자신의 노력을 증명하기 위해<br />
  기업에서 원하는 주니어 개발자는 어떤 인재일까? 에 대해 고민을 많이 해보았다. 사실 시니어들의 눈에 주니어 개발자 모두가 고만고만한 실력이나 기술 스택을 가진 것처럼 보일 것 같았다. 그렇다면 내가 남들보다 더 낫다고 할 수 있는 부분은 무엇일까? 나는 그것이 <b>성장 가능성</b>이지 않을까 생각하였다. <code class="language-plaintext highlighter-rouge">TIL</code>은 내가 성장에 대한 갈망이 높고, 성실함과 꾸준함을 겸비하였음을 어필할 수 있어, 내가 남들보다 더 성장할 수 있는 사람이라는 것을 보여줄 수 있을 것이라고 기대한다.</p>
  </li>
</ul>

<h2 id="2024년-01월-01일-월">2024년 01월 01일 (월)</h2>

<ul>
  <li>신년을 맞아 앞으로 내가 해야할 일들을 아래와 같이 정리해보는 시간을 가졌다.
    <ol>
      <li><code class="language-plaintext highlighter-rouge">Python</code>으로 알고리즘 문제를 풀면서 코딩 테스트 준비하기</li>
      <li><code class="language-plaintext highlighter-rouge">Java</code>, <code class="language-plaintext highlighter-rouge">Spring</code>과 같이 백엔드 개발자에 있어 필요한 내용을 공부해 포스트로 정리하기</li>
      <li>기획부터 배포까지의 일련의 과정을 경험할 수 있는 협업 프로젝트 진행하기</li>
      <li>정보처리기사, <code class="language-plaintext highlighter-rouge">SQLD</code>와 같이 취업에 도움이 될 수 있는 자격증 취득하기</li>
      <li>내가 목표로 하는 회사들에 지원하여 서류, 코딩 테스트, 면접과 같은 채용 프로세스 경험하기</li>
      <li>하루동안 내가 경험한 일들을 기록하는 <code class="language-plaintext highlighter-rouge">TIL</code> 작성하기</li>
      <li>자신의 기술과 역량을 보여줄 수 있는 개발자 포트폴리오 만들기</li>
    </ol>
  </li>
  <li><code class="language-plaintext highlighter-rouge">vocawik</code> 기획서 작성에 참고하기 위해 <a href="https://www.aladin.co.kr/m/mproduct.aspx?ItemId=315185582">사례로 배우는 언어 전환 프로젝트 관리</a> 1장의 내용을 정리하였다.</li>
  <li><code class="language-plaintext highlighter-rouge">Goodnotes</code> 앱으로 필기하기 위해 알라딘으로 구매한 전자책을 스캔하는 <code class="language-plaintext highlighter-rouge">Automator</code> 워크플로우 파일을 작성하였다.</li>
</ul>

<h2 id="2024년-01월-02일-화">2024년 01월 02일 (화)</h2>

<ul>
  <li>어제 작성한 <code class="language-plaintext highlighter-rouge">Automator</code> 워크플로우 파일을 오전에 실행해보니 같은 파일명으로 파일을 덮어쓰는 오류가 있었다. 그래서 스크린샷을 찍어 이를 각각 다른 이름으로 저장하고, 필요한 경우에 색상 반전을 실행하는 파이썬 코드를 작성하였다.
    <ul>
      <li>사실 저장된 스크린샷 이미지들을 하나의 <code class="language-plaintext highlighter-rouge">PDF</code>로 만드는 것까지 코드로 작성하였는데, 막상 실행해보니 출력된 결과물의 화질이 그렇게 좋지 않아 이 부분은 수작업으로 진행하였다.</li>
      <li>알라딘으로 구매한 전자책 37권과 재학 기간에 스캔한 전공 서적 6권을 대상으로 진행하였다. 전자책을 스캔하는 작업과 색상 반전을 실행하는 작업 모두 내 예상보다 많은 시간이 소요되서 하루 내내 여기에만 매달린 거 같다.</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from PIL import ImageGrab
import time
import pyautogui


def take_screenshot(filename):
    # 로딩 시간 지연
    time.sleep(2)

    # 현재 화면 전체를 캡처
    screenshot = ImageGrab.grab()

    # 파일로 저장
    screenshot.save(filename)

    # 오른쪽 방향키 누르기
    pyautogui.press('right')


if __name__ == "__main__":
    # 초기 시간 지연
    time.sleep(5)

    for i in range(1, 256):
        file_path = "page" + str(i) + ".png"

        # 스크린샷 찍기
        take_screenshot(file_path)

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from PIL import Image


def invert_colors(image_path, output_path):
    # 이미지 열기
    image = Image.open(image_path)

    # 이미지 모드 확인 및 변경 (모드가 'RGBA' 또는 'LA'인 경우에 대비)
    if image.mode in ('RGBA', 'LA'):
        r, g, b, a = image.split()
        rgb_image = Image.merge('RGB', (r, g, b))
    else:
        rgb_image = image.convert('RGB')

    # 이미지 크기 및 모드 확인
    width, height = rgb_image.size

    # 각 픽셀의 RGB 값을 반전
    inverted_image = Image.new('RGB', (width, height))
    for x in range(width):
        for y in range(height):
            pixel = rgb_image.getpixel((x, y))
            inverted_pixel = tuple(255 - value for value in pixel)
            inverted_image.putpixel((x, y), inverted_pixel)

    # 반전된 이미지 저장
    inverted_image.save(output_path)


if __name__ == "__main__":
    for i in range(1, 256):
        input_image_path = "page" + str(i) + ".png"
        output_image_path = "pages" + str(i) + ".png"
        invert_colors(input_image_path, output_image_path)

</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">vocawik</code> 기획서 작성에 참고하기 위해 <a href="https://www.aladin.co.kr/m/mproduct.aspx?ItemId=315185582">사례로 배우는 언어 전환 프로젝트 관리</a> 2장의 내용을 정리하였다.</li>
</ul>

<h2 id="2024년-01월-03일-수">2024년 01월 03일 (수)</h2>

<ul>
  <li>오늘 아침, 지난달에 면접을 진행한 <a href="https://hanaro.recruiter.co.kr">디지털하나路</a> 2기 금융서비스개발 분야에 합격하였다는 전화를 받았다.
    <ul>
      <li>솔직히 말하면 면접을 진행하면서 아쉬운 점들이 많았고, 경쟁률도 내 예상보다 높은 편이였기에 이렇게 합격을 하게 될 줄은 전혀 몰랐다. 6개월이라는 짧지 않은 기간에 매일 9시간씩 심도 깊게 진행되는 프로그램인 만큼, 본 과정에 열심히 참여하여 이전보다 성장할 수 있도록 노력해야겠다.</li>
      <li><a href="https://hanaro.recruiter.co.kr/career/introduce">공고문</a>에 따르면 디지털하나路 금융서비스개발의 커리큘럼은 금융의 이해, 서비스 개발의 요소, <code class="language-plaintext highlighter-rouge">FrontEnd</code> 개발, <code class="language-plaintext highlighter-rouge">BackEnd</code> 개발, 데이터베이스와 보안, 3차례의 팀 프로젝트로 구성되어 있다. 과정 하나하나가 <code class="language-plaintext highlighter-rouge">BackEnd</code> 개발자를 지망하는 내게 큰 도움이 될 것 같고, 특히 부족한 협업 경험이 아킬레스건이라 생각한 내게 있어 팀 프로젝트를 3차례 진행해보는 것은 굉장한 메리트가 될 수 있을 것이라고 생각한다.</li>
      <li>하나은행 <code class="language-plaintext highlighter-rouge">HR</code> 담당자 분들이 진행하시는 채용설명회 및 채용상담 또한, 자소서나 포트폴리오를 어떻게 작성하고 관리할지 고민이 많고 실제 면접 경험이 부족한 나에게 큰 도움이 될 것 같다.</li>
    </ul>
  </li>
</ul>

<p><img src="https://github.com/pocj8ur4in/pocj8ur4in.github.io/assets/105341168/9422a984-6808-4fa6-987f-31b724c0afa9" /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">vocawik</code> 기획서 작성에 참고하기 위해 <a href="https://www.aladin.co.kr/m/mproduct.aspx?ItemId=315185582">사례로 배우는 언어 전환 프로젝트 관리</a> 3장의 내용을 정리하였다.
    <ul>
      <li>디지털하나路 일정을 감안힌다면, 보다 빠른 기획서의 작성이 필요하다. 오는 1월 13일에 인프라 매니저와의 만남을 약속하였고 1월 15일에 디지털하나路 과정이 시작될 예정이니, 1월 11일에 기획서 초안을 완성하도록 한다.</li>
    </ul>
  </li>
</ul>

<h2 id="2024년-01월-04일-목">2024년 01월 04일 (목)</h2>

<ul>
  <li><del>내일배움카드 발급이 이렇게 오래 걸릴 줄은 몰랐다. 디지털하나路 일정이 촉박하다보니, 카드를 직접 수령하려고 은행만 세 군데 다녀왔다. 그건 그렇고 그동안 작성한 내용을 읽어보니 점점 일기장이 되는 것 같다? 그래도 일단은 괜찮겠지..?</del></li>
  <li><code class="language-plaintext highlighter-rouge">vocawik</code> 기획서 작성에 참고하기 위해 <a href="https://www.aladin.co.kr/m/mproduct.aspx?ItemId=315185582">사례로 배우는 언어 전환 프로젝트 관리</a> 4장의 내용을 정리하였다.</li>
</ul>

<h2 id="2024년-01월-05일-금">2024년 01월 05일 (금)</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">vocawik</code> 기획서 작성에 참고하기 위해 <a href="https://www.aladin.co.kr/m/mproduct.aspx?ItemId=315185582">사례로 배우는 언어 전환 프로젝트 관리</a> 5장의 내용을 정리하였다.
    <ul>
      <li>책의 내용이 7장으로 구성되어 있는데, 7장은 후일담이라 내일 6~7장의 내용을 정리해 마무리하면 될 것 같다.</li>
      <li>정리를 마무리한 다음에는 정리된 내용을 토대로 기획서의 뼈대를 잡을 계획이다. 내가 기획하고 있는 프로젝트는 기존 프로젝트의 언어 전환이 아닌 신규 서비스의 구현이긴 하지만, 실제로 어떻게 프로젝트를 관리할지에 대해 다시 한 번 생각해볼 수 있었으며 기획서에도 분명 채용할 만한 부분이 많음을 느끼고 있다.
        <ul>
          <li>기획서는 현재 1. 기획 배경, 2. 타 사이트 분석, 3. 서비스 설계의 흐름으로 작성하고 있으며, 현재 1번의 내용은 완성하고 2번의 내용을 작성하고 있는 상태이다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="2024년-01월-06일-토">2024년 01월 06일 (토)</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">vocawik</code> 기획서 작성에 참고하기 위해 <a href="https://www.aladin.co.kr/m/mproduct.aspx?ItemId=315185582">사례로 배우는 언어 전환 프로젝트 관리</a> 6~7장의 내용을 정리하였다.</li>
  <li>이전에 작성하였던 <a href="https://pocj8ur4in.github.io/homebrew1/">홈브류 (<code class="language-plaintext highlighter-rouge">Homebrew</code>)와 관련된 게시글</a>을 수정하여 포스팅하였다.</li>
</ul>

<h2 id="2024년-01월-07일-일">2024년 01월 07일 (일)</h2>

<ul>
  <li>이전에 작성하였던 <a href="https://pocj8ur4in.github.io/html1/"><code class="language-plaintext highlighter-rouge">HTML</code>와 관련된 게시글</a>과 <a href="https://pocj8ur4in.github.io/css1/"><code class="language-plaintext highlighter-rouge">CSS</code>와 관련된 게시글</a>을 수정하여 포스팅하였다.</li>
</ul>

<h2 id="2024년-01월-08일-월">2024년 01월 08일 (월)</h2>

<ul>
  <li>이전에 작성하였던 <a href="https://pocj8ur4in.github.io/algorithm2/">구현 알고리즘과 관련된 게시글</a>을 수정하여 포스팅하였다. 사실 예제 느낌으로 문제들도 풀었던 것 같은데, 아무리 찾아봐도 안보여서 백준에서 구현 문제를 몇 개 풀고 이에 대한 해설까지 더해서 다시 올려야 할 것 같다.</li>
</ul>

<h2 id="2024년-01월-09일-화">2024년 01월 09일 (화)</h2>

<ul>
  <li>리눅스를 공부하는 과정에 <code class="language-plaintext highlighter-rouge">tmux</code>에 대해 알게 되어 맥북 로컬 환경에 설치하여 직접 실습해보고, <a href="https://pocj8ur4in.github.io/tmux1/"><code class="language-plaintext highlighter-rouge">tmux</code>에 관련된 게시글</a>을 작성해 포스팅하였다. 간단한 구조나 직접 사용하면서 필요하다고 생각된 명령어들 위주로 게시글을 작성하긴 하였는데, 아무래도 직접 사용해보면서 이 툴에 익숙해지는 것이 무엇보다 중요해보인다.</li>
</ul>

<h2 id="2024년-01월-10일-수">2024년 01월 10일 (수)</h2>

<ul>
  <li>이전에 작성하였던 <a href="https://pocj8ur4in.github.io/python1/"><code class="language-plaintext highlighter-rouge">python</code>과 관련된 게시글</a>을 수정하여 포스팅하였다. 조만간 이 게시글의 내용을 참고하여 <code class="language-plaintext highlighter-rouge">SpringBoot</code>가 기반으로 하는 <code class="language-plaintext highlighter-rouge">Java</code>에 대해서도 심층 깊게 작성할 계획이다.</li>
  <li>도메인 주도 개발로 시작하는 마이크로서비스 개발 2장을 공부하면서 마이크로서비스 <code class="language-plaintext highlighter-rouge">MSA</code>에 대한 게시글을 작성중이다.
    <ul>
      <li>2장의 내용이 길기도 하고, 인프라 영역에 대해 내가 모르는 부분이 많아 완성하는 데에 시간이 더 길릴 것 같다.</li>
    </ul>
  </li>
</ul>

<h2 id="2024년-01월-11일-목">2024년 01월 11일 (목)</h2>

<ul>
  <li>도메인 주도 개발로 시작하는 마이크로서비스 개발 2장을 공부하면서 마이크로서비스 <code class="language-plaintext highlighter-rouge">MSA</code>에 대한 게시글을 작성중이다.
    <ul>
      <li>마이크로서비스의 흐름을 주도하고 있는 넷플릭스와 쿠버네티스가 대단하다는 생각이 많이 드는 시간이었다.</li>
    </ul>
  </li>
  <li><a href="http://pocj8ur4in.github.io/clean_code1">클린 코드 1장을 읽으면서 정리한 내용을 바탕으로 한 게시글</a>을 작성하였다.
    <ul>
      <li>깨끗한 코드가 무엇인가에 대한 여러 의견들을 보면서 그동안 작성해본 코드에 대해 반추하면서 과연 과연 내가 저자로서의 책임을 갖고 코드를 작성하였는지에 대해 생각해볼 수 있었다.</li>
    </ul>
  </li>
</ul>

<h2 id="2024년-01월-12일-금">2024년 01월 12일 (금)</h2>

<ul>
  <li>
    <p>을지로입구역에 위치한 하나은행 사옥에서 디지털하나路 2기 입학식 행사에 참여하였다. 행사는 교육 커리큘럼이나 출결 관리와 같은 전달 사항들을 안내하는 오리엔테이션 위주로 진행되었고, 디지털하나路에 같이 참여하게 될 직원 분들과 수강생들 또한 처음 만나뵙게 되었다. 이제 다음주부터 본격적인 일정이 시작되는 만큼, 열심히 참여하여 내가 원하는 바를 이뤘으면 한다.</p>
  </li>
  <li>도메인 주도 개발로 시작하는 마이크로서비스 개발 2장을 공부하면서 마이크로서비스 <code class="language-plaintext highlighter-rouge">MSA</code>에 대한 게시글을 작성중이다.
    <ul>
      <li>이제 인프라 영역에 해당되는 부분을 마치고, 내가 다루는 어플리케이션 영역에 대한 내용을 다루고 있다.</li>
      <li>이전에 운영 관리 패턴에 대해 공부하면서 인프라 영역이 다루는 범위가 넓어지면서 어플리케이션 영역이 하는 업무가 줄어든건가? 라는 생각이 들었는데, 그렇지 않다는 것을 깨닫게 되었다.</li>
    </ul>
  </li>
  <li>가상 면접으로 배우는 대규모 시스템 설계 1장을 공부하면서 시스템 설계에 대한 게시글을 작성하고 있다.</li>
</ul>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="TIL" /><summary type="html"><![CDATA[2024년에는 TIL를 작성하자!]]></summary></entry><entry><title type="html">[vocawik] 1. vocawik 프로젝트 소개</title><link href="http://localhost:4000/vocawik1/" rel="alternate" type="text/html" title="[vocawik] 1. vocawik 프로젝트 소개" /><published>2023-12-27T00:00:00+09:00</published><updated>2023-12-29T00:00:00+09:00</updated><id>http://localhost:4000/vocawik1</id><content type="html" xml:base="http://localhost:4000/vocawik1/"><![CDATA[<h2 id="1-들어가며">1. 들어가며</h2>

<p>음성 합성 (<code class="language-plaintext highlighter-rouge">Speech Synthesis</code>)은 인간의 육성 혹은 그와 비슷한 주파수를 합성하여 인공적인 음성을 자동으로 만들 수 있는 기술을 말한다. 인간의 말소리 혹은 이와 유사한 소리를 일정한 단위로 분할해 각 조각에 부호를 붙이는 방식으로 데이터화해 음성 라이브러리 (<code class="language-plaintext highlighter-rouge">Vocal Library</code>)에 저장하면, 음성 합성 엔진 (<code class="language-plaintext highlighter-rouge">Speech Synthesis Engine</code>)이 사용자의 지시에 따라 음성 라이브러리에 필요한 음성 단위를 불러오고 이를 기반으로 하여 인공적인 음성을 합성한다. 음성 합성 기술 문자를 대신 읽어주는 스크린 리더 (<code class="language-plaintext highlighter-rouge">Screen Reader</code>)로서, 1984년 애플 매킨토시 (<code class="language-plaintext highlighter-rouge">Apple Macintosh</code>)에 매킨토크 (<code class="language-plaintext highlighter-rouge">MacInTalk</code>) 기능으로 탑재된 이후 오랜 기간에 걸쳐 다양한 분야에서 활용되고 있다.<br /></p>

<p>2003년 2월 야마하 (<code class="language-plaintext highlighter-rouge">Yamaha</code>)에서 개발된 보컬로이드 (<code class="language-plaintext highlighter-rouge">VOCALOID</code>) 엔진 역시 음성 합성을 기반으로 한 소프트웨어로, 사용자가 프로그램만으로 사람의 노랫소리를 활용한 음원을 작곡하는 것을 목표로 한다. 그러나 기존 음성 합성 기술이 산업적인 용도에 초점을 맞춰져 있던 것과 달리, 보컬로이드를 비롯한 음성 합성 엔진은 음성 데이터에 다이폰 (<code class="language-plaintext highlighter-rouge">Diphone</code>), 음성의 강약, 비브라토, 숨소리 등의 부가적인 정보들을 더한 가수 라이브러리 (<code class="language-plaintext highlighter-rouge">Singer Library</code>)를 제공해 인간의 음성에 흡사한 소리를 생성할 수 있다. 또한 스코어 에디터 (<code class="language-plaintext highlighter-rouge">Score Editor</code>)는 노래의 가사나 음표만이 아닌, 음원의 억양와 높낮이 등을 가변하여 사용자가 자유롭게 음원을 조절할 수 있게끔 한다.<br /></p>

<iframe frameborder="0" allowfullscreen="" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" width="640" height="360" src="https://www.youtube.com/embed/dv_pMzr5Roo"></iframe>
<p><br /></p>

<p>야마하가 보컬로이드를 발표한 이후, 여러 기업들이 음성 제공자 (<code class="language-plaintext highlighter-rouge">Voice Provider</code>)의 목소리를 활용한 가수 라이브러리를 발표하였다. 2007년 8월 31일 크립톤 퓨처 미디어 (<code class="language-plaintext highlighter-rouge">Crypton Future Media</code>)에서 발매한 하츠네 미쿠 (<code class="language-plaintext highlighter-rouge">初音ミク</code>)는 대표적인 음성 합성 이미지 캐릭터로, 현대 일본 캐릭터 문화의 상징 중 하나로 여겨질 만큼 어마어마한 성공을 거두었다. 최근까지도 <code class="language-plaintext highlighter-rouge">Project SEKAI COLORFUL STAGE! feat. 初音ミク</code>, <code class="language-plaintext highlighter-rouge">ポケモン feat. 初音ミク Project VOLTAGE 18 Types/Songs</code>와 같은 관련 컨텐츠나 피규어, 넨도로이드 등 굿즈들이 끊임없이 나오고 있으며, <code class="language-plaintext highlighter-rouge">SONY</code>, <code class="language-plaintext highlighter-rouge">TOYOTA</code> 등 유명 회사들과의 콜라보 역시 지속적으로 이루어지고 있다.</p>

<p>음성 합성 소프트웨어를 활용한 음악 산업의 성공에는 관련 창작물들을 하나의 ‘창작 문화’로 여기면서 자발적으로 생산·유통·소비 활동에 참여하는 팬덤의 영향력이 뒷받침되었다고 본다. 아마추어 작곡가들이 가수나 밴드를 통해 자신이 작곡한 곡을 재상산하는 것은 현실적인 어려움이 존재한다. 그러나 음성 합성 소프트웨어를 통해 손쉽게 자신의 곡에 가수의 음성을 넣는 것이 가능해지면서, 음성 합성 소프트웨어를 활용한 자신의 곡을 투고하는 프로듀서 (<code class="language-plaintext highlighter-rouge">Producer</code>)들이 등장하였다. 그리고 유튜브 (<code class="language-plaintext highlighter-rouge">Youtube</code>), 니코니코 동화 (<code class="language-plaintext highlighter-rouge">ニコニコ動画</code>)와 같이 사용자가 동영상을 자유롭게 올리거나 시청할 수 있는 비디오 플랫폼을 통해 생산자와 소비자가 시공간의 제약을 넘어 자유롭게 교류할 수 있는 환경 또한 조성되었다. 거기에 더해 소비자가 단순히 컨텐츠를 즐기는 것을 넘어, 직접 프로듀서로 활동하거나 일러스트, <code class="language-plaintext highlighter-rouge">MMD</code>와 같은 2차 창작물을 생산하는 활동을 하면서 문화적 파급력을 갖게 되었다고 볼 수 있다.<br /></p>

<iframe frameborder="0" allowfullscreen="" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" width="100%" height="480" src="https://piapro.net/miku10th/"></iframe>
<p><br /></p>

<p>국내에서도 이런 음성 합성 소프트웨어를 활용한 음악 산업의 성공과 파급력에 주목하여, 한국어를 지원하는 보컬로이드 가수 라이브러리인 시유 (<code class="language-plaintext highlighter-rouge">SeeU</code>)나 유니 (<code class="language-plaintext highlighter-rouge">UNI</code>)가 출시되었고, 크리크루 (<code class="language-plaintext highlighter-rouge">CreCrew</code>)나 보카로 가사 위키 등 음성 합성 소프트웨어 관련 웹 사이트 또한 개설된 바가 있다. 그러나 음성 합성 소프트웨어가 일본이나 전세계에 미친 영향력에 비하면 국내에서의 파급력은 매우 제한적이었으며, 특히 관련 웹 사이트의 경우에는 운영되었던 사이트들이 폐쇄되면서 이용자들에게 불편함을 겪거나 수년간 축적된 데이터가 소실되는 경우가 발생하곤 하였다. 그래서 이번에는 <b>음성 합성 소프트웨어를 주제로 한 지속 가능한 웹 사이트의 구현</b>을 목표로 하여 웹 사이트를 기획하고자 한다.</p>

<h2 id="2-vocawik-프로젝트-기획">2. <code class="language-plaintext highlighter-rouge">vocawik</code> 프로젝트 기획</h2>

<h3 id="1-도메인-정의">(1) 도메인 정의</h3>
<ul>
  <li>서버에서 제공할 기능들을 정리해, 도메인별로 명확하게 제공할 기능과 책임을 분리해야 함
    <ul>
      <li>도메인 (<code class="language-plaintext highlighter-rouge">Domain</code>) : 소프트웨어로 해결하고자 하는 문제 영역 (한 도메인은 여러 하위 도메인으로 나눌 수 있음)</li>
    </ul>
  </li>
</ul>

<h3 id="2-언어-및-프레임워크-도입">(2) 언어 및 프레임워크 도입</h3>
<ul>
  <li>더 나은 품질, 더 빠른 개발 속도, 개발자들이 높은 이해도와 숙련도를 갖춰 높은 생산성을 가져올 도구들을 도입해야 함
    <ul>
      <li>언어 : 보다 높은 유지보수성 (동적 프로그래밍 언어 vs 정적 프로그래밍 언어?)</li>
      <li>프레임워크 : 보다 높은 비즈니스 집중도 (비즈니스 문제들에 필요한 환경과 기술들이 풍부한 개발 생태계!)</li>
    </ul>
  </li>
</ul>

<h3 id="3-코드-패키지-관리">(3) 코드 패키지 관리</h3>
<ul>
  <li>패키지 내 공통된 규칙을 통해 일관성 있는 코드를 작성해야 함</li>
  <li>화면만을 위해 동작하는, 혹은 중복된 코드에 대한 리펙터링이 가능한 환경을 구축해야 함</li>
</ul>

<blockquote>
  <p>참고문헌</p>

  <ol>
    <li>논문
      <ul>
        <li>김도희. (2018). 보컬로이드 가상캐릭터의 특성 분석 연구. 일러스트레이션 포럼.</li>
        <li>임현정. (2012). 보컬로이드 2차 창작의 변형구조 연구. 이화여자대학교 대학원 석사학위논문.</li>
      </ul>
    </li>
    <li>기사
      <ul>
        <li><a href="https://www.newslight.kr/news/655301">안태춘, ‘한국 보컬로이드는 어떻게 나아가야할까?’</a></li>
      </ul>
    </li>
    <li>도서
      <ul>
        <li>남경호, 사례로 배우는 언어 전환 프로젝트 관리</li>
      </ul>
    </li>
  </ol>
</blockquote>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="vocawik" /><summary type="html"><![CDATA[1. 들어가며]]></summary></entry><entry><title type="html">[MicroService] 2. MSA</title><link href="http://localhost:4000/microservice2/" rel="alternate" type="text/html" title="[MicroService] 2. MSA" /><published>2023-12-14T00:00:00+09:00</published><updated>2023-12-14T00:00:00+09:00</updated><id>http://localhost:4000/microservice2</id><content type="html" xml:base="http://localhost:4000/microservice2/"><![CDATA[<h2 id="마이크로서비스-아키텍처-msa--마이크로서비스를-접목한-아키텍처-구조">마이크로서비스 아키텍처 (<code class="language-plaintext highlighter-rouge">MSA</code>) : 마이크로서비스를 접목한 아키텍처 구조</h2>

<ul>
  <li>클라우드 인프라와 접목해 아마존, 넷플릭스에 의해 구체화 → 비즈니스 성공 사례</li>
  <li>각 서비스는 개별 프로세스에서 실행되며, <code class="language-plaintext highlighter-rouge">HTTP API</code>를 통해 통신</li>
  <li>각 서비스는 비즈니스 기능 단위로 구성되고, 자동화된 배포 방식을 이용해 독립적으로 배포</li>
</ul>

<blockquote>
  <p>마이크로서비스 아키텍처 (<code class="language-plaintext highlighter-rouge">MSA</code>)와 서비스 지향 아키텍처 (<code class="language-plaintext highlighter-rouge">SOA</code>)의 비교</p>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">SOA</code> : 컴포넌트를 모아 비즈니스적으로 의미있고 완결적인 서비스 단위로 모듈화
      <ul>
        <li><code class="language-plaintext highlighter-rouge">SOA</code>와 <code class="language-plaintext highlighter-rouge">MSA</code>의 공통점 : 비즈니스 서비스의 집합으로 시스템을 개발</li>
        <li><code class="language-plaintext highlighter-rouge">SOA</code>와 <code class="language-plaintext highlighter-rouge">MSA</code>의 차이점 : 이론적인 <code class="language-plaintext highlighter-rouge">SOA</code>와 달리, <code class="language-plaintext highlighter-rouge">MSA</code>는 클라우드 인프라와 접목해 구체화</li>
      </ul>
    </li>
  </ul>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">MSA</code> 내부 아키텍처 : <code class="language-plaintext highlighter-rouge">API</code>, 비즈니스 로직, 이벤트 발행, 데이터 처리의 구조화 등 <code class="language-plaintext highlighter-rouge">MSA</code> 내부 구조를 정의한 것</li>
  <li><code class="language-plaintext highlighter-rouge">MSA</code> 외부 아키텍처 : 인프라, 플랫폼, 어플리케이션 영역에 있는 구성 요소 및 그것들의 관계를 정의하는 것</li>
</ul>

<h3 id="리액티브-선언-the-reactive-manifesto--어플리케이션이-요청에-즉각-응답하고-가동되길-기대">리액티브 선언 (<code class="language-plaintext highlighter-rouge">The Reactive Manifesto</code>) : 어플리케이션이 요청에 즉각 응답하고 가동되길 기대</h3>
<ul>
  <li>응답성 (<code class="language-plaintext highlighter-rouge">Responsive</code>) : 사용자에게 신뢰성 있는 응답을 빠르고 적절히 제공하는 능력</li>
  <li>탄력성 (<code class="language-plaintext highlighter-rouge">Resilient</code>) : 장애가 발생하더라도 시스템 전체에 영향을 주지 않고 복구하는 능력</li>
  <li>유연성 (<code class="language-plaintext highlighter-rouge">Elastic</code>) : 사용량에 변화가 있더라도 그에 비례해 자원을 조절해 균일한 응답성을 제공하는 능력</li>
  <li>메시지 기반 (<code class="language-plaintext highlighter-rouge">Message Driven</code>) : 비동기 메시지로 위치 투명성, 느슨한 결합, 논블로킹 통신을 지향</li>
</ul>

<p>→ 4가지 요건을 만족하는 시스템을, 급변하는 상황을 적응할 수 있는 리엑티브 시스템 (<code class="language-plaintext highlighter-rouge">Reactive System</code>)이라 정의</p>

<h3 id="강결합에서-약결합의-아키텍처로의-변화">강결합에서 약결합의 아키텍처로의 변화</h3>
<ul>
  <li>소프트웨어 아키텍처 : 소프트웨어를 구성하는 요소와 그 구성 요소 간의 관계를 정의한 것
    <ul>
      <li>아키텍처를 정의하는 과정 : 시스템 구축을 위한 여러 비기능 요건들을 만족하는 해결 방법을 찾는 과정
        <ul>
          <li>비기능 요건 : 시스템 성능, 시스템 가용성, 보안, 유지보수성, 확장성 등</li>
        </ul>
      </li>
      <li>마이크로서비스 아키텍처는 ‘클라우드’라는 가상화된 인프라를 활용한 것이므로, 이를 고려해 설계해야 함</li>
    </ul>
  </li>
  <li>아키텍처 유연성 (<code class="language-plaintext highlighter-rouge">Architecture Flexibility</code>) : 시스템 자체가 변화 및 확장에 언제든지 대응할 수 있는 능력
    <ul>
      <li>시스템을 구성하는 구성 요소 간의 관계들이 느슨하게 결합되어 언제든지 대체되거나 확장될 수 있음</li>
      <li>리액티브 시스템이 리액티브하기 위해서 반드시 갖춰야 할 특성 중 하나</li>
      <li>클라우드 인프라 자체가 유연성과 확장성을 갖추므로, 어플리케이션 아키텍처 또한 아키텍처 유연성이 필요</li>
    </ul>
  </li>
</ul>

<iframe width="90%" height="350" style="border:none" src="https://landscape.cncf.io/?category=automation-configuration&amp;grouping=category&amp;fullscreen=yes"></iframe>

<ul>
  <li>과거 : 아키텍처 구성 요소들이 특정 벤더의 제품에 전적으로 의존
    <ul>
      <li>유명한 제품군을 사용함으로 품질이 보장될 수 있음</li>
      <li>특정 기술에 락인 (<code class="language-plaintext highlighter-rouge">lock-in</code>)되어 시스템을 쉽게 변경하거나 확장하기 어려움</li>
    </ul>
  </li>
  <li>현재 : 클라우드 환경 아래에서 사용하는 오픈 소스 기반 제품들이 충분한 기능, 품질, 호환성을 제공
    <ul>
      <li>아키텍처 설계가 필요한 레이어에서 적절한 솔루션을 선택하고 이를 조합하는 개방적 방식으로 변화</li>
      <li>클라우드 기반 어플리케이션의 구축에 필요한 인프라 및 어플리케이션 영역에 다양한 제품들이 등장</li>
    </ul>
  </li>
</ul>

<h2 id="msa-패턴--msa의-문제-영역에-대해-여러-사람들에-의해-검증되어-정리된-스타일-혹은-패턴"><code class="language-plaintext highlighter-rouge">MSA</code> 패턴 : <code class="language-plaintext highlighter-rouge">MSA</code>의 문제 영역에 대해 여러 사람들에 의해 검증되어 정리된 스타일 혹은 패턴</h2>
<ul>
  <li>인프라 구성 요소 : 마이크로서비스를 지탱하는 인프라스트럭처를 구축하는 데에 필요한 구성 요소</li>
  <li>플랫폼 패턴 : 인프라 위에서 마이크로서비스의 운영과 관리를 지원하는 플랫폼 차원의 패턴</li>
  <li>어플리케이션 패턴 : 마이크로서비스 어플리케이션을 구성하는 데에 필요한 패턴</li>
</ul>

<h3 id="인프라-구성-요소를-서비스-유형별로-나누어-해당되는-제품-중-하나를-의사결정--클라우드-인프라">인프라 구성 요소를 서비스 유형별로 나누어 해당되는 제품 중 하나를 의사결정 → 클라우드 인프라</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">IaaS</code> (<code class="language-plaintext highlighter-rouge">Infrastructure as a Service</code>) : 가상 머신, 스트리지, 네트워크 등 인프라 제공
    <ul>
      <li>고객이 관리할 수 있는 범위가 가장 넓은 클라우드 컴퓨팅 서비스</li>
      <li><code class="language-plaintext highlighter-rouge">AWS</code> 등 퍼플릭 클라우드 공급 업체 (<code class="language-plaintext highlighter-rouge">CSP</code>)가 준비한 환경을 고객이 선택할 수 있음</li>
      <li>가상화된 물리적 자원을 <code class="language-plaintext highlighter-rouge">UI</code> 형태의 대시보드 혹은 <code class="language-plaintext highlighter-rouge">API</code> 형태로 제공</li>
      <li>고객은 서버와 스트리지에 접근할 수 있지만, 클라우드 내 가상 데이터 센터를 통해 리소스를 전달받는 형태</li>
      <li>개발자는 운영체제와 어플리케이션을 직접 관리해야 함 : 개발자와 인프라 관리자의 역할이 분담</li>
      <li>예시 : <code class="language-plaintext highlighter-rouge">AWS EC2</code>, <code class="language-plaintext highlighter-rouge">AWS S3</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">CaaS</code> (<code class="language-plaintext highlighter-rouge">Container as a Service</code>) : 업로드, 구성, 실행, 확장, 중지할 수 있는 컨테이너 제공
    <ul>
      <li>가상 머신이 아닌 컨테이너를 기본 리소스로 활용해 어플리케이션을 개발, 실행, 관리</li>
      <li>컨테이너화된 어플리케이션을 빌드하고 배포하는 개발 환경은 퍼플릭 클라우드 공급 업체 (<code class="language-plaintext highlighter-rouge">CSP</code>)가 제공</li>
      <li>예시 : <code class="language-plaintext highlighter-rouge">Kubernetes Service</code>, <code class="language-plaintext highlighter-rouge">AWS ECS</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">PaaS</code> (<code class="language-plaintext highlighter-rouge">Platform as a Service</code>) : 어플리케이션에 미들웨어, 런타임까지 탑재한 플랫폼을 제공
    <ul>
      <li>가상화된 클라우드 위에 원하는 서비스를 개발할 수 있도록 개발 환경을 미리 구축해 서비스 형태로 제공</li>
      <li>고객은 개발 환경을 고려할 필요 없이 어플리케이션 자체에 집중할 수 있음</li>
      <li>어플리케이션이 플랫폼에 종속되어 개발되므로, 다른 플랫폼으로의 이식이 어려울 수도 있음</li>
      <li>예시 : <code class="language-plaintext highlighter-rouge">Lambda</code>, <code class="language-plaintext highlighter-rouge">AWS Elastic Beanstalk</code></li>
    </ul>
  </li>
</ul>

<h3 id="시스템의-기반이-되는-인프라-레이어의-구축--베어메탈-장비-혹은-가상-인프라-환경을-통한-구축">시스템의 기반이 되는 인프라 레이어의 구축 → 베어메탈 장비 혹은 가상 인프라 환경을 통한 구축</h3>
<ul>
  <li>가상 인프라 환경 : 하이퍼바이저 (<code class="language-plaintext highlighter-rouge">Hypervisor</code>)의 사용 여부 및 게스트 OS 유무에 따라 나뉨
    <ul>
      <li>가상 머신 (<code class="language-plaintext highlighter-rouge">Virtual Machine</code>) : 하이퍼바이저를 통해 하나의 시스템에서 여러 운영체제를 사용
        <ul>
          <li>운영체제 패치 및 관련 라이브러리 설치로 인한 오버헤드가 지속적으로 발생</li>
        </ul>
      </li>
      <li>컨테이너 (<code class="language-plaintext highlighter-rouge">Container</code>) : 컨테이너 엔진을 사용해 가상의 격리된 공간을 생성
        <ul>
          <li>도커 (<code class="language-plaintext highlighter-rouge">Docker</code>) : 필요 라이브러리나 실행 파일을 여러 레이어 이미지로 제어
            <ul>
              <li>이식성 : 도커만 실행할 수 있으면 호스트 커널에 상관없이 동일하게 사용</li>
              <li>신속성 : 크기가 작고 가벼워 빠른 배포가 가능 + 문제 발생 시 다시 가동하면 됨</li>
              <li>재사용성 : 동일한 환경을 재사용해 쉽게 설정 가능 → 서버 환경 구축이 쉬워짐</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>컨테이너 오케스트레이션 (<code class="language-plaintext highlighter-rouge">Container Orchestration</code>) : 컨테이너 관리 기술
        <ul>
          <li>컨테이너 배치 및 복제, 확장 및 축소, 장애 복구 컨테이너 간 통신, 로드밸런싱 등</li>
          <li>쿠버네티스 (<code class="language-plaintext highlighter-rouge">Kubernetes</code>) : <code class="language-plaintext highlighter-rouge">Pod</code>, <code class="language-plaintext highlighter-rouge">Deployment</code>, <code class="language-plaintext highlighter-rouge">Replica Sets</code> 정보 확인 가능
            <ul>
              <li>각 컨테이너가 요구하는 자원을 쿠버네티스에 요청하면 노드에 맞춰 자동 배치</li>
              <li>컨테이너 이상을 점검해, 실패하면 컨테이너를 자동으로 교체하고 리스케줄링</li>
              <li>일정량의 <code class="language-plaintext highlighter-rouge">CPU</code> 및 메모리 사용량을 초과하면 자동으로 수평 확장</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="마이크로서비스의-운영과-관리를-지원할-클라우드-플랫폼-미들웨어의-구축--플랫폼-패턴">마이크로서비스의 운영과 관리를 지원할 클라우드 플랫폼 (미들웨어)의 구축 → 플랫폼 패턴</h3>
<ul>
  <li>데비옵스 (<code class="language-plaintext highlighter-rouge">DevOps</code>) : 개발과 운영이 분리되지 않은 개발 및 운영을 병행할 수 있는 조직 또는 문화
    <ul>
      <li>소프트웨어를 빠르게 개발하게끔 지원하는 빌드, 테스트, 배포를 위한 자동화 환경</li>
      <li>지속적 제공 (<code class="language-plaintext highlighter-rouge">CI</code>) : 빌드된 소스 코드의 실행 파일을 실행 환경에 반영하기 전에 진행</li>
      <li>지속적 배포 (<code class="language-plaintext highlighter-rouge">CD</code>) : 저장소에 빌드한 소스 코드의 실행 파일을 실행 환경까지 자동으로 배포</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>자동 빌드 및 배포 절차</p>
  <ol>
    <li>매일 자신이 작성한 소스 코드와 이를 테스트할 테스트 코드를 형상관리 시스템에 보낸다. (<code class="language-plaintext highlighter-rouge">Push</code>)</li>
    <li>매일 빌드 도구에서 형상관리 서버의 코드를 가져와 (<code class="language-plaintext highlighter-rouge">Pull</code>) 통합하고, 자동으로 빌드하고 테스트를 수행한다.</li>
    <li>테스트 수행 결과를 리포트에 기록하고, 빌드된 소스 코드를 스테이징 환경에 자동으로 배포한다.</li>
    <li>테스터가 스테이징 환경에서 테스트를 수행할 때 혹은 리포트 결과에 문제가 있으면, 소스 코드를 수정한다.</li>
  </ol>
</blockquote>

<ul>
  <li>빌드·배포 파이프라인의 설계 : 빌드·배포 과정동안 수행해야 할 업무 (<code class="language-plaintext highlighter-rouge">task</code>)를 정의한 것
    <ul>
      <li>리포지토리에서 소스 코드를 가져와 빌드해 실행 파일을 만드는 작업</li>
      <li>이전 작업이 성공하면, 다음 작업이 자동으로 수행히게끔 위의 작업들을 관리하는 작업</li>
      <li>실행할 어플리케이션을 실행 환경에 배포하는 작업</li>
    </ul>

    <p>→ <code class="language-plaintext highlighter-rouge">Infrastructure as Code</code>를 통해 빌드·배포 파이프라인의 절차를 완벽하게 자동화할 수 있음</p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Infrastructure as Code</code> : 인프라 구성을 프로그래밍하는 것처럼 처리해 많은 컨테이너 배포 처리를 함
    <ul>
      <li>형상관리 리포지토리에서 소스 코드를 가져와 빌드하여 실행 파일을 만드는 작업</li>
      <li>실행 파일을 실행 환경에서 배포하는 작업</li>
      <li>작업들을 통제하고 연결해서 모든 작업이 성공하면 다음 작업이 자동으로 수행되도록 연계하는 작업</li>
    </ul>
  </li>
</ul>

<h3 id="마이크로서비스가-실제-구동되는-환경에서-동작될-수-있도록-운영-관리-요소--운영-관리-패턴">마이크로서비스가 실제 구동되는 환경에서 동작될 수 있도록 운영 관리 요소 → 운영 관리 패턴</h3>
<ul>
  <li>마이크로서비스의 발전 과정에서 아키텍처의 문제 영역들이 지속적으로 논의되었고, 이에 따른 해결책을 모색해옴
    <ul>
      <li>1999년 <code class="language-plaintext highlighter-rouge">XP</code> 방법론, 2001년 에자일 선언을 통해 빠른 실패와 피드백을 기반하는 실용적인 실천법 적용</li>
      <li>2010년 넷플릭스가 <code class="language-plaintext highlighter-rouge">AWS EC2</code>로 인프라를 전환하면서 발생한 문제점들을 해결하기 위한 넷플릭스 <code class="language-plaintext highlighter-rouge">OSS</code> 개발
        <ul>
          <li>여러 마이크로서비스 간의 라우팅을 위한 줄 (<code class="language-plaintext highlighter-rouge">Zuul</code>)</li>
          <li>적절한 부하 분산을 하는 로드밸런싱을 위한 리본 (<code class="language-plaintext highlighter-rouge">Ribbon</code>)</li>
          <li>모니터링을 위한 히스트릭스 (<code class="language-plaintext highlighter-rouge">Hystrix</code>)</li>
          <li>서비스 등록을 위한 유레카 (<code class="language-plaintext highlighter-rouge">Eureka</code>)</li>
        </ul>
      </li>
      <li>2013년 마이크로서비스를 쉽게 개발할 수 있는 스프링부트 (<code class="language-plaintext highlighter-rouge">SpringBoot</code>) 프레임워크가 발표</li>
      <li>2013년 도커, 2014년 쿠버네티스와 같은 컨테이너 기반 기술들이 개발</li>
    </ul>

    <p>→ 클라우드 환경, 넷플릭스 <code class="language-plaintext highlighter-rouge">OSS</code>, 프레임워크, 컨테이너 기반 기술이 아울러져 마이크로서비스 생태계를 계속 발전시킴</p>
  </li>
  <li>스프링 클라우드 : 스프링부트 + 넷플릭스 <code class="language-plaintext highlighter-rouge">OSS</code>
    <ul>
      <li>스프링 진영에서 기존 스프링 프레임워크에 넷플릭스 <code class="language-plaintext highlighter-rouge">OSS</code>들이 더 잘 돌아갈 수 있도록 통합하여 발표</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>마이크로서비스 서비스와 스프링 클라우드 서비스의 연계 흐름</p>
  <ol>
    <li>스프링 클라우드를 포함한 모든 마이크로서비스가 인프라에 종속되지 않도록 <code class="language-plaintext highlighter-rouge">DB</code>, 파일 등에 저장된 설정 정보를 형상관리 시스템에 연계된 <code class="language-plaintext highlighter-rouge">Config</code> 서비스에서 가져와 주입한 후 클라우드 인프라의 개별 인스턴스로 로딩</li>
    <li>로딩과 동시에 ‘서비스 레지스트리’에 자신의 서비스 이름과 클라우드 인프라로부터 할당받은 물리 주소를 매핑</li>
    <li>클라이언트가 ‘<code class="language-plaintext highlighter-rouge">API</code> 게이트웨이’를 통해 마이크로서비스에 접근하면, …
      <ul>
        <li><code class="language-plaintext highlighter-rouge">API</code> 게이트웨이는 적절한 라우팅 및 부하 관리를 위한 로드밸런싱을 수행</li>
        <li><code class="language-plaintext highlighter-rouge">API</code> 게이트웨이’는 클라이언트가 마이크로서비스에 접근하기 위한 주소를 알기 위해 ‘서비스 레지스트리’ 검색을 통해 서비스의 위치를 가져옴</li>
        <li>’<code class="language-plaintext highlighter-rouge">API</code> 게이트웨이’는 클라이언트가 각 서비스에 접근할 수 있는 권한이 있는지 확인하기 위해 ‘권한 서비스’와 연계해 인증 및 인가 처리를 수행</li>
      </ul>
    </li>
    <li>모든 마이크로서비스 간의 호출 흐름은 ‘모니터링 서비스’와 ‘추적 서비스’에 의해 모니터링되고 추적됨</li>
  </ol>
</blockquote>

<h4 id="다양한-서비스의-등록-및-탐색--서비스-레지스트리-서비스-디스커버리-패턴">다양한 서비스의 등록 및 탐색 → 서비스 레지스트리, 서비스 디스커버리 패턴</h4>

<ul>
  <li>예시 : 넷플릭스 <code class="language-plaintext highlighter-rouge">OSS</code> 유레카 (<code class="language-plaintext highlighter-rouge">Eureka</code>), 스프링 유레카 (<code class="language-plaintext highlighter-rouge">Spring Eureka</code>), 쿠버네티스 <code class="language-plaintext highlighter-rouge">DNS</code> 및 서비스</li>
</ul>

<blockquote>
  <ul>
    <li>프런트엔드 클라이언트가 여러 백엔드 마이크로서비스를 어떻게 호출해야 할까?</li>
    <li>
      <p>스케일 아웃을 통해 인스턴스가 여러 개로 복제되었을 때 어떻게 부하를 적절히 분산할 수 있을까?</p>

      <p>→ 최적 경로를 찾아주는 라우팅 기능과 적절한 부하 분산을 위한 로드밸런싱 기능이 제공되어야 한다!</p>
    </li>
    <li>라우터가 최적 경로를 탐색하려면 서비스 이름에 해당하는 <code class="language-plaintext highlighter-rouge">IP</code> 주소를 알아야 함
      <ul>
        <li>그런데 이러한 라우팅 정보를 클라이언트가 가진다면, 클라우드 환경에서 동적으로 변경되는 백엔드의 유동 <code class="language-plaintext highlighter-rouge">IP</code> 정보를 매번 전송받아 변경해야 함 → 제3의 공간이 필요</li>
      </ul>

      <p>→ 마이크로서비스의 이름과 유동적인 백엔드의 유동 <code class="language-plaintext highlighter-rouge">IP</code> 정보를 보관할 저장소를 제공하자!</p>
    </li>
  </ul>
</blockquote>

<ul>
  <li>각 서비스 인스턴스가 로딩될 때 자신의 서비스 이름과 할당된 <code class="language-plaintext highlighter-rouge">IP</code> 주소를 레지스트리에 등록</li>
  <li>클라이언트가 해당 서비스 이름을 호출할 때, 라우터가 레지스트리 서비스를 검색해 매핑된 <code class="language-plaintext highlighter-rouge">IP</code> 주소를 호출</li>
  <li>즉, 레지스트리는 모든 마이크로서비스의 인스턴스의 주소를 알고 있는 서비스 매핑 저장소</li>
  <li>모든 마이크로서비스가 처음 가동될 때 자신의 위치 정보를 레지스트리에 저장하고, 서비스가 종료될 때 삭제</li>
  <li>레지스트리는 <code class="language-plaintext highlighter-rouge">Config</code>, 모니터링, 추적과 같이 관리와 운영을 위한 기반 서비스의 주소 또한 함께 보관</li>
</ul>

<h4 id="서비스-단일-진입--api-게이트웨이-패턴">서비스 단일 진입 → <code class="language-plaintext highlighter-rouge">API</code> 게이트웨이 패턴</h4>

<ul>
  <li>예시 : 스프링 클라우드 <code class="language-plaintext highlighter-rouge">Spring API Gateway</code>, 쿠버네티스 인그레스 리소스 (<code class="language-plaintext highlighter-rouge">Ingress Resources</code>) 및 서비스</li>
</ul>

<blockquote>
  <ul>
    <li>
      <p>여러 클라이언트가 여러 개의 서버 서비스를 각각 호출하면 호출 관계가 매우 복잡해짐</p>

      <p>→ 이러한 복잡한 호출 관계를 통제할 수 있는 방법이 필요하다!</p>
    </li>
  </ul>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">API</code> 게이트웨이 (<code class="language-plaintext highlighter-rouge">Gateway</code>) : 다양한 클라이언트가 다양한 서비스에 접근하기 위한 단일 진입점
    <ul>
      <li><code class="language-plaintext highlighter-rouge">L4</code> 하드웨어 장비나 소프트웨어로 구현된 서비스 흐름 제어를 위한 서비스 라우팅 기능을 수행
        <ul>
          <li>다른 유형의 클라이언트에게 서로 다른 <code class="language-plaintext highlighter-rouge">API</code> 조합을 제공할 수 있음</li>
          <li>각 서비스에 접근할 때 필요한 인증 및 인가 기능을 한번에 처리할 수 있음</li>
          <li>서비스에 문제가 발생해 요청에 대한 응답 지연이 발생할 때 다른 서비스로 요청 경로를 변경할 수 있음</li>
        </ul>
      </li>
      <li>레지스트리 서비스와 연계하여 여러 인스턴스로 부하를 분산하는 동적 라우팅이나 로드밸런싱이 가능</li>
      <li>권한 서비스와 연계하여 인증 및 인가 처리를 수행할 수 있음</li>
      <li>로그 집계 서비스와 연계하여 요청 및 응답 데이터 등에 대한 로깅이 가능</li>
      <li>에러율, 평균/최고 지연 시간, 호출 빈도와 같이 시간에 따른 환경 변화를 추적할 수 있는 메트릭 (<code class="language-plaintext highlighter-rouge">Metric</code>) 데이터를 시계열 형태로 저장할 수 있음</li>
      <li>트래킹 <code class="language-plaintext highlighter-rouge">ID</code> 추적과 같이 트레이싱 서비스와 연계하여 서비스 추적이 가능</li>
      <li>모니터링 서비스와 연계해 장애 격리가 가능 → 서킷 브레이커 패턴</li>
    </ul>
  </li>
</ul>

<h4 id="다양한-클라이언트에-대한-특화된-처리--bff-패턴">다양한 클라이언트에 대한 특화된 처리 → <code class="language-plaintext highlighter-rouge">BFF</code> 패턴</h4>

<ul>
  <li>진입점을 하나로 두는 <code class="language-plaintext highlighter-rouge">API</code> 게이트웨이와 달리, 프런트엔드의 유형에 따라 각각의 진입점을 둠</li>
  <li>프런트엔드를 위한 백엔드라는 의미에서 <code class="language-plaintext highlighter-rouge">Backend for Frontend</code></li>
  <li>각 프런트엔드에 대한 처리만 수행하는 <code class="language-plaintext highlighter-rouge">BFF</code> 이후에 통합 <code class="language-plaintext highlighter-rouge">API</code> 게이트웨이를 두어, 공통 처리를 통제할 수도 있음</li>
</ul>

<h4 id="마이크로서비스-어플리케이션-구성-정보의-관리--외부-구성-저장소-패턴">마이크로서비스 어플리케이션 구성 정보의 관리 → 외부 구성 저장소 패턴</h4>

<ul>
  <li>예시 : 스프링 클라우드 <code class="language-plaintext highlighter-rouge">Spring Cloud Config</code>, 쿠버네티스 컨피그맵 (<code class="language-plaintext highlighter-rouge">ConfigMap</code>)</li>
</ul>

<blockquote>
  <ul>
    <li>클라우드 인프라를 사용할 때, 어플리케이션이 마이크로서비스가 사용하는 자원의 설정 정보를 포함하면?
      <ul>
        <li>자원의 설정 정보이 변경될 때 어플리케이션이 반드시 재배포해야 하므로 서비스가 중단되어야 함</li>
        <li>여러 마이크로서비스가 동일한 구성 정보를 사용한다면 이를 일일이 변경하기가 어려움</li>
        <li>여러 마이크로서비스를 변경하는 시점에 일부 마이크로서비스의 구성 정보가 불일치할 수도 있음</li>
      </ul>

      <p>→ 마이크로서비스가 사용하는 자원의 설정 정보를 쉽고 일관되게 변경 가능하도록 관리해야 한다!</p>
    </li>
  </ul>
</blockquote>

<ul>
  <li>외부 저장소 : <code class="language-plaintext highlighter-rouge">DB</code> 연결 정보, 파일 스토리지 정보와 같이 각 마이크로서비스의 외부 환경 설정 정보를 공동으로 관리</li>
  <li><code class="language-plaintext highlighter-rouge">Config</code> 원칙 : <code class="language-plaintext highlighter-rouge">Staging</code>, <code class="language-plaintext highlighter-rouge">Dev</code>, <code class="language-plaintext highlighter-rouge">Test</code>처럼 어플리케이션 배포 환경은 매번 달라지니, 코드와 설정 정보는 분리돼야
    <ul>
      <li>클라우드에서 운영되는 어플리케이션은 특정한 배포 환경에 종속된 정보를 코드에 두면 안됨
        <ul>
          <li>배포 시 변경될 호스트명, 백엔드 서비스의 연결을 위한 리소스 정보, 서버의 <code class="language-plaintext highlighter-rouge">IP</code> 주소나 포트 정보 등</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="사용자의-신원을-증명하고-접근-권한을-부여--인증-및-인가-패턴">사용자의 신원을 증명하고, 접근 권한을 부여 → 인증 및 인가 패턴</h4>

<blockquote>
  <ul>
    <li>
      <p>여러 마이크로서비스에 대한 인증 및 인가에 대한 접근 제어는 어떻게 구현해야 할까?</p>

      <p>→ 각 서비스가 모두 인증 및 인가를 중복으로 구현하는 것은… 당연히 비효율적!</p>
    </li>
  </ul>
</blockquote>

<ul>
  <li>중앙 집중식 세션 관리
    <ul>
      <li>마이크로서비스는 사용량에 따라 수시로 수평 확장되어 로드밸런싱이 되기 때문에 세션 데이터가 손상될 수 있음</li>
      <li>각자의 서비스에 세션을 저장하지 않고 공유 저장소에 세션을 저장해 모든 서비스가 같은 사용자 데이터를 얻게 함</li>
      <li>레디스 (<code class="language-plaintext highlighter-rouge">Redis</code>) 등을 세션 저장소로 사용</li>
    </ul>
  </li>
  <li>클라이언트 토큰
    <ul>
      <li>중앙 서버에 저장되는 세션과 달리, 토큰은 사용자의 브라우저에 저장</li>
      <li>사용자의 신원 정보를 가진 토큰은 서버로 요청을 보낼 때 전송되기 때문에 서버에서 인가 처리를 할 수 있음</li>
      <li><code class="language-plaintext highlighter-rouge">JWT</code> : 토큰 형식을 정의하고 암호화되는 공개 표준 (<code class="language-plaintext highlighter-rouge">RFC 7519</code>)</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>클라이언트 토큰을 통한 사용자 인증의 흐름</p>

  <ol>
    <li>브라우저가 사버에 사용자 이름과 패스워드로 인증을 요청한다.</li>
    <li>서버는 인증 후에 사용자 정보의 인증 및 인가 정보를 포함하여 토큰을 생성하고 브라우저에 전송한다.</li>
    <li>브라우저는 서버 자원을 요청할 때 토큰을 함께 보내고, 서버는 토큰 정보를 확인한 후 자원 접근을 허가한다.</li>
  </ol>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">API</code> 게이트웨이를 사용한 클라이언트 토큰
    <ul>
      <li><code class="language-plaintext highlighter-rouge">API</code> 게이트웨이가 외부 요청의 입구로 추가되어 인증 프로세스를 진행</li>
      <li>인증 및 인가를 위한 별도의 전담 서비스가 <code class="language-plaintext highlighter-rouge">API</code> 게이트웨이와 연동하여 다른 서비스의 인증 및 인가 처리를 위임
→ 인증 서비스 (<code class="language-plaintext highlighter-rouge">Auth Service</code>)</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">API</code> 게이트웨이와 인증 서비스를 활용한 클라이언트 토큰을 통한 사용자 인증의 흐름</p>

  <ol>
    <li>클라이언트가 리소스 서비스에 접근을 요청하면, <code class="language-plaintext highlighter-rouge">API</code> 게이트웨이는 인증 서비스에 전달한다.</li>
    <li>인증 서비스는 해당 요청이 인증된 사용자가 보낸 것인지 확인하고 (→ 인증),</li>
    <li>인증 서비스는 해당 요청이 해당 리소스에 대한 접근 권한이 있는지 확인하고 (→ 인가),</li>
    <li>모두 확인하고 나면 리소스에 접근 가능한 증명서인 액세스 토큰 (<code class="language-plaintext highlighter-rouge">Access Token</code>)을 발급한다.</li>
    <li>클라이언트는 다시 액세스 토큰을 활용해 접근을 요청한다.</li>
    <li>각 리소스 서비스는 이러한 요청이 액세스 토큰을 포함하고 있는지 판단하여 리소스에 대한 접근을 허용한다.</li>
  </ol>
</blockquote>

<h4 id="장애-및-실패-처리--서킷-브레이커-패턴">장애 및 실패 처리 → 서킷 브레이커 패턴</h4>

<blockquote>
  <ul>
    <li>여러 서비스로 구성된 시스템에서 한 서비스에 장애가 생기면, 다른 서비스가 영향을 받을텐데…?
      <ul>
        <li>전체 시스템은 정상적인데, 특정 기능을 누르면 한참 대기하는 경우 → 장애가 다른 서비스로 전이되었다!</li>
      </ul>

      <p>→ 장애가 발생한 서비스를 격리해서 유연하게 처리하자!</p>
    </li>
  </ul>
</blockquote>

<ul>
  <li>서킷 브레이켜 (<code class="language-plaintext highlighter-rouge">Circuit Breaker</code>) : 시스템 과부하나 특정 서비스에 문제가 생겼을 때, 자연스럽게 다른 정상적인 서비스로 요청 흐름을 변경하는 것 → 장애가 다른 서비스로 전이되지 않게 하자!
    <ul>
      <li><code class="language-plaintext highlighter-rouge">A → B → A</code>의 서비스 흐름에서 <code class="language-plaintext highlighter-rouge">B</code> 서비스가 장애가 생겼을 때, <code class="language-plaintext highlighter-rouge">A</code>가 동기 요청을 보내면? : 계속 기다린다…
        <ul>
          <li><code class="language-plaintext highlighter-rouge">B</code> 서비스 호출에 대한 연속 실패 횟수가 임계값을 초과하면, 이후 서비스 호출 시도를 모두 실패로 처리</li>
          <li>풀백 (<code class="language-plaintext highlighter-rouge">Fallback</code>) 메소드를 지정해 정상 응답을 대신할 대체 응답을 사용자에게 제공</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="마이크로서비스의-장애-감지--모니터링-및-추적-패턴">마이크로서비스의 장애 감지 → 모니터링 및 추적 패턴</h4>

<ul>
  <li>예시 : 스프링 클라우드 히스트릭스 (<code class="language-plaintext highlighter-rouge">Hystrix</code>) + 집킨 (<code class="language-plaintext highlighter-rouge">Zipkin</code>)</li>
</ul>

<blockquote>
  <ul>
    <li>
      <p>그래서 서킷 브레이커는 언제, 어떻게 작동하는데…?</p>

      <p>→ 각 마이크로서비스의 장애를 실시간으로 감지할 수 있고, 서비스 간의 호출을 파악하자!</p>
    </li>
  </ul>
</blockquote>

<ul>
  <li>히스트릭스 대시보드 : 각 요청의 트래픽이 원형으로 표현 → 서비스 성능에 문제가 생기면, 서킷 브레이커 발동 (<b style="color: red;">⦁</b>)</li>
  <li>집킨 대시보드 : 각 서비스 트랜잭션의 호출을 추적하거나, 지연 구간별 장애 포인트를 확인할 수 있음
    <ul>
      <li>서비스 <code class="language-plaintext highlighter-rouge">API</code>를 선택하면, 각 <code class="language-plaintext highlighter-rouge">API</code>가 다른 <code class="language-plaintext highlighter-rouge">API</code>를 어떻게 호출하는지 확인 가능
        <ul>
          <li>전체적인 <code class="language-plaintext highlighter-rouge">API</code> 간의 호출 빈도를 확인할 수 있는 정적 다이어그램 또한 제공</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="마이크로서비스의-로그-관리--중앙화된-로그-집계-패턴">마이크로서비스의 로그 관리 → 중앙화된 로그 집계 패턴</h4>

<blockquote>
  <ul>
    <li>마이크로서비스가 사용량에 따라 탄력적으로 변화하면, 그 인스턴스가 삭제되면 로컬 로그는 초기화..?
      <ul>
        <li>로그 (<code class="language-plaintext highlighter-rouge">Logs</code>) 원칙 : 로그는 이벤트 스트림 (<code class="language-plaintext highlighter-rouge">Event Streams</code>)로 처리되어야 함
          <ul>
            <li>로그는 시작과 끝이 고정된 것이 아니라, 서비스가 실행되는 동안 계속 흐르는 흐름</li>
            <li>서비스는 스트림의 전달 및 저장에 절대 관여하면 안됨!
              <ul>
                <li>로그를 전달하거나 저장하는 매커니즘 자체가 특정한 기술 및 인프라에 의존하게 됨</li>
                <li>마이크로서비스가 로그 관련 매커니즘을 직접 구현하면 유연성이 떨어짐</li>
              </ul>
            </li>
          </ul>
        </li>
      </ul>

      <p>→ 서비스에서 발생한 이벤트 스트림 형태의 로그를 수집하고 분석할 방법을 찾자!</p>
    </li>
  </ul>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ELK</code> 스택 : 엘라스틱서치 &amp; 로그스태시 &amp; 키바나를 기반으로 하는 데이터 분석 환경을 구성
    <ul>
      <li>엘라스틱서치 (<code class="language-plaintext highlighter-rouge">ElasticSearch</code>) : 분산형 검색 및 분석 엔진
        <ul>
          <li>정형, 비정형, 위치 정보, 메트릭 등 원하는 방법으로 검색을 수행 및 결합 가능</li>
        </ul>
      </li>
      <li>로그스태시 (<code class="language-plaintext highlighter-rouge">Logstash</code>) : 서버 측의 로그 집합기
        <ul>
          <li>여러 소스에서 동시에 데이터를 수집 및 변한하여 특정 보관소로 데이터를 전송하는 데이터 처리 파이프라인</li>
        </ul>
      </li>
      <li>키바나 (<code class="language-plaintext highlighter-rouge">Kibana</code>) : 시각적으로 로그 내역을 보여주는 대시보드
        <ul>
          <li>위치 데이터, 시계열 분석, 그래프 관계 등을 히스토그램, 막대 그래프, 파이차트 등의 형태로 표현</li>
        </ul>
      </li>
    </ul>

    <p>→ 각 서비스의 인스턴스 로그를 집계해서 중앙에서 집중 관리할 수 있고, 특정 로그를 검색 및 분석할 수 있음</p>
  </li>
</ul>

<blockquote>
  <ol>
    <li>마이크로서비스 내의 로그를 중앙 서버의 레디스로 전송한다.</li>
    <li>중앙 서버의 레디스에서 중앙 로그 저장소에 해당 로그들을 전송한다.</li>
    <li>중앙 로그 저장소에 엘라스틱서치 엔진이 로그를 인덱싱한다.</li>
    <li>해당 로그 정보를 키바나 대시보드를 통해 표현한다.</li>
  </ol>

  <ul>
    <li>중간 지점에 레디스가 존재하는 이유? : 마이크로서비스의 로그스태시에서 보낸 로그 스트림이 중앙 로그 저장소에 몰리면 성능상의 문제가 생길 수 있으므로 임시 저장소 역할의 레디스를 추가</li>
  </ul>
</blockquote>

<h4 id="msa-운영-관리-패턴의-변화-1--쿠버네티스-kubernetes"><code class="language-plaintext highlighter-rouge">MSA</code> 운영 관리 패턴의 변화 1 : 쿠버네티스 (<code class="language-plaintext highlighter-rouge">Kubernetes</code>)</h4>

<ul>
  <li>기존 : 문제마다 상이한 기술들로 접근하여 해결
    <ul>
      <li>넷플릭스 <code class="language-plaintext highlighter-rouge">OSS</code>나 스프링 클라우드를 이용해 각각의 서비스를 별도로 둠</li>
      <li>유연성처럼 수평 확장이 필요한 요소들은 <code class="language-plaintext highlighter-rouge">AWS IaaS</code> 서비스를 통해 해결</li>
    </ul>
  </li>
  <li>현재 : 쿠버네티스 하나로 모든 문제들을 해결
    <ul>
      <li>인프라 차원의 <code class="language-plaintext highlighter-rouge">AWS IaaS</code> → 컨테이너 레플리카 기술로 탐색 및 호출을 통합한 소프트웨어 차원의 쿠버네티스</li>
    </ul>
  </li>
</ul>

<h4 id="msa-운영-관리-패턴의-변화-2--서비스-메시-service-mash"><code class="language-plaintext highlighter-rouge">MSA</code> 운영 관리 패턴의 변화 2 : 서비스 메시 (<code class="language-plaintext highlighter-rouge">Service Mash</code>)</h4>

<ul>
  <li>기존 : <code class="language-plaintext highlighter-rouge">API</code> 게이트웨이, 서비스 레지스트리, <code class="language-plaintext highlighter-rouge">Config</code> 서비스와 같이 운영 관리를 위한 여러 기반 서비스를 별도로 둠
    <ul>
      <li>업무 처리 마이크로서비스에 스프링 클라우드 서비스를 사용하기 위한 라이브러리를 비즈니스 로직과 함께 탑재</li>
      <li>스프링 클라우드는 <code class="language-plaintext highlighter-rouge">Java</code> 기반이므로, 다른 언어로 폴리글랏하게 구현할 수 없음</li>
    </ul>
  </li>
  <li>현재 : 이스티오과 같은 서비스 메시 패턴을 적용
    <ul>
      <li><code class="language-plaintext highlighter-rouge">MSA</code> 문제 영역 해걸을 위한 기능을 비즈니스 로직과 분리해 네트워크 인프라 계층에서 수행</li>
      <li>인프라 레이어로서 서비스 간의 통신을 처리하여 문제 해결 패턴을 포괄해 처리</li>
    </ul>
  </li>
  <li>이스티오 (<code class="language-plaintext highlighter-rouge">Istio</code>) : 서비스 메시 패턴의 대표적인 구현체
    <ul>
      <li>사이드카 (<code class="language-plaintext highlighter-rouge">Sidecar</code>) 패턴 : 어플리케이션이 배포되는 컨테이너에 완전히 격리되어 별도의 컨테이너로 배포
        <ul>
          <li>마이크로서비스마다 함께 배포되는 사이드카 프락시에 운영 관리를 위한 기능이 별도로 존재</li>
          <li>운영 관리 기능과 별개로 존재하는 마이크로서비스는 순수한 비즈니스 로직으로 제공될 수 있음</li>
          <li>컨트롤 플레인 (<code class="language-plaintext highlighter-rouge">Control Plain</code>)으로 중앙에서 통제되며, 사이드카끼리 통신하여 관련 운영 관리 기능 제공</li>
        </ul>

        <p>→ 쿠버네티스의 파드 (<code class="language-plaintext highlighter-rouge">Pod</code>)에 서비스 컨테이너와 사이드카 구현체인 엔보이 (<code class="language-plaintext highlighter-rouge">Envoy</code>) 컨테이너가 함께 배포</p>
      </li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>넷플릭스 <code class="language-plaintext highlighter-rouge">OSS</code> &amp; 스프링 클라우드와 이스티오의 차이점</p>

  <ul>
    <li>이스티오는 사이드카로 격리되어 <code class="language-plaintext highlighter-rouge">YAML</code>과 같은 설정 파일르 정의되어 어플리케이션 코드 변경이 거의 없음</li>
    <li><code class="language-plaintext highlighter-rouge">Java</code>만이 아닌, 폴리글랏 어플리케이션도 지원 가능</li>
    <li>쿠버네티스와 완벽하게 통합된 환경을 지원</li>
  </ul>
</blockquote>

<h3 id="마이크로서비스-어플리케이션-구현을-위한-마이크로서비스-구성-및-설계--어플리케이션-패턴">마이크로서비스 어플리케이션 구현을 위한 마이크로서비스 구성 및 설계 → 어플리케이션 패턴</h3>

<ul>
  <li>어플리케이션 영역에서도 유연성, 확장성, 독립성을 염두에 두어 설계되어야 함 → 백엔드, 프론트엔드 영역 모두!</li>
</ul>

<h4 id="마이크로-프론트엔드--ui-컴포넌트-패턴">마이크로 프론트엔드 → <code class="language-plaintext highlighter-rouge">UI</code> 컴포넌트 패턴</h4>

<blockquote>
  <ul>
    <li>마이크로서비스의 장점인 서비스의 독립적인 변경 및 배포를, 기존 모노리스 프론트엔드로는 힘들텐데…?
      <ul>
        <li>모노리스 프론트엔드 : 백엔드의 여러 <code class="language-plaintext highlighter-rouge">API</code>를 호출하고 조합하여 화면을 구성해 표현</li>
      </ul>
    </li>
  </ul>

  <p>→ 프론트엔드도 마이크로서비스처럼 기능별로 분리하고 각 프런트엔드를 조합하여 동작하게 하자!</p>
</blockquote>

<ul>
  <li>프레임 (<code class="language-plaintext highlighter-rouge">Frame</code>) 형태의 부모 창에 각 마이크로 프론트엔드를 조합해 동작
    <ul>
      <li>실제 각 기능의 표현은 마이크로 프런트엔드 조각이 구현 → 여러 백엔드 마이크로서비스 <code class="language-plaintext highlighter-rouge">API</code> 호출</li>
    </ul>
  </li>
</ul>

<h4 id="프론트엔드--백엔드-백엔드--백엔드-간의-통신--마이크로서비스-통신-패턴">프론트엔드 ↔ 백엔드, 백엔드 ↔ 백엔드 간의 통신 → 마이크로서비스 통신 패턴</h4>

<ul>
  <li>동기 호출 방식 : 클라이언트에서 서버 측에 존재하는 마이크로서비스 <code class="language-plaintext highlighter-rouge">REST API</code>를 호출할 때 사용
    <ul>
      <li>사용자가  <code class="language-plaintext highlighter-rouge">A</code> 서비스에 <code class="language-plaintext highlighter-rouge">B</code> 서비스가 필요한 <code class="language-plaintext highlighter-rouge">HTTP GET</code> 방식의 요청을 보내면,
        <ol>
          <li><code class="language-plaintext highlighter-rouge">A</code> 서비스가 <code class="language-plaintext highlighter-rouge">B</code> 서비스에 <code class="language-plaintext highlighter-rouge">HTTP GET</code> 방식의 동기 호출을 수행하고,</li>
          <li><code class="language-plaintext highlighter-rouge">B</code> 서비스가 응답을 발생한다. (성공 시 <code class="language-plaintext highlighter-rouge">200 OK</code>)</li>
        </ol>
      </li>
      <li>다양한 클라이언트 채널 연계나 라우팅, 로드밸런싱을 원활하기 위해 <code class="language-plaintext highlighter-rouge">API</code> 게이트웨이를 둘 수 있음</li>
      <li>요청을 보내면 바로 응답이 오는 직관적인 방식이므로, 가장 많이 쓰이고 구현하기 쉬움</li>
      <li>호출을 받은 마이크로서비스에 장애가 생긴다면, 요청을 보낸 서비스는 응답할 때까지 대기하면서 재호출
        <ul>
          <li>여러 서비스 간의 연계를 통해 업무를 처리하는 마이크로서비스에서는 장애가 연쇄적으로 발생할 수 있음</li>
          <li>서비스가 다른 서비스를 호출해서 얻은 정보로 기능을 제공한다는 것은, 서비스 간의 의존도가 높다는 의미</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>메시지 기반 비동기 (<code class="language-plaintext highlighter-rouge">asynchronous</code>) 통신 방식 : 메시지를 보내면, 응답을 기다리지 않고 다음 업무 처리
    <ul>
      <li>메시지 브로커 (<code class="language-plaintext highlighter-rouge">Message Broker</code>) : 동기식처럼 완결성을 보장할 수 없으니, 이를 보장하는 메커니즘을 활용
        <ul>
          <li>아파치 카프카 (<code class="language-plaintext highlighter-rouge">Apache Kafka</code>), 레빗엠큐 (<code class="language-plaintext highlighter-rouge">RabbitMQ</code>) 등</li>
          <li>메시지를 보내는 생산자 (<code class="language-plaintext highlighter-rouge">Producer</code>)와 메시지를 받아 처리하는 소비자 (<code class="language-plaintext highlighter-rouge">Consumer</code>)
            <ul>
              <li>생산자와 소비자가 서로 직접 접속하지 않고 메시지 브로커를 통해 연결</li>
              <li>메시지 브로커에 메시지를 전달하고 자신의 일을 처리하면, 메시지 브로커가 전송을 보장</li>
            </ul>
          </li>
          <li>메시지 브로커으로 중계되므로, 서로 통신하는 서비스들이 물리적으로 동일한 시스템에 위치하지 않아도 됨</li>
          <li>서로 프로세스를 공유할 필요도 없으며, 동일한 시간대에 동시에 동작하지 않아도 됨</li>
        </ul>
      </li>
      <li>비동기 방식의 이벤트 기반 아키텍처 (<code class="language-plaintext highlighter-rouge">Event-driven Architecture</code>) : 비동기 통신 방식으로 느슨한 연계 지향
        <ol>
          <li>분산 시스템 간에 발신자가 이벤트를 생성 및 발행 (<code class="language-plaintext highlighter-rouge">Publish</code>)하여,</li>
          <li>해당 이벤트를 필요로 하는 수신자에게 전송하면,</li>
          <li>이벤트를 구독 (<code class="language-plaintext highlighter-rouge">Subscribe</code>)하고 있던 수신자가 이벤트를 받아 처리한다.</li>
        </ol>

        <p>→ 순서에 따라 특정 행동이 발생하는 기존의 방식이 아닌, ‘상태의 변화’를 의미하는 이벤트에 대한 반응으로 동작</p>
      </li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>Reference</p>

  <ul>
    <li><a href="https://www.aladin.co.kr/m/mproduct.aspx?ItemId=285280054">도메인 주도 설계로 시작하는 마이크로서비스 개발</a></li>
  </ul>
</blockquote>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="MicroService" /><summary type="html"><![CDATA[마이크로서비스 아키텍처 (MSA) : 마이크로서비스를 접목한 아키텍처 구조]]></summary></entry><entry><title type="html">[MicroService] 1. MicroService</title><link href="http://localhost:4000/microservice1/" rel="alternate" type="text/html" title="[MicroService] 1. MicroService" /><published>2023-12-09T00:00:00+09:00</published><updated>2023-12-14T00:00:00+09:00</updated><id>http://localhost:4000/microservice1</id><content type="html" xml:base="http://localhost:4000/microservice1/"><![CDATA[<h2 id="비즈니스-민첩성--자신의-특화된-서비스를-빠르게-제공하고-피드백을-반영해-서비스를-빠르게-개선">비즈니스 민첩성 : 자신의 특화된 서비스를 빠르게 제공하고, 피드백을 반영해 서비스를 빠르게 개선</h2>

<ul>
  <li>빠른 배포 주기 : 비즈니스 민첩성을 간접적으로 보여주는 지표 → 어떻게 빠른 비즈니스 속도를 가질 수 있을까?</li>
</ul>

<h3 id="클라우드-인프라-cloud-infra의-등장--아마존의-aws-구글의-구글-클라우드-플랫폼">클라우드 인프라 (<code class="language-plaintext highlighter-rouge">Cloud Infra</code>)의 등장 : 아마존의 <code class="language-plaintext highlighter-rouge">AWS</code>, 구글의 구글 클라우드 플랫폼</h3>
<ul>
  <li>비용 측면 : 클라우드의 사용량에 따라 비용을 유연하게 조정할 수 있음 → 사용한 만큼만 비용을 지불</li>
  <li>어플리케이션 측면 : 어플리케이션을 여러 개의 블록처럼 관리해 효율성을 극대화
    <ul>
      <li>사용량 증가에 따른 성능 및 가용성을 <code class="language-plaintext highlighter-rouge">Scale-up</code>, <code class="language-plaintext highlighter-rouge">Scale-out</code> → 특정 부분만 탄력성 있게 확장 가능</li>
    </ul>
  </li>
</ul>

<h3 id="어떤-서비스가-클라우드-인프라에-적합할까--클라우드-프랜들리-클라우드-네이티브">어떤 서비스가 클라우드 인프라에 적합할까 : 클라우드 프랜들리? 클라우드 네이티브?</h3>
<ul>
  <li>클라우드 프렌들리 (<code class="language-plaintext highlighter-rouge">Cloud Friendly</code>) : 시스템을 하나의 큰 덩어리로 만들어 클라우드 인프라에 올리는 것</li>
  <li>클라우드 네이티브 (<code class="language-plaintext highlighter-rouge">Cloud Native</code>) : 시스템을 여러 개의 블록 단위로 나누어 클라우드 인프라에 올리는 것</li>
</ul>

<h2 id="마이크로서비스-microservice--여러-서비스-인스턴스가-하나의-비즈니스-어플리케이션-구성">마이크로서비스 (<code class="language-plaintext highlighter-rouge">MicroService</code>) : 여러 서비스 인스턴스가 하나의 비즈니스 어플리케이션 구성</h2>
<ul>
  <li>서비스가 갖는 저장소가 각각 다르므로 업무 단위로 모듈 경계가 명확하게 구분
    <ul>
      <li>확장하거나 변경할 때에는 특정 기능별로 독립적으로 작업한 뒤에 빌드해서 배포하면 됨</li>
      <li>각 서비스가 독립적이기에 서로 다른 언어, 데이터, 기술로도 개발 가능 → 폴리글랏 (<code class="language-plaintext highlighter-rouge">Polyglot</code>)</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>마이크로서비스 이전에는? : 모노리스 (<code class="language-plaintext highlighter-rouge">Monolith</code>)</p>
  <ul>
    <li>전체 시스템이 하나의 단위로 개발되는 일체식 어플리케이션</li>
    <li>일반적으로 클라이언트, 어플리케이션, 데이터베이스의 <code class="language-plaintext highlighter-rouge">3-tier</code> 시스템으로 구성</li>
    <li>아무리 작은 변화에도 새로운 버전으로 전체를 빌드해서 배포해야 함</li>
    <li>단일 프로세스에서 실행되므로, 확장이 필요할 경우에 전체 어플리케이션을 동시에 확장해야 함
      <ul>
        <li>로드밸런서를 앞에 두고 여러 인스턴스 위에 큰 덩어리를 복제해 스케일 아웃</li>
      </ul>
    </li>
  </ul>
</blockquote>

<h3 id="마이크로서비스를-위한-조건은-무엇인가">마이크로서비스를 위한 조건은 무엇인가?</h3>

<ol>
  <li>
    <h4 id="업무-기능-중심-팀">업무 기능 중심 팀</h4>
    <ul>
      <li>콘웨이 법칙 (<code class="language-plaintext highlighter-rouge">Conway’s law</code>) : 시스템을 개발할 때 항상 시스템의 모양이 팀 의사소통 구조를 반영
        <ul>
          <li>마이크로서비스를 만드는 팀은 역할이나 기술이 아닌, 업무 기능을 중심으로 한 팀이 되어야 함</li>
        </ul>
      </li>
      <li>기획자, 디자이너, 프론트엔드 개발자, 백엔드 개발자, 테스터 등 다양한 역할의 인원으로 구성
        <ul>
          <li>서비스를 처음부터 끝까지 만들기 위한 모든 단계의 역할을 갖추고 있음</li>
          <li>같은 공간, 같은 시간을 공유하기에 의사소통이 원활하고 빠르게 진행할 수 있음</li>
          <li>여러 기능들이 모여 있다는 의미에서 다기능 팀 (<code class="language-plaintext highlighter-rouge">Cross-Functional Team</code>)이라고도 부름</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <h4 id="자율적인-분권-거버넌스">자율적인 분권 거버넌스</h4>
    <ul>
      <li>각 마이크로서비스 팀은 빠르게 서비스를 만드는 것을 최우선 목적으로 함
        <ul>
          <li>중앙의 강력한 표준이나 절차 준수를 강요받지 않음</li>
          <li>스스로 효율적인 방법론과 도구, 기술을 찾아 적용 → 폴리글랏 프로그래밍, 폴리글랏 저장소</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <h4 id="제품-중심의-생명-주기">제품 중심의 생명 주기</h4>
    <ul>
      <li>개발 모델이 프로젝트 단위가 아니라 제품 단위로 구성됨 → 개발 조직과 운영 조직이 결합</li>
      <li>소프트웨어를 완성해야 할 기능들의 집합이 아닌, 비즈니스를 제공하는 제품 (<code class="language-plaintext highlighter-rouge">Product</code>)로 봄
        <ul>
          <li>우선 빠르게 개발한 뒤에 반응을 보고 개선하는 방식으로 개발</li>
          <li>프로젝트 형태의 워터풀 (<code class="language-plaintext highlighter-rouge">WaterFall</code>) 개발 방식이 아닌, 제품 중심의 에자일 (<code class="language-plaintext highlighter-rouge">Agile</code>) 개발 방식 채용</li>
          <li>2~3주 단위의 스프린트 (<code class="language-plaintext highlighter-rouge">Sprint</code>)를 통해 소프트웨어에 피드백을 즉각적으로 반영</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <h4 id="cicd-파이프라인의-자동화"><code class="language-plaintext highlighter-rouge">CI/CD</code> 파이프라인의 자동화</h4>
    <ul>
      <li>개발과 운영을 동시에 수행하는 데비옵스 (<code class="language-plaintext highlighter-rouge">DevOps</code>)를 궁극적으로 가능하게 함</li>
      <li>각각의 <code class="language-plaintext highlighter-rouge">CI/CD</code> 파이프라인 프로세스는 <code class="language-plaintext highlighter-rouge">CI/CD</code> 파이프라인 도구를 통해 자동화가 이루어짐
        <ul>
          <li>‘<code class="language-plaintext highlighter-rouge">Infrastructure as Code</code>’ : 코드를 이용해 인프라 구성부터 어플리케이션 빌드 및 배포를 정의</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <h4 id="분권-데이터-관리">분권 데이터 관리</h4>
    <ul>
      <li>폴리글랏 저장소 (<code class="language-plaintext highlighter-rouge">Polyglot Persistence</code>) 접근법 : 서비스별로 데이터베이스를 갖도록 설계
        <ul>
          <li>각각의 저장소가 서비스별로 분산되어 있으며, 다른 서비스에 <code class="language-plaintext highlighter-rouge">API</code>를 통해 접근함</li>
        </ul>
      </li>
      <li>결과적 일관성 (<code class="language-plaintext highlighter-rouge">Eventual Consistency</code>) : 일시적으로 다른 두 서비스의 데이터가 결국엔 동일해짐
        <ul>
          <li>여러 트랜잭션을 하나로 묶지 않고, 별도의 로컬 트랙잭션을 수행</li>
          <li>각 저장소 내 데이터의 비즈니스 정합성을 위해 데이터 일관성이 다른 부분을 보상 트랙잭션으로 맞춤</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <h4 id="내결함성을-고려한-설계">내결함성을 고려한 설계</h4>
    <ul>
      <li>내결함성 (<code class="language-plaintext highlighter-rouge">Fault Tolerance</code>) : 시스템은 언제든 실패할 수 있는 가능성이 존재한다.
        <ul>
          <li>시스템이 실패해서 더는 진행할 수 없을 때에도, 자연스럽게 대응할 수 있도록 설계하여야 함</li>
        </ul>
      </li>
      <li>다양한 실패에 대비해 완벽히 테스트할 수 있는 환경을 마련해야 함</li>
      <li>시스템의 실패를 감지하고 대응하기 위한 실시간 모니터링 체계 또한 갖춰야 함</li>
      <li>장애를 일부러 발생시키는 카오스 몽키 (<code class="language-plaintext highlighter-rouge">Chaos Monkey</code>)를 만들어 아키텍처 동작을 점검하기도 함</li>
    </ul>
  </li>
</ol>

<blockquote>
  <p>Reference</p>

  <ul>
    <li><a href="https://www.aladin.co.kr/m/mproduct.aspx?ItemId=285280054">도메인 주도 설계로 시작하는 마이크로서비스 개발</a></li>
  </ul>
</blockquote>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="MicroService" /><summary type="html"><![CDATA[비즈니스 민첩성 : 자신의 특화된 서비스를 빠르게 제공하고, 피드백을 반영해 서비스를 빠르게 개선]]></summary></entry><entry><title type="html">[JPA] 1. JPA</title><link href="http://localhost:4000/jpa1/" rel="alternate" type="text/html" title="[JPA] 1. JPA" /><published>2023-12-09T00:00:00+09:00</published><updated>2023-12-09T00:00:00+09:00</updated><id>http://localhost:4000/jpa1</id><content type="html" xml:base="http://localhost:4000/jpa1/"><![CDATA[<h2 id="개발자가-sql을-직접-다룰-때의-문제">개발자가 <code class="language-plaintext highlighter-rouge">SQL</code>을 직접 다룰 때의 문제</h2>

<ol>
  <li>
    <h3 id="db는-객체-구조와는-다른-데이터-중심의-구조를-가져-객체를-db에서-직접-저장하거나-조회할-수-없음"><code class="language-plaintext highlighter-rouge">DB</code>는 객체 구조와는 다른 데이터 중심의 구조를 가져 객체를 DB에서 직접 저장하거나 조회할 수 없음</h3>
    <ul>
      <li>개발자가 객체지향 어플리케이션과 <code class="language-plaintext highlighter-rouge">DB</code> 중간에서 <code class="language-plaintext highlighter-rouge">SQL</code>과 <code class="language-plaintext highlighter-rouge">JDBC API</code>를 이용해 변환해야 함</li>
      <li>객체를 DB에 CRUD하기 위해서 너무 많은 <code class="language-plaintext highlighter-rouge">SQL</code>과 <code class="language-plaintext highlighter-rouge">JDBC API</code>를 코드로 작성해야 함</li>
    </ul>
  </li>
  <li>
    <h3 id="dao를-이용해-sql를-은닉해도-결국엔-sql에-의존적인-개발이-될-수-밖에-없음"><code class="language-plaintext highlighter-rouge">DAO</code>를 이용해 <code class="language-plaintext highlighter-rouge">SQL</code>를 은닉해도 결국엔 <code class="language-plaintext highlighter-rouge">SQL</code>에 의존적인 개발이 될 수 밖에 없음</h3>
    <ul>
      <li>개발자가 엔티티를 신뢰하고 사용할 수 없음… 이게 진정한 계층 분할?</li>
    </ul>
  </li>
</ol>

<blockquote>
  <p>그럼, <code class="language-plaintext highlighter-rouge">JPA</code>는 어떻게 문제를 해결하였는가?</p>

  <ul>
    <li>객체를 <code class="language-plaintext highlighter-rouge">DB</code>에 저장하고 관리할 때 <code class="language-plaintext highlighter-rouge">JPA</code>가 제공하는 <code class="language-plaintext highlighter-rouge">API</code> 사용
      <ul>
        <li>저장 → <code class="language-plaintext highlighter-rouge">persist()</code> : 객체를 DB에 저장하면, <code class="language-plaintext highlighter-rouge">INSERT SQL</code>를 생성해서 <code class="language-plaintext highlighter-rouge">DB</code>에 전달</li>
        <li>조회 → <code class="language-plaintext highlighter-rouge">find()</code> : 객체 하나를 DB에서 조회하면, <code class="language-plaintext highlighter-rouge">SELECT SQL</code>를 생성해서 <code class="language-plaintext highlighter-rouge">DB</code>에 전달</li>
        <li>수정 → 객체를 조회해 값을 변경하면, 트랜잭션을 커밋할 때 <code class="language-plaintext highlighter-rouge">UPDATE SQL</code>를 생성해 <code class="language-plaintext highlighter-rouge">DB</code>에 전달</li>
        <li>연관 객체 조회 → 연관된 객체를 사용하는 시점에 <code class="language-plaintext highlighter-rouge">SELECT SQL</code>를 실행</li>
      </ul>
    </li>
  </ul>
</blockquote>

<h2 id="객체와-관계형-데이터베이스의-패러다임-불일치">객체와 관계형 데이터베이스의 패러다임 불일치</h2>
<ul>
  <li>객체지향 프로그래밍 : 추상화, 캡슙화, 정보은닉, 상속, 다형성 등 시스템의 복잡성을 제어할 수 있는 다양한 장치 제공</li>
  <li>비즈니스 요구사항을 정의한 도메인 모델 또한 객체로 모델링 → 객체와 관계형 데이터베이스는 지향하는 바가 다르다!</li>
</ul>

<ol>
  <li>
    <h3 id="상속--객체는-상속이라는-기능을-가지지만-테이블은-상속이라는-기능이-없음">상속 : 객체는 상속이라는 기능을 가지지만, 테이블은 상속이라는 기능이 없음</h3>
    <ul>
      <li>데이터베이스 모델링의 슈퍼타입-서브타입 관계를 이용한다고 해도, 매번 2가지 <code class="language-plaintext highlighter-rouge">SQL</code>를 만들어야 함</li>
    </ul>
  </li>
  <li>
    <h3 id="연관관계--객체는-참조를-사용해-다른-객체와-연관관계를-가지고-참조에-접근해서-조회">연관관계 : 객체는 참조를 사용해 다른 객체와 연관관계를 가지고 참조에 접근해서 조회</h3>
    <ul>
      <li>그러나 테이블은 외래 키를 사용해서 다른 테이블과 연관관계를 가지고 조인을 이용해서 연관된 테이블을 조회</li>
      <li>그럼 객체를 테이블에 맞추어 모델링하면? : 외래 키와 참조의 예 → 객체지향의 장점을 잃어버릴 수 있다!</li>
    </ul>
  </li>
  <li>
    <h3 id="객체-그래프-탐색--객체에서-회원이-소속된-팀을-조회할-때에는-참조를-사용해-연관된-팀을-탐색">객체 그래프 탐색 : 객체에서 회원이 소속된 팀을 조회할 때에는 참조를 사용해 연관된 팀을 탐색</h3>
    <ul>
      <li>그런데 참조를 통해 팀을 탐색할 수 있을지 없을지 알 수 없음 → 너무나 큰 제약사항
        <ul>
          <li>결국 <code class="language-plaintext highlighter-rouge">DAO</code>를 통해 <code class="language-plaintext highlighter-rouge">SQL</code>을 직접 확인하기 위해 상황에 따른 여러 메소드를 만들어야 함</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <h3 id="비교--데이터베이스는-기본-키의-값으로-각-row를-구분하지만-객체는-동일성-비교-동등성-비교를-활용">비교 : 데이터베이스는 기본 키의 값으로 각 <code class="language-plaintext highlighter-rouge">row</code>를 구분하지만, 객체는 동일성 비교, 동등성 비교를 활용</h3>
    <ul>
      <li>동일성 비교 (<code class="language-plaintext highlighter-rouge">==</code>) : 객체 인스턴스의 주소 값을 비교, 동등성 비교 (<code class="language-plaintext highlighter-rouge">equals()</code>) : 객체 내부의 값을 비교
        <ul>
          <li>기본 키 값이 같은 객체를 2번 조회했을 때, 이 객체들이 다른 인스턴스면 동등하되 동일하지 않다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<blockquote>
  <p>그럼, <code class="language-plaintext highlighter-rouge">JPA</code>는 어떻게 문제를 해결하였는가?</p>

  <ul>
    <li>상속 → 자바 컬렉션에 객체를 저장하듯이 <code class="language-plaintext highlighter-rouge">JPA</code>에 객채를 저장하면 이를 두 테이블에 나눠 저장</li>
    <li>연관관계 → 개발자가 관계를 설정해 객체를 저장하면, 참조를 외래 키로 변환해 <code class="language-plaintext highlighter-rouge">INSERT SQL</code> 전달</li>
    <li>객체 그래프 탐색 : 실제 객체를 사용하는 시점까지 <code class="language-plaintext highlighter-rouge">DB</code> 조회를 미루는 지연 로딩 이용</li>
    <li>비교 : 같은 트랜잭션일 때 같은 객체가 조회되는 것을 보장</li>
  </ul>
</blockquote>

<h2 id="jpa-java-persistence-api--자바-진영의-orm-기술-표준"><code class="language-plaintext highlighter-rouge">JPA</code> (<code class="language-plaintext highlighter-rouge">Java Persistence API</code>) : 자바 진영의 <code class="language-plaintext highlighter-rouge">ORM</code> 기술 표준</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">ORM</code> (<code class="language-plaintext highlighter-rouge">Object-Relational Mapping</code>) : 객체와 관계형 <code class="language-plaintext highlighter-rouge">DB</code>를 매핑</li>
</ul>

<h3 id="왜-jpa를-사용해야-하는가">왜 <code class="language-plaintext highlighter-rouge">JPA</code>를 사용해야 하는가?</h3>
<ol>
  <li>생산성 : 반복되는 <code class="language-plaintext highlighter-rouge">CRUD</code>용 <code class="language-plaintext highlighter-rouge">SQL</code> 코드를 작성하는 대신, 자바 컬렉션에 객체를 저장하듯 <code class="language-plaintext highlighter-rouge">JPA</code>에 객체를 전달하면 됨</li>
  <li>유지보수 : 매번 <code class="language-plaintext highlighter-rouge">SQL</code>과 <code class="language-plaintext highlighter-rouge">JDBC API</code> 코드를 변경할 필요 없음</li>
  <li>패러다임의 불일치 해결 : <code class="language-plaintext highlighter-rouge">ORM</code> 프레임워크가 상속, 연관관계, 객체 그래프 탐색, 비교 등의 문제를 대신 해결</li>
  <li>성능 : 어플리케이션과 <code class="language-plaintext highlighter-rouge">DB</code> 사이에서 동작하면서 다양한 성능 최적화 기회를 제공</li>
  <li>데이터 접근 추상화 및 벤더 독립성 : <code class="language-plaintext highlighter-rouge">DB</code> 접근 계층을 제공해서 특정 <code class="language-plaintext highlighter-rouge">DB</code> 기술에 종속되지 않음</li>
</ol>

<blockquote>
  <p>References</p>

  <ul>
    <li><a href="https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=62681446">자바 ORM 표준 JPA 프로그래밍</a></li>
  </ul>
</blockquote>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="JPA" /><summary type="html"><![CDATA[개발자가 SQL을 직접 다룰 때의 문제]]></summary></entry><entry><title type="html">[Docker] 4. Docker File</title><link href="http://localhost:4000/docker4/" rel="alternate" type="text/html" title="[Docker] 4. Docker File" /><published>2023-12-08T00:00:00+09:00</published><updated>2023-12-08T00:00:00+09:00</updated><id>http://localhost:4000/docker4</id><content type="html" xml:base="http://localhost:4000/docker4/"><![CDATA[<h2 id="도커-파일-dockerfile--서버-운영-기록을-코드로-저장한-파일을-특정-시점의-도커-이미지로-빌드">도커 파일 (<code class="language-plaintext highlighter-rouge">Dockerfile</code>) : 서버 운영 기록을 코드로 저장한 파일을 특정 시점의 도커 이미지로 빌드</h2>

<blockquote>
  <ul>
    <li>눈송이 서버 (<code class="language-plaintext highlighter-rouge">Snowflakes Server</code>) : 각 서버마다 운영 기록이 달라 서로 모양이 다른 서버들이 공존하는 상황</li>
  </ul>

  <p>… 서버 간의 운영체제, 컴파일러, 설치된 패키지 등의 차이로 발생하는 문제 개선을 위해 서버 운영 기록을 저장하자!</p>
</blockquote>

<h3 id="도커-파일을-생성하는-과정은-테스트-주도-개발의-순환에-부합하다고-볼-수-있다">도커 파일을 생성하는 과정은 테스트 주도 개발의 순환에 부합하다고 볼 수 있다.</h3>
<ul>
  <li>테스트 주도 개발 (<code class="language-plaintext highlighter-rouge">Test Driven Development</code>) : 선 테스트 후 개발 사이클을 반복하는 개발 방법론</li>
</ul>

<div style="color: white; padding: 2% 1% 1% 1%; background-color: black;">
<ol>
  <li>테스트를 작성한다. → 도커 파일을 만든다.</li>
  <li>테스트에 실패하고 코드를 수정한다. → 도커 이미지의 빌드에 실패하고 도커 파일을 수정한다.</li>
  <li>테스트에 성공한다면, 코드를 리펙터링한다. → 도커 이미지의 빌드에 성공한다면, 도커 파일의 내용을 리펙터링한다.</li>
  <li>처음으로 되돌아간다.</li>
</ol>
</div>

<h3 id="dsl-domain-specific-language--도커-파일을-작성할-때-쓰는-언어-도커-이미지의-생성-과정-표현"><code class="language-plaintext highlighter-rouge">DSL</code> (<code class="language-plaintext highlighter-rouge">Domain-Specific Language</code>) : 도커 파일을 작성할 때 쓰는 언어 (도커 이미지의 생성 과정 표현)</h3>
<blockquote>
  <p>생성 과정을 표현? : 도커 파일은 일련의 인스트럭션을 실행된 결과로 도커 이미지를 생성한다.</p>
  <ul>
    <li>도커 파일의 인스트럭션과 이미지 레이어는 <code class="language-plaintext highlighter-rouge">1:1</code>의 관계를 가진다.</li>
  </ul>
</blockquote>

<iframe width="80%" height="700" style="border:none" src="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#what-is-a-dockerfile"></iframe>

<ul>
  <li>
    <h4 id="from--다른-컨테이너-이미지를-빌드의-시작점으로-지정"><code class="language-plaintext highlighter-rouge">FROM</code> : 다른 컨테이너 이미지를 빌드의 시작점으로 지정</h4>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">AS</code>: 컨테이너에 이름을 붙일 수 있음</li>
    </ul>
  </li>
  <li>
    <h4 id="env--컨테이너-내에서-사용될-환경-변수를-지정"><code class="language-plaintext highlighter-rouge">ENV</code> : 컨테이너 내에서 사용될 환경 변수를 지정</h4>
  </li>
  <li>
    <h4 id="workdir--컨테이너-이미지의-파일-시스템에-디렉터리를-만들고-해당-디렉터리를-작업-디렉터리로-지정"><code class="language-plaintext highlighter-rouge">WORKDIR</code> : 컨테이너 이미지의 파일 시스템에 디렉터리를 만들고, 해당 디렉터리를 작업 디렉터리로 지정</h4>
  </li>
  <li>
    <h4 id="copy--로컬의-파일-시스템-내-파일-디렉터리를-컨테이너-이미지로-복사"><code class="language-plaintext highlighter-rouge">COPY</code> : 로컬의 파일 시스템 내 파일, 디렉터리를 컨테이너 이미지로 복사</h4>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">--from=</code> : 해당 파일이 호스트 컴퓨터가 아닌 다른 컨테이너의 파일임을 알려줌</li>
    </ul>
  </li>
  <li>
    <h4 id="cmd--도커가-이미지로부터-컨테이너를-실행했을-때-실행할-명령을-지정"><code class="language-plaintext highlighter-rouge">CMD</code> : 도커가 이미지로부터 컨테이너를 실행했을 때 실행할 명령을 지정</h4>
  </li>
  <li>
    <h4 id="run--빌드-과정에서-컨테이너-안에서-명령을-실행한-다음에-그-결과를-이미지-레이어에-저장"><code class="language-plaintext highlighter-rouge">RUN</code> : 빌드 과정에서 컨테이너 안에서 명령을 실행한 다음에 그 결과를 이미지 레이어에 저장</h4>
  </li>
</ul>

<h3 id="q-도커-파일을-쓰는-이유">Q. 도커 파일을 쓰는 이유?</h3>

<h4 id="a1-동일한-환경에서-어플리케이션을-실행-가능하게-한다">A1. 동일한 환경에서 어플리케이션을 실행 가능하게 한다.</h4>
<ul>
  <li>모든 빌드 과정은 도커 컨테이너 내부에서 이루어지며, 각 컨테이너는 모든 도구를 정확한 버전으로 갖추고 있다.
    <ul>
      <li>신규 개발자의 적응 기간, 빌드 서버의 관리 부담, 개발자 간의 도구 버전의 차이로 인한 빌드 실패를 줄일 수 있다.</li>
    </ul>
  </li>
</ul>

<h4 id="a2-멀티-스테이지-환경에서-각-단계는-자신만의-캐시를-가져-성능을-향상시킬-수-있다">A2. 멀티 스테이지 환경에서 각 단계는 자신만의 캐시를 가져 성능을 향상시킬 수 있다.</h4>
<ul>
  <li>도커는 빌드 중에 각 인스트럭션에 해당하는 레이어 캐시를 찾는다.
    <ul>
      <li>만약 해당되는 캐시를 찾지 못하면 남은 인스트럭션이 모두 실행되지만, 그 범위가 해당하는 단계 안으로 국한된다.</li>
      <li>이어지는 다음 단계는 캐시를 재사용하면서 시작되므로, 캐시 재사용을 통해 빌드 단계에서 시간 절약이 가능하다.</li>
    </ul>
  </li>
</ul>

<h4 id="a3-멀티-스테이지-스크립트를-통해-최종-산출물의-크기를-가능한-한-작게-유지할-수-있다">A3. 멀티 스테이지 스크립트를 통해 최종 산출물의 크기를 가능한 한 작게 유지할 수 있다.</h4>
<ul>
  <li>최종 산출물인 도커 이미지에 불필요한 도구를 제외하여 어플리케이션의 의존 모듈 자체를 줄일 수 있다.</li>
</ul>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="Docker" /><summary type="html"><![CDATA[도커 파일 (Dockerfile) : 서버 운영 기록을 코드로 저장한 파일을 특정 시점의 도커 이미지로 빌드]]></summary></entry></feed>