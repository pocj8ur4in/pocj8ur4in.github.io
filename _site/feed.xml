<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-05-02T23:19:39+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">pocj8ur4in’s blog</title><subtitle></subtitle><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><entry><title type="html">[vocawik] 05/02 진행 내용</title><link href="http://localhost:4000/vocawik/vcw5/" rel="alternate" type="text/html" title="[vocawik] 05/02 진행 내용" /><published>2023-05-02T00:00:00+09:00</published><updated>2023-05-02T00:00:00+09:00</updated><id>http://localhost:4000/vocawik/vcw5</id><content type="html" xml:base="http://localhost:4000/vocawik/vcw5/"><![CDATA[<blockquote>
  <p>원래는 초기 설정이 어느 정도 진행되면 바로 도메인을 정의하고 이를 바탕으로 데이터베이스 엔티티와 서비스를 설계 및 구현할 계획이었는데, 비염으로 인해 처방받은 약이 효과가 너무 좋아서 (…) 일주일 내내 컨디션이 너무 저조했고, 마침 시험 일정도 맞물려 좀 휴식을 취하게 되었다. 대신 휴식을 취하면서 이것저것 생각해둔 것이 있어 그에 대한 내용을 적어둘까 한다.</p>
</blockquote>

<p>먼저 현재까지 내가 작업한 배포 과정이 정말 사이트를 운영하는 데에 정말 적합한지? 에 대한 고찰이다. 일단 내 처음 계획은, master 브랜치에 작업한 내용을 병합하기 위한 PR이 종료될 때 -&gt; github action에서 도커 허브로 이미지를 올리고 -&gt; AWS 인스턴스 내의 도커에서 올라간 이미지에 대한 컨테이너를 실행하는 것이다. 원래는 난 내 로직이 괜찮다고 생각했는데, 내가 간과한 부분이 하나 있었다.</p>

<p>AWS 인스턴스 내에서 도커를 설치하고 이미지에 대한 컨테이너를 실행하는 것은 괜찮은데, 새로운 이미지에 대한 컨테이너를 실행해야 할 때가 문제이다. 이전 이미지에 대한 컨테이너를 종료하고 이를 삭제한 다음에 새로운 이미지에 대한 컨테이너를 실행하는 과정에서 약간의 소요 시간이 생기지 않을까?</p>

<p>아니 약간의 딜레이가 뭐가 문제인건데, 라고 생각할 수도 있겠지만, 구글이나 아마존 같이 세계를 대상으로 실시간으로 동작하는 사이트들이 이러면 어마어마한 손실이 날 것이다. 그래서 이들은 무중단 배포 (Zero-downtime Deployment) 전략을 통해 서비스를 중단되지 않는 상태로 유지하려 한다. (개념에 대한 자세한 내용과 세부 전략은 <a href="https://hudi.blog/zero-downtime-deployment/">이 포스트</a>를 참고해주길 바란다.) 여기서 등장하는 게 로드밸런서 (LoadBalancer)인데,  nginx나 HAProxy와 같은 제품들이 존재하고, AWS 역시 이를 지원하니 실제 운영 서버를 만들 때 이를 적용해볼 생각이다.</p>

<p>그리고 또 든 생각은, 내가 앞으로 만들 프로젝트가 모놀리식이 아닌 마이크로 서비스에 가깝게 구현되려면 어떻게 해야 하는가? 에 대한 고찰이다. 뜬금없지만 문득 그런 생각이 든 이유는, “마이크로서비스는 작은 서비스들을 많이 만들자는 거 아냐? 그러면 서비스 단위로 모듈을 나눠야 하는 게 맞는 거 아닌가?” 라는 의문이 들었기 때문이다.</p>

<p>응용 계층은 어쩔 수 없다고 하더라도, 그 아래는 서비스 단위로 UserService, WikiService 이런 식으로 존재해도 되는 거 아닌가? 라고 생각을 했는데, 이러면 공통으로 사용 가능한, Common 코드가 불필요하게 반복될 수 있을 것 같았다. 예를 들어 사용자가 원하는 이미지를 클라우드에 업로드하는 기능이 있다고 가정하면, 사용자 프로필로도 사용될 수 있을 것이고, 게시물에도 사용될 수 있을 것이고… 암튼 많이 사용될 건데 이를 일일이 넣는 것은 전혀 객체지향적이지 않다. 그러므로 이미지를 클라우드에 업로드하는 기능과 같이 중복될 수 있는 코드들은 초기 설계 및 구현할 때나 리팩토링할 때 무조건 분리해서 재사용하는 식으로 해야 할 필요성을 느끼게 되었다.</p>

<p>그러면 재사용 가능한 코드들이 담긴 (이 프로젝트에서는 Core) 계층에 모든 모듈이 의존되는 것 아니냐! 라고 충분히 우려를 표할 수 있다. 보통 DDD 계층 구조를 그린 것들을 보면 Presentation 계층, Application 계층, Domain 계층, Infrastructure 계층으로 이루어져 있는데, 나는 각각의 계층에 해당하는 모듈 (Application 계층과 Domain 계층은 여기서 따로 구현하지 않고 Domain 계층 하나로 합쳐져 있다)들에, 앞서 Common한 코드들이 담긴 Core 모듈과 외부 모듈에 해당하는 Batch와 Socket 계층을 추가하였다. 그런데 내가 만든 Core 모듈을 보면 build.gradle 파일이 없는 것을 알 수 있다. 나는 여기에 util과 같은 Java Class만 정의할 생각이기에, 외부 의존성을 두지 않는 제약 사항을 걸 것이다.</p>

<p>아, 휴식 기간에 util과 같은 클래스의 유형을 러프하게 정리했는데, 이를 여기에 적으면 될 것 같다.</p>

<ul>
  <li>컨트롤러 (Controller) 클래스 : XXXController로 작성
    <ul>
      <li>MVC 패턴에서 화면 (View)과 비즈니스 로직 (Model)을 연결시키는 역할</li>
      <li>@GetMapping , @PostMapping과 같은 어노테이션으로 주소를 매핑</li>
      <li>일반적으로 Api 모듈에 위치</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@RestController
@RequiredArgsConstructor
public class AuthController {
    ...
}
</code></pre></div></div>

<ul>
  <li>DTO (Data Transfer Object) 클래스 : XXXDto로 작성하되, 필요 시 ResponseDto, RequestDto로 세분화
    <ul>
      <li>계층 간의 데이터 교환을 위한 ‘데이터 전송 객체’</li>
      <li>로직을 갖고 있지 않은 순수한 객체이며, getter 메소드만을 가짐
        <ul>
          <li>setter 메소드는 생성자를 이용해 값을 할당할 것이므로 제외함</li>
        </ul>
      </li>
      <li>DB에서 데이터를 얻어 Service나 Controller 등으로 보낼 때 사용</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Getter
@RequiredArgsConstructor
public class ExampleDto {
    ...
}
</code></pre></div></div>

<ul>
  <li>VO (Value Object) 클래스 : XXXVo로 작성
    <ul>
      <li>특정한 비즈니스 값을 담을 객체</li>
      <li>DTO 클래스와 달리 Read-Only 속성을 가짐
<br /><br /></li>
    </ul>
  </li>
  <li>DAO (Data Access Object) 클래스 : XXXRepository로 작성
    <ul>
      <li>실제로 데이터베이스에 접근해 데이터를 CRUD하는 객체</li>
      <li>Service와 DB를 연결하는 연결고리 역할을 하며, JPA를 활용</li>
      <li>Infrastructure 모듈에 위치시킬지에 대해 한번 생각해볼 것</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public interface ExampleRepository extends JpaRepository&lt;ExampleEntity, Long&gt; {
}
</code></pre></div></div>

<ul>
  <li>Mapper 클래스 : XXXMapper로 작성
    <ul>
      <li>마이바티스에서 제공하는 Mapper 인터페이스 -&gt; DAO를 만들지 않고 인터페이스만을 이용할 수 있음</li>
      <li>JAVA 코드에서 SQL 구문을 분리 가능</li>
      <li>Infrastructure 모듈에 위치시킬지에 대해 한번 생각해볼 것</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Mapper
public interface BoardMapper {
	List&lt;ExampledDto&gt; doExampleOrder() throws Exception;
}
</code></pre></div></div>

<ul>
  <li>엔티티 (Entity) 클래스 : XXXEntity로 작성
    <ul>
      <li>비지니스 규칙과 정보에 대한 실제 도메인 정보를 가지고 모든 것을 책임짐</li>
      <li>일반적으로 Domain 모듈에 위치</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class Example {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    ...
}
</code></pre></div></div>

<ul>
  <li>모델 (Model) 클래스 : XXXModel로 작성
    <ul>
      <li></li>
    </ul>
  </li>
  <li>서비스 (Service) 클래스 : XXXService, XXXServiceImpl로 작성
    <ul>
      <li>Application에 해당하는 영역으로, 비즈니스 로직을 정의해서 도메인 계층과 인프라 계층을 연결시킴</li>
      <li>트랜잭션 관리, DTO 변환, 모듈 간의 연계를 담당하고, 실제 데이터의 변화는 도메인 계층에 위임</li>
      <li>서비스 인터페이스와 서비스 클래스를 나눌지 한번 생각해볼 것</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public ExampleService {

}
</code></pre></div></div>

<ul>
  <li>이벤트 (Event) 클래스, 이벤트 핸들러 (Event Handler) 클래스
    <ul>
      <li>Service에서 이벤트가 발생하면, 그에 해당되는 기능을 실행할 클래스</li>
      <li>특정 이벤트에 해당하는 정보를 담을 이벤트 클래스 (-&gt; XXXEvent)와, 이벤트 디스패쳐로 연결된 이벤트 핸들러 클래스 (-&gt; XXXEventHandler)로 구성</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class ExampledEvent {

  private String example;

  public ExampledEvent(String example) {
    this.example = example;
  }

  public String getExample() {
    return example;
  }
}
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Component
public class ExampleEventHandler {
  @EventListener
  public void doExample(ExampledEvent event) {
    System.out.println(event.getExample());
  }
}
</code></pre></div></div>

<ul>
  <li>Adapter 클래스 : XXXAdapter로 작성
    <ul>
      <li>서로 호환되지 않는 두 클래스를 호환하기 위한 클래스</li>
      <li>디자인 패턴 중 어댑터 패턴을 자바 코드로 구현한 것</li>
      <li>추후 다른 디자인 패턴이 자바 코드로 구현될 경우에도 동일하게 구현할지 생각해볼 것
<br /><br /></li>
    </ul>
  </li>
  <li>Validator 클래스 : XXXValidator로 작성
    <ul>
      <li>직접 Validator 인터페이스를 상속받아 객체를 검증하거나,  Validator 인터페이스의 구현체인 LocalValidatorFactoryBean를 빈으로 주입받아 활용하는 클래스
<br /><br /></li>
    </ul>
  </li>
  <li>예외 (Exception) 클래스 : XXXException로 작성
    <ul>
      <li>java.lang 패키지의 Exception 클래스의 상속을 받아 예외처리를 관리할 클래스
<br /><br /></li>
    </ul>
  </li>
  <li>설정 (Configuration) 클래스 : XXXConfig로 작성
    <ul>
      <li>Swagger, SpringSecurity 등에 대한 설정 정보를 담고 있는 클래스</li>
      <li>복수의 파일일 경우 디렉터리를 따로 생성할 것
<br /><br /></li>
    </ul>
  </li>
  <li>유틸 (Util) 클래스 : XXXUtil로 작성
    <ul>
      <li>보안, 문자열처리, 날짜 처리 등등 특정 비즈니스 로직과 독립적인 기능을 분리해 구현하는 클래스</li>
      <li>다른 부분과 의존성이 없고 입력 패러미터만 갖고 단순한 처리만 하는 메소드들을 static 메소드로 구성</li>
      <li>Bean으로 주입하지 않음</li>
      <li>필요에 따라 Common 모듈에 위치시킬 것
<br /><br /></li>
    </ul>
  </li>
  <li>Helper 클래스 : XXXHelper로 작성
    <ul>
      <li>보안, 문자열처리, 날짜 처리 등등 특정 비즈니스 로직과 독립적인 기능을 분리해 구현하는 클래스</li>
      <li>다른 부분과 의존성이 없고 입력 패러미터만 갖고 단순한 처리만 하는 메소드들로 구성</li>
      <li>유틸 클래스와 달리, 정적인 메소드로 구성되지 않아도 됨</li>
      <li>Bean으로 주입하지 않음
<br /><br /></li>
    </ul>
  </li>
  <li>AOP 클래스 : XXXAspect로 작성
    <ul>
      <li>@Aspect을 통한 모듈화 및 재사용 과정에서 구현되는 클래스</li>
    </ul>
  </li>
</ul>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="vocawik" /><summary type="html"><![CDATA[원래는 초기 설정이 어느 정도 진행되면 바로 도메인을 정의하고 이를 바탕으로 데이터베이스 엔티티와 서비스를 설계 및 구현할 계획이었는데, 비염으로 인해 처방받은 약이 효과가 너무 좋아서 (…) 일주일 내내 컨디션이 너무 저조했고, 마침 시험 일정도 맞물려 좀 휴식을 취하게 되었다. 대신 휴식을 취하면서 이것저것 생각해둔 것이 있어 그에 대한 내용을 적어둘까 한다.]]></summary></entry><entry><title type="html">[vocawik] 04/21 진행 내용</title><link href="http://localhost:4000/vocawik/vcw4/" rel="alternate" type="text/html" title="[vocawik] 04/21 진행 내용" /><published>2023-04-21T00:00:00+09:00</published><updated>2023-04-21T00:00:00+09:00</updated><id>http://localhost:4000/vocawik/vcw4</id><content type="html" xml:base="http://localhost:4000/vocawik/vcw4/"><![CDATA[<h2 id="10-init-github-action-설정"><a href="https://github.com/pocj8ur4in/vw-backend/commit/43382309f6d0b6506372670d090c02f4d1d28a26">#10</a>. init: github action 설정</h2>

<p>이제 지속적 통합 및 배포를 위한 CI/CD 파이브라인에 대해 고민해볼 시간이다. Travis, Jenkins, github actions와 같은 CI/CD 관리 도구들이 있는데, <a href="https://choseongho93.tistory.com/295">이 게시글</a>을 참고했을 때 비교적 소규모 프로젝트인 우리의 경우에는 Jenkins에 비해 github action를 사용하는 것이 바람직해 보였다. 일단 Github Action과 Github Flow와 관련해서 <a href="https://zzsza.github.io/development/2020/06/06/github-action/">해당 게시글</a>과 <a href="https://gmlwjd9405.github.io/2018/05/12/how-to-collaborate-on-GitHub-3.html">해당 게시글</a>을 참고하였다. CI/CD 파이프라인을 아래와 같이 간단히 작성해보았다.</p>

<ol>
  <li>먼저 <code class="language-plaintext highlighter-rouge">master</code> 브랜치와 <code class="language-plaintext highlighter-rouge">dev</code> 브랜치가 존재한다.</li>
  <li>개인 작업은 <code class="language-plaintext highlighter-rouge">dev</code> 브랜치에서 분리된 로컬 <code class="language-plaintext highlighter-rouge">feature</code>브랜치에서 작업한다.</li>
  <li><code class="language-plaintext highlighter-rouge">feature</code> 브랜치의 작업을 반영할 필요가 생길 때, <code class="language-plaintext highlighter-rouge">dev</code> 브랜치에 이를 병합하고 원격 저장소에도 이를 반영한다.</li>
  <li>사이트에 작업을 반영해야 할 때 <code class="language-plaintext highlighter-rouge">dev</code> 브랜치에서 <code class="language-plaintext highlighter-rouge">master</code> 브랜치로의 <code class="language-plaintext highlighter-rouge">pull request</code>를 생성한다. 이때 <code class="language-plaintext highlighter-rouge">dev</code> 브랜치의 작업물이 빌드가 정상적으로 되는지?와 spotless가 제대로 적용되었는지?를 테스트하는 것을 <code class="language-plaintext highlighter-rouge">github flow</code>로 구현한다.</li>
  <li>이 작업이 성공하면 병합이 이루이질 수 있게 하고, 또한 <code class="language-plaintext highlighter-rouge">pull request</code>를 종료할 수 있게끔 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">pull request</code>가 종료될 때, <code class="language-plaintext highlighter-rouge">master</code> 브랜치의 테스트 및 배포 작업이 수행되는 것을 <code class="language-plaintext highlighter-rouge">github flow</code>로 구한현다.</li>
  <li>배포는 도커 이미지를 생성한 다음 이를 도커 허브에 올리고 난 뒤, AWS에서 도커 컨테이너를 생성해 돌리게끔 한다.</li>
</ol>

<p>2명 이상의 작업을 진행할 때는 원격에서 <code class="language-plaintext highlighter-rouge">feature</code> 브랜치를 두어 이를 공유하고 <code class="language-plaintext highlighter-rouge">dev</code> 브랜치에서 병합될 때에도 <code class="language-plaintext highlighter-rouge">github flow</code>를 동작시키는 게 맞겠지만, 나 혼자 작업하는 것이니 이를 편의상 생략하였다. 또한 협업에서는 보통 개발 서버와 운영 서버, 즉 2개 이상의 서버를 두어 개발하는데, 이 역시 비용상의 문제로 로컬 서버를 개발 서버로 하고 이를 운영 서버로 배포하는 흐름으로 할 것이니 양해를 구한다.</p>

<ul>
  <li>이를 위해 브랜치 구성을 dev 브랜치와 master 브랜치로 변경하였다. master 브랜치는 함부로 수정할 수 없도록 <a href="https://kotlinworld.com/292">해당 게시글</a>을 참고하여 Branch protection rules를 생성하였다.</li>
  <li>CI 및 CD 파이프라인의 자동화를 위한 yml 파일을 작성하였다. 이제 작업물을 <code class="language-plaintext highlighter-rouge">pull request</code>를 열거나 종료하면, 빌드와 테스트 작업 혹은 빌드와 테스트 및 배포 작업이 자동화되어 실행된다.
    <ul>
      <li><a href="https://devjem.tistory.com/76">해당 게시글</a>을 참고하여 Github Actions에서 Gradle을 캐싱할 수 있도록 하였다.</li>
      <li><a href="https://velog.io/@bagt/Github-Actions를-통한-배포">해당 게시글</a>을 참고하여 AWS를 통한 배포 자동화 (CI)를 위해 빌드된 프로젝트를 미리 압축하도록 하였다.</li>
      <li>도커 이미지를 생성하는 것은 <a href="https://docs.github.com/en/actions/publishing-packages/publishing-docker-images&gt;">이 문서</a> 내용이 영문이지만 정말 좋다.
<code class="language-plaintext highlighter-rouge">pull request</code>가 열리거나 종료하는 이벤트에 대한 트리거가 있어야 하는데… 기존에는 안되었는데 <a href="https://stackoverflow.com/questions/60710209/trigger-github-actions-only-when-pr-is-merged">이 포스트</a>에 따르면 된다고 해 이를 적용하였다.</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>name: pull_request_opened

on:
  pull_request:
    types:
      - opened

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [ 17 ]

    steps:
      - name: Check Out Repository
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: $
          distribution: 'corretto'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          restore-keys: |
            $-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: Check spotless
        run: ./gradlew spotlessCheck

      - name: Build with Gradle
        run: ./gradlew build
        shell: bash
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>name: pull_request_closed

on:
  pull_request:
    types:
      - closed

jobs:
  if_merged:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [ 17 ]
    outputs:
      version: $

    steps:
      - name: Check Out The Repository
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: $
          distribution: 'corretto'

      - name: Get the version
        id: get_version
        run: |
          RELEASE_VERSION_WITHOUT_V="$(cut -d'v' -f2 &lt;&lt;&lt; ${GITHUB_REF#refs/*/})"
          echo ::set-output name=VERSION::$RELEASE_VERSION_WITHOUT_V 

      - name: Execute Gradle build
        run: ./gradlew :Api:build --no-daemon

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: $
          password: $

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ./Api
          push: true
          tags: $/$

      - name: Image digest
        run: echo $

      - name: Application Run
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: $
          username: $
          key: $

          script: |
            sudo docker stop $
            sudo docker rm -f $
            sudo docker pull $/$:latest
            
            sudo docker run -p 8080:$ \
            --name $ \
            -e SPRING_DATASOURCE_URL=$ \
            -e SPRING_DATASOURCE_USERNAME=$ \
            -e SPRING_DATASOURCE_PASSWORD=$ \
            -d $/$

            sudo docker image prune -a

      - name: gradlew permission change
        run: sudo chmod 755 gradlew

      - name: Sonaqube Analysis
        run: ./gradlew test sonarqube
          -Dsonar.host.url=$
          -Dsonar.projectKey=$
          -Dsonar.projectName=$-$
          -Dsonar.login=$
</code></pre></div></div>

<ul>
  <li>지난번 프로젝트를 진행했을 때 도커 허브에 올라온 빌드 파일을 실행했을 때 기본 Manifest 속성이 없다는 오류가 나오면서 정상적으로 작동이 되지 않는 것을 확인하였다. 찾아보니 내가 이전에 참고했던 <a href="https://gist.github.com/ihoneymon/a2ed116069af470fec0d08110604c5db">해당 게시글</a>처럼 오류를 해결한 경우도 있지만, 이 둘을 반대로 진행한 <a href="https://earth-95.tistory.com/132">이 포스트</a>와 같은 경우도 있음을 확인하였다. 왜 그럴까?
    <ul>
      <li>BootJar task와 Jar task는 빌드를 통해 jar 파일을 만드는 작업이다. 그런데 이 둘이 동시에 존재하는 이유는 Jar은 의존성이 포함되지 않고 소스 코드의 클래스 파일과 리소스 파일만 포함한 Plain Jar을, BootJar은 의존성까지 포함해 어플리케이션 실행이 가능한 executable Jar을 만들기 때문이다.</li>
      <li>그러므로, 도커 이미지에 올라간 것은 Plain Jar라 실행이 되지 않는 것이라고 추측해볼 수 있다. 그래서 이를 고려해 build.gradle 파일을 수정하였다.</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bootJar.enabled = true
jar.enabled = false
</code></pre></div></div>

<ul>
  <li>그런데 이번엔 <code class="language-plaintext highlighter-rouge">Execution failed for task ':bootJar'.</code>이란 오류가 발생했다. 프로젝트의 build.gradle 파일을 보니 application이 없는 모듈들에도 bootJar task를 실행시키는 것으로 되어 있어 수정하였다. 그리고 <code class="language-plaintext highlighter-rouge">Core</code> 모듈에서 test하는 부분 때문에 빌드가 안되는 현상이 일어나 일단 그 부분에 해당하는 클래스를 제외하였다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bootJar.enabled = false
</code></pre></div></div>

<p>여기까지가 github action에서 진행된 내용으로, 커밋에 반영된 내용이다. 그리고 아래부터는 그 외부에서 이루어진 작업들로, 솔직히 정말 오랜 시행착오가 있었는데 <a href="https://zzang9ha.tistory.com/404">이 포스트</a>가 제일 깔끔히 정리된 듯 하니 참고하면 좋을 듯 하다.</p>

<ul>
  <li>도커 허브에 저장소를 생성하고, 계정에 대한 토큰을 발급받아 GitHub 저장소에 secret key로 등록시켰다.
    <ul>
      <li><a href="https://medium.com/day34/container-repository-comparsion-dd4826f6a683">해당 포스트</a>에서는 도커 허브와 AWS ECR을 비교하고 있는데, 우리의 경우에는 필자가 조금 더 익숙한 도커 허브를 사용할 계획이다.</li>
    </ul>
  </li>
</ul>

<p><img src="https://user-images.githubusercontent.com/105341168/233852739-0dd8cb96-9cea-4d71-9721-45cec2a49cd8.png" /></p>

<ul>
  <li><a href="https://goodgid.github.io/Github-Action-CI-CD-AWS-EC2/">해당 포스트</a>와 <a href="https://bcp0109.tistory.com/356">해당 포스트</a>를 참고하여, AWS EC2를 구축하였다. EC2의 인스턴스 유형은 프리티어인 t2.micro로, 용량은 15GB로 운영 체제는 우분투로 설정하였다. (linux 기반 EC2는 자잘한 오류가 많다고 한다.)  다음은 EC2 인스턴스 생성과 관련하여 설정한 부분이다.
    <ul>
      <li>IntelliJ나 터미널 등의 SSH 클라이언트 접속을 위한 프라이빗 키 파일을 생성하였다.</li>
      <li>인스턴스에 대한 보안 그룹을 생성해, 인바운드 규칙과 아웃바운드 규칙을 지정하였다.</li>
      <li>탄력적 IP 주소를 할당받아, 이를 인스턴스에 연결하였다.</li>
      <li>IAM 역할을 변경하여 추후 연결할 데이터베이스 서버와 이미지 서버에 접근할 수 있게끔 하였다.</li>
      <li>해당 AWS RDS의 파라미터 그룹을 변경하여 저장하였다.</li>
    </ul>
  </li>
</ul>

<p><img src="https://user-images.githubusercontent.com/105341168/230702707-954aa971-fd6f-45c2-aa96-5c1fbbb7be9a.png" /></p>

<ul>
  <li>SSH에 접속하는 과정에서 <code class="language-plaintext highlighter-rouge">WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</code>라는 오류 메시지를 띄우면서, RSA 공유키 충돌 문제가 발생하였다. 그래서 <a href="https://kingsong.tistory.com/127">이 게시글</a>을 참고하여 known_hosts 파일을 지웠다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rm /root/.ssh/known_hosts 
</code></pre></div></div>

<ul>
  <li><a href="https://www.leafcats.com/168">SSH 클라이언트에 접속하여 사용자가 root 권한을 빌린다.</a></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo su
</code></pre></div></div>

<ul>
  <li><a href="https://someone-life.tistory.com/17">패키지를 최신으로 업데이트하기 위해 이에 대한 확인 및 실행을 주기적으로 한다.</a>
    <ul>
      <li>패키지를 업데이트할 때나 패키지를 설치할 때마다 계속 핑크색 화면이랑 이런저런 log가 계속 나오는 게 신경쓰여 <a href="https://chhanz.github.io/linux/2022/08/01/ubuntu-22-04-needrestart/">해당 게시글</a>을 needrestart를 제거하고, Kernel Hint와 daemon 재시작 권고 설정 역시 비활성화하였다.</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt update &amp;&amp; sudo apt upgrade
</code></pre></div></div>

<ul>
  <li>그런데 일괄적으로 업데이트가 안되는 패키지가 있길래, 업그레이드 가능한 패키지를 확인하고 이를 개별로 설치하였다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt list --upgradable
apt install &lt;패키지명&gt;
</code></pre></div></div>

<ul>
  <li>디스크별 용량을 주기적으로 확인해두자. 지난번 프로젝트를 진행할 때 이 부분을 신경 쓰지 못해서 EC2를 한번 지워야 하는 경우가 있었다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>df -h
</code></pre></div></div>

<ul>
  <li>AWS 서비스를 관리할 수 있도록 AWS CLI를 설치하였다. 이전에 IAM 역할을 잘 변경했다면, s3나 rds 명령어도 잘 작동될 것이다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt install awscli
</code></pre></div></div>

<ul>
  <li>SpringBoot 프로젝트를 빌드할 수 있도록 JDK를 설치하였다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt install openjdk-17-jdk
java -version
javac -version
</code></pre></div></div>

<ul>
  <li>추가로 <code class="language-plaintext highlighter-rouge">vim ~/.bashrc</code>으로 JDK의 환경변수를 설정하고, <code class="language-plaintext highlighter-rouge">source ~/.bashrc</code>로 이를 적용하였다. (변경된 내용은 <code class="language-plaintext highlighter-rouge">echo $JAVA_HOME</code>로 확인해볼 수 있다.)</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))
export PATH=$PATH:$JAVA_HOME/bin
</code></pre></div></div>

<ul>
  <li>아래의 명령어를 이용하여 도커를 설치하였는데, <code class="language-plaintext highlighter-rouge">Job for docker.service failed because the control process exited with error code</code>라는 오류가 발생하면서 도커가 실행되지 않아 <a href="https://dct-wonjung.tistory.com/entry/Docker-failed-control-process-exited-오류-해결">해당 게시글</a>을 통해 해결하였다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt install docker.io 
systemctl start docker
systemctl enable docker
</code></pre></div></div>

<ul>
  <li>이전에 프리티어가 메모리가 1기가밖에 안되어 소나큐브를 실행만 하면 계속 튕기는 일이 발생하였다. 사실 이런 일은 처음이라 감도 못 잡았다가 <a href="https://velog.io/@seungju0000/ec2-stop">이 게시글</a>로 어떤 일이 벌어지는지 대충이나마 이해하게 되었다. 그래서 이번에는 <a href="https://kth990303.tistory.com/361">해당 게시글</a>로 Swap File을 이용해 EC2 메모리 부족 현상을 해결해보고자 하였다.
    <ul>
      <li>스왑된 메모리는 <code class="language-plaintext highlighter-rouge">free</code> 명령어로 확인해볼 수 있다.</li>
      <li><code class="language-plaintext highlighter-rouge">top</code> 명령어로 메모리 할당량을 프로세스 별로 확인해볼 수 있다.</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dd if=/dev/zero of=/swapfile bs=128M count=16
chmod 600 /swapfile
mkswap /swapfile
swapon /swapfile
</code></pre></div></div>

<ul>
  <li>스왑된 메모리가 자동으로 마운트가 가능할 수 있도록 <code class="language-plaintext highlighter-rouge">vi /etc/fstab</code>으로 <code class="language-plaintext highlighter-rouge">/etc/fstab</code> 파일의 맨 밑줄에 해당 명령어를 작성하였다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/swapfile swap swap defaults 0 0
</code></pre></div></div>

<ul>
  <li>그리고 톰캣을 설치하였는데, <a href="https://velog.io/@bonjaski0989/AWS-EC2-Linux-환경에서-톰캣-설치하기">이 게시글</a>에 잘 정리되어 있어 이를 그대로 작업하였다. (아, JAVA 환경변수는 이미 설정하였으므로 해당 부분만 제외하였다.)
    <ul>
      <li>톰캣을 매번 재시작할 수 있도록 <a href="https://velog.io/@bonjaski0989/EC2-Tomcat-서비스-등록">이 게시글</a>을 참고하였는데, 스크립트를 실행하는 과정에서 <code class="language-plaintext highlighter-rouge">files have no installation config</code>라는 오류가 발생하였다. 구글링해본 결과 Install 섹션을 활성화해야 한다고 하여 아래의 내용을 스크립트 파일에 추가하였다.</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Install]
WantedBy=multi-user.target
</code></pre></div></div>

<ul>
  <li>여러 개의 도커 컨테이너의 실행을 한 번에 관리할 수 있도록 도커 컴포즈를 설치하였다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

docker-compose --version
</code></pre></div></div>

<ul>
  <li>도커로 SonarQube를 설치하였다. (사실 도커로 설치하지 않고 sonarqube를 설치한다면 아래의 작업들을 모두 진행해야 한다. 왜 아냐고? 다 했으니까… 근데 내가 설치한 자바 버전이랑 차이가 있어서 계속 오류가 났다.)
    <ul>
      <li>Java 설치, 환경설정</li>
      <li>DB 설치</li>
      <li>SonarQube에서 요구하는 DB table 생성</li>
      <li>DB 계정 생성 및 권한설정</li>
      <li>SonarQube 설치</li>
      <li>SonarQube에 DB 정보 설정</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 sonarqube
</code></pre></div></div>

<ul>
  <li>그리고 이에 맞춰 Github workflow를 수정하였는데, <code class="language-plaintext highlighter-rouge">Permission denied(public key)</code>라는 문구를 띄우면서 Github Actions이 제대로 동작하지 않아 여러 커밋을 보냈다. 근데 원인은 Actions secrets and variables를 잘못 작성한 것이였다; 꼭, -BEGIN-와 -END- 부분도 지우지 말고 넣자.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-----BEGIN OPENSSH PRIVATE KEY-----
...
-----END OPENSSH PRIVATE KEY-----
</code></pre></div></div>

<ul>
  <li><a href="https://bcp0109.tistory.com/357">해당 포스트</a>를 참고하여, 아래 이미지와 같이 EC2에 연결할 데이터베이스를 위해 AWS RDS를 구축하였다.
    <ul>
      <li>해당 RDS의 RDBMS는 MysSQL로 설정하였다.</li>
    </ul>
  </li>
  <li>EC2와 RDS의 연동을 위해 <a href="https://hiseon.me/linux/ubuntu/ubuntu-mysql-install/">해당 게시글</a>을 참고하여, EC2에 mysql-client를 설치하였다. 아래 이미지는 <code class="language-plaintext highlighter-rouge">sudo mysql_secure_installation</code>로 mysql를 초기화하였을 때 나오는 초기 설정으로, 래퍼런스가 정리되어 있지 않길래 나중에 필요할 때 확인할 수 있도록 첨부하였다.</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/105341168/230704131-ee09fe07-d135-49fa-b2df-b24341ec6f5d.png" /></p>

<ul>
  <li>mysql-client를 통해 EC2에서 RDS에 원격으로 접속되는 것까지 확인하였다.</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/105341168/230704595-aa3b5417-85f2-4ba9-aa8a-20a83d9746e1.png" /></p>

<ul>
  <li>그리고 ECR에 연결되는 거는 잘 되는데, 외부 접속이 계속 안되서 정말 머리깨지는 줄 알았다. 내가 해주고 싶은 말은, <a href="https://gksdudrb922.tistory.com/240">꼭 라우팅 테이블을 확인하자.</a></li>
</ul>

<p><img src="https://user-images.githubusercontent.com/105341168/233852570-41bb4a68-9448-4dcd-8e14-116a80c37eed.png" /></p>

<ul>
  <li>추가로 GitHub Actions 또한 이를 반영해 동작하게 하기 위해, <a href="https://chb2005.tistory.com/191">해당 포스트</a>를 참고하여 yml 파일을 수정하였다.</li>
</ul>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="vocawik" /><summary type="html"><![CDATA[#10. init: github action 설정]]></summary></entry><entry><title type="html">[vocawik] 04/19 진행 내용</title><link href="http://localhost:4000/vocawik/vcw3/" rel="alternate" type="text/html" title="[vocawik] 04/19 진행 내용" /><published>2023-04-19T00:00:00+09:00</published><updated>2023-04-19T00:00:00+09:00</updated><id>http://localhost:4000/vocawik/vcw3</id><content type="html" xml:base="http://localhost:4000/vocawik/vcw3/"><![CDATA[<h2 id="3-init-멀티모듈-세팅"><a href="https://github.com/pocj8ur4in/vw-backend/commit/37de95d9208b2ba4a1877a70cf3b2b4e8235f801">#3</a>. init: 멀티모듈 세팅</h2>

<p>프로젝트의 내부를 기존의 root 모듈에 sub 모듈인 api, batch, core, domain, infrastructure, socket 모듈을 포함시킨 멀티모듈 구조로 변경하였다.</p>

<ul>
  <li>sub 모듈들을 하나의 디렉토리에서 관리할 수 있도록 <code class="language-plaintext highlighter-rouge">settings.gradle</code> 파일을 작성하였다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rootProject.name = 'vw-backend'
include 'vw-api'
include 'vw-batch'
include 'vw-core'
include 'vw-domain'
include 'vw-infrastructure'
include 'vw-socket'
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">build.gradle</code>에 subprojects와 allprojects 블록을 추가해 하위 모듈과 전체 모듈을 제어할 수 있도록 하였다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>allprojects{
    repositories {
        mavenCentral()
    }
}

subprojects {
    group = 'vocawik'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'

    dependencies {

    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }
}
</code></pre></div></div>

<ul>
  <li>반복된 코드를 어노테이션으로 자동완성하는 lombok 라이브러리를 사용하기 위해 subprojects에 의존성을 추가하였다.</li>
  <li>스프링 어플리케이션에서 Junit 기반 테스트가 가능하도록 subprojects에 의존성을 추가하였다.</li>
  <li><a href="https://jundragon.tistory.com/9">해당 포스트</a>를 참고해 lombok을 테스팅 환경에서 사용할 수 있도록 subprojects에 의존성을 추가하였다.</li>
  <li>JUnit5 API를 테스팅 환경에서 사용할 수 있도록 subprojects에 의존성을 추가하였다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    }
</code></pre></div></div>

<ul>
  <li><a href="https://math-coding.tistory.com/158">해당 포스트</a>를 참고해 Java 단위 테스트를 위한 JUnit5 프레임워크를 위해 <code class="language-plaintext highlighter-rouge">build.gradle</code>을 변경하였다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tasks.named('test') {
        useJUnitPlatform()
}
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Task 'wrapper' not found in project ':project'</code> 오류를 해결하고자, <a href="https://hororolol.tistory.com/546">해당 포스트</a>를 참고하여 <code class="language-plaintext highlighter-rouge">build.gradle</code>의 subprojects에서 gradle wrapper를 사용해서 빌드 환경을 맞추었다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>task wrapper(type: Wrapper) {
    gradleVersion = '4.4'    
    distributionUrl = distributionUrl.replace("bin", "all")
}
</code></pre></div></div>

<ul>
  <li>위의 오류를 해결하는 과정에서 <code class="language-plaintext highlighter-rouge">Cannot add task 'wrapper' as a task with that name already exists</code> 오류가 발생해, <a href="https://taegyunum.tistory.com/entry/Cannot-add-task-wrapper-as-a-task-with-that-name-already-exists">해당 포스트</a>를 참고하여 <code class="language-plaintext highlighter-rouge">build.gradle</code>의 subprojects에서 gradle wrapper 형식을 변경하였다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wrapper {
        gradleVersion = '4.4'
        distributionUrl = distributionUrl.replace("bin", "all")
}
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">:prepareKotlinBuildScriptModel Task fails in a Java project</code> 오류를 해결하고자, <a href="https://charactermail.tistory.com/351">해당 포스트</a>를 참고하여 <code class="language-plaintext highlighter-rouge">build.gradle</code>의 subprojects에서 <code class="language-plaintext highlighter-rouge">prepareKotlinBuildScriptModel</code>을 새로운 task로 추가하였다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tasks.register("prepareKotlinBuildScriptModel"){}
</code></pre></div></div>

<h2 id="4-init-spotless-적용"><a href="https://github.com/pocj8ur4in/vw-backend/commit/30d811bfeabefb5f35aaa0876d799ae563b85b7c">#4</a>. init: spotless 적용</h2>

<p>Junit에 대한 코드 포맷팅 및 유지보수를 위해 <a href="https://nesoy.github.io/articles/2020-04/Spotless">해당 게시글</a>을 참고해 spotless 플러그인을 추가하였다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>id "com.diffplug.spotless" version "6.16.0"
</code></pre></div></div>

<ul>
  <li>sub 모듈에서도 spotless 플러그인이 적용되도록 <a href="https://keelim.tistory.com/entry/안드로이드-멀티-모듈-공통-gradle-그리고-ktlint-적용을-해보자">해당 게시글</a>을 참고해 <code class="language-plaintext highlighter-rouge">spotless.gradle</code> 파일을 생성하였다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spotless {
    version = "6.16.0"

    java {
        // 특정 파일에만 적용
        target("**/*.java")

        // import 순서 정의
        importOrder()

        // 사용하지 않는 import 제거
        removeUnusedImports()

        // 구글 자바 포맷 적용
        googleJavaFormat().aosp()

        // 공백 제거
        trimTrailingWhitespace()

        // 끝부분 New Line 처리
        endWithNewline()
    }
}
</code></pre></div></div>

<ul>
  <li>그리고 sub 모듈에서도 spotless 플러그인이 적용될 수 있도록 root 모듈에 <code class="language-plaintext highlighter-rouge">spotless.gradle</code> 파일을 적용시켰다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apply from: "$rootDir/spotless.gradle"
</code></pre></div></div>

<h2 id="5-init-git-hook과-gradle을-통한-spotless-자동화"><a href="https://github.com/pocj8ur4in/vw-backend/commit/11cc84e6582621c90c698d3fdce67f41427897b4">#5</a>. init: git hook과 gradle을 통한 spotless 자동화</h2>

<p>앞서 spotless를 적용하긴 했는데, spotless를 실행하는 것은 코드를 작성하고 이를 커밋하는 과정에서 까먹기 쉬운 작업이다. 그래서 <a href="https://techblog.woowahan.com/2530/">이 게시글</a>처럼 git hook으로 커밋을 하기 전에 spotless를 적용하는 것을 자동화하였다.<br /></p>

<p>그런데 .git는 처음에 .gitignore을 통해 제외하기로 한 디렉토리이다. 나 혼자 작업을 진행한다면 위의 내용으로 충분하겠지만, 협업에서는 모두가 같은 내용을 적용하는 것이 중요하다. 그래서 root에 pre-commit 파일을 두고, gradle task를 이용해 빌드가 이루어질 때 pre-commit 파일을 .git에 이동하는 것을 추가하였다.</p>

<h2 id="6-init-모듈-내-applicationyml-세팅"><a href="https://github.com/pocj8ur4in/vw-backend/commit/c70a1f7745384d0b2a209c079023b24df2a0874a">#6</a>. init: 모듈 내 application.yml 세팅</h2>

<p><a href="https://tecoble.techcourse.co.kr/post/2022-10-04-active_profiles/">해당 게시글</a>을 참고하여 이전에 설장한 멀티모듈 내에 프로퍼티 설정을 관리하고 환경변수를 주입할 수 있는 application.yml 파일을 생성하였다.</p>

<h2 id="7-init-swagger3-적용"><a href="https://github.com/pocj8ur4in/vw-backend/commit/311e740cff2a31a07bce721140928114a0295501">#7</a>. init: swagger3 적용</h2>

<p><a href="https://velog.io/@dnwlsrla40/Swagger-Swagger3">해당 포스트</a>의 내용을 참고하여, REST 웹 서버로 요청되는 URL 리스트를 문서화 및 테스트 할 수 있는 Swagger3를 Api 모듈 내에 도입하였다.</p>

<ul>
  <li>Spring Boot 2.6 이상의 환경에서 Springfox3가 실행되지 않는 오류가 발생했다. 개발자 포럼에서도 자주 언급되는 유명한 이슈인데, 아직까지도 해결되지 않았다고 한다. Spring Boot 버전을 2.6 이하로 낮추는 것이 제일 안전한 방법이겠지만, 다른 해결책이 없나 구글링해보았더니 <a href="https://shanepark.tistory.com/366">이 포스트</a>에서 @EnableSwagger2 어노테이션 대신 @EnableWebMvc 어노테이션을 이용해 문제를 해결하길래 나도 적용해서 해결했다.
    <ul>
      <li>그런데 @EnableWebMvc 어노테이션을 추가하는 건 어떤 의미를 가질까? 라는 질문에 <a href="https://goodgid.github.io/Spring-Enable-MVC-Annotation/">해당 포스트</a>의 내용을 참고해 답변해본다면, @EnableWebMvc는 Spring 프레임워크에서 여러 Config 값을 알아서 설정해주는데 아래의 오류를 일으키는 this.condition 부분도 알아서 설정해주는 것 같다.</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Caused by: java.lang.NullPointerException:
Cannot invoke "org.springframework.web.servlet.mvc.
condition.PatternsRequestCondition.getPatterns()"
because "this.condition" is null
</code></pre></div></div>

<ul>
  <li><a href="http://localhost:8080/swagger-ui/index.html">http://localhost:8080/swagger-ui/index.html</a>로 접속해보면 Swagger 페이지가 정상적으로 출력된다.</li>
</ul>

<h2 id="8-init-jacoco-설정"><a href="https://github.com/Hongik-Challenge/hc-backend/commit/a10ebd2a12774c3a40484d6bf76c26f265180a41">#8</a>. init: Jacoco 설정</h2>

<p><a href="https://seller-lee.github.io/java-code-coverage-tool-part2">해당 게시글</a>을 참고해 sub 모듈에 코드 커버리지 도구인 Jacoco를 도입하였다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.9'
}
</code></pre></div></div>

<ul>
  <li>추후 SonarQube의 연동을 위해 jacocoTestReports task를 설정하였다. html, csv, xml 형태로 저장할 수 있게 해주고, xml 파일은 저장하는 경로를 다르게 설정하였다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jacocoTestReport {
    dependsOn test
    reports {
        html.enabled true
        csv.enabled true
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco.xml")
    }
}
</code></pre></div></div>

<ul>
  <li>원하는 코드 커버리지를 설정하고, 커버리지를 만족하는지 여부를 확인하는 데에 쓰이는 jacocoTestCoverageVerification task를 설정하려 했으나 커버리지를 만족시키기 위해 설정해야 하는 기준을 판단하기 어려워 일단 이 내용은 코드에서 제외하였다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.90
            }

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 200
            }
        }
    }
}
</code></pre></div></div>

<ul>
  <li>추가로 QueryDSL가 자동으로 생성하는 QDomain 클래스를 코드 커버리지에서 제외하였다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jacocoTestCoverageVerification {
    def Qdomains = []

    for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
        Qdomains.add(qPattern + '*')
    }
}
</code></pre></div></div>

<ul>
  <li>그런데 <code class="language-plaintext highlighter-rouge">./gradlew test --console verbose</code>으로 실행해도 빌드가 성공하지 않았는데, jacoco의 버전을 올려보라는 <a href="https://stackoverflow.com/questions/53911122/how-to-fix-error-while-creating-report-jacoco">답변</a>을 적용해 해결하였다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jacoco {
    toolVersion = '0.8.7' -&gt; '0.8.9'
}
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/105341168/230381060-a2972bf0-8abb-4c92-b493-d19c3912106d.png" /></p>

<h2 id="9-init-sonarqube-적용"><a href="https://github.com/pocj8ur4in/vw-backend/commit/5dc906b6d60e13cbcf0c093afad66cb0c5c9cfb3">#9</a>. init: sonarqube 적용</h2>
<p><a href="https://kdevkr.github.io/static-analysis-performed-by-sonarqube-and-github-action/#소나큐브-시스템-구성">해당 게시글</a>을 참고해, Jacoco와 비슷한 코드 커버리지 도구인 sonarqube를 프로젝트 내에 도입하였다.</p>

<ul>
  <li>풀 리퀘스트가 종료되면서 개발 서버에 빌드 파일이 배포되기 전에 소나큐브가 실행되는 것을 목표로 하므로, 차후 작성된 github action에 이를 반영할 것이다.</li>
</ul>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="vocawik" /><summary type="html"><![CDATA[#3. init: 멀티모듈 세팅]]></summary></entry><entry><title type="html">[vocawik] 04/18 진행 내용</title><link href="http://localhost:4000/vocawik/vcw2/" rel="alternate" type="text/html" title="[vocawik] 04/18 진행 내용" /><published>2023-04-18T00:00:00+09:00</published><updated>2023-04-18T00:00:00+09:00</updated><id>http://localhost:4000/vocawik/vcw2</id><content type="html" xml:base="http://localhost:4000/vocawik/vcw2/"><![CDATA[<h2 id="1-init-git-저장소-생성"><a href="https://github.com/pocj8ur4in/vw-backend/commit/4384ad841da379a51f6561c15c993395d6cdaad8">#1</a>. init: git 저장소 생성</h2>

<p>먼저 작업물의 변경점과 버전을 관리하는 버전 관리 시스템 (VCS; Version Control System)을 도입할 것이다. 변경점 관리를 통해 협업하는 과정에서 누가 어떤 내용을 언제 수정했는지 확인할 수 있고, 버전 관리를 통해 작업하는 과정에서 작업물의 백업과 복구를 간편하게 수행할 수 있다. 여기서는 배포할 코드와 작업할 코드를 나눠 프로젝트를 진행할 수 있는 브랜치 (branch) 개념이 있고 대부분의 개발자에게 이미 익숙할 git을 사용하겠다.</p>

<ul>
  <li>.git 디렉터리를 생성하였다.</li>
  <li>git이 관리하지 않을 파일을 지정하기 위해 .gitignore 파일을 생성하고, 그 내용은 <a href="https://www.toptal.com/developers/gitignore">gitignore.io</a>을 참고해 작성하였다.</li>
</ul>

<p>추가로 협업에서의 원활한 의사소통을 위한 commit message convention을 정하여, git에 커밋하는 메시지 제목과 내용에 반영하고자 한다. <a href="https://udacity.github.io/git-styleguide/">유다시티 커밋 메시지 스타일 가이드</a>를 참고해 아래의 원칙을 정하였다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- message structure
  - type: subject
  - body

- type
  - init : 초기 업무
  - chore : 빌드 업무 및 패키지 매니저 수정
  - feat : 새로운 기능 도입
  - fix : 버그 수정
  - docs : 문서 수정
  - style : 코드 포맷팅 (크드 변경이 없는 경우)
  - refactor : 코드 리펙토링
  - test : 테스트 코드 추가

- subject
  - 제목에 해당하는 subject는 현재시제로 50자 내외에서 작성한다.

- body
  - 본문에 해당하는 body는 부연설명이 필요한 경우에만 작성한다.
</code></pre></div></div>

<p>그리고 Git 원격 저장소를 웹에 호스팅하는 서비스인 Git 웹 호스팅 서비스를 도입할 것이다. 이를 통해 협업하는 과정에서 작업 내용을 빠르게 공유하고, webhook 기능을 통해 pull이나 pull request 같은 이벤트에 반응하여 작업이 실행되게 할 수 있다. 여기서는 데비옵스 (DevOps) 파이프라인 자동화 툴인 Github Actions나 업무의 생성, 진행상황, 해결을 추적하는 이슈 트래커 툴인 Github Issue 등의 서비스를 지원하고 대부분의 개발자에게 이미 익숙할 <a href="https://github.com">github</a>를 사용하겠다.</p>

<ul>
  <li>github 계정에 프로젝트를 저장할 원격 저장소를 만들고, 로컬 저장소의 내용을 원격 저장소에 푸시하였다.</li>
</ul>

<h2 id="2-init-프로젝트-생성"><a href="https://github.com/pocj8ur4in/vw-backend/commit/c5cf75b5278c58afeca30d7f31239db7518c9b83">#2</a>. init: 프로젝트 생성</h2>

<p>이제 웹 어플리케이션을 구현하기 위한 기술을 정할 차례이다. 사실 이 부분은 개발자 조직과 비즈니스 기획을 고려해 의사결정을 해야 하는 게 맞겠지만, 나에게 러닝커브가 적고 라이브러리 및 래퍼런스가 많이 존재하는 Java를 프로그래밍 언어로, Spring Boot를 웹 프레임워크로, Gradle을 의존성 관리 도구로 사용할 계획이다.</p>

<ul>
  <li>Gradle을 빌드하기 위한 <code class="language-plaintext highlighter-rouge">build.gradle</code> 파일의 plugins와 repositories를 작성하였다. .gradle 파일을 작성하는 방법은 <a href="https://velog.io/@appti/series/gradle">해당 포스트</a>와 <a href="https://araikuma.tistory.com/category/IT%20개발/Gradle">해당 포스트</a>를 참고하였다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.10'
    id 'io.spring.dependency-management' version '1.1.0'
}

repositories {
    mavenCentral()
}
</code></pre></div></div>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="vocawik" /><summary type="html"><![CDATA[#1. init: git 저장소 생성]]></summary></entry><entry><title type="html">[Github Pages] 4. Github Pages 블로그 개설</title><link href="http://localhost:4000/github%20pages/blog4/" rel="alternate" type="text/html" title="[Github Pages] 4. Github Pages 블로그 개설" /><published>2023-04-03T00:00:00+09:00</published><updated>2023-04-04T00:00:00+09:00</updated><id>http://localhost:4000/github%20pages/blog4</id><content type="html" xml:base="http://localhost:4000/github%20pages/blog4/"><![CDATA[<blockquote>
  <p>이 내용은 작년 9월 말부터 작성한 Minimal Mistakes으로 Github Blog 만들기’의 내용 일부분을 재구성한 것이다. 해당 포스트도 완성도 있는 글이고, 처음 블로그를 설정하시는 분들 또한 도움을 얻을 것이라 생각되나 그때쯤 작성한 글들 대부분이 너무 나열식으로 쓰였고, 출처에 대한 언급이 많이 부실해 (모르는 부분이 있어 찾으려 하면 출처가 없어서 나도 찾지 못한다…), 부족한 점들을 보완하기 위해 다시 작성되었다.<br />
그리고 현재 작성자의 실행 환경의 OS가 MacOS임을 미리 밝혀둔다. 아마 근시일 내에는 기기를 바꿀 계획이 없으니, 동일한 OS를 사용하시는 분들은 그대로 진행해주시면 된다.</p>
</blockquote>

<h2 id="1-ruby-설치">1. Ruby 설치</h2>
<p>macOS는 Ruby가 기본적으로 설치되어 있으니, 터미널을 실행하고 다음 명령어를 입력해 Ruby의 설치 여부를 확인한다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ruby -v
// ruby X.X.X 출력 : 정상 설치
// "zsh: command not found: ruby" 출력 : 설치 오류
</code></pre></div></div>

<h2 id="2-jekyll-설치">2. Jekyll 설치</h2>
<p>터미널 창에 gem install 명령어를 입력해 Jekyll을 설치한다. 참고로 gem은 분산 패키지로, 라이브러리의 작성, 공개, 설치를 도와주는 시스템이다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem install jekyll
</code></pre></div></div>

<p>그리고 터미널 창에 다음 명령어를 입력해 Jekyll가 정상적으로 설치되었는지 확인한다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jekyll -v
// jekyll X.X.X 출력 : 정상 설치
// "zsh: command not found: jekyll" 출력 : 설치 오류
</code></pre></div></div>

<h2 id="3-jekyll-theme-선택">3. Jekyll theme 선택</h2>
<p>이전 포스트에서 Jekyll은 레이아웃에 해당하는 templates과 컨텐츠에 해당하는 contents를 합쳐 HTML 문서로 미리 빌드해 저장하고, 이를 방문자에게 보여준다고 설명한 바 있다. 그런데 대부분의 블로거들은 레이아웃의 중요성은 알지만 이를 어떻게 구성해야할지 몰라 막막할 것이다. 그런 블로거들을 위해 존재하는 것이 Jekyll theme이다.<br /></p>

<p>Jekyll theme은 다른 사람들이 미리 작업해놓은 templates으로, 많은 Jekyll theme들이 무료로 공개되어 있다. 무료 Jekyll 중에 사람들이 많이 사용하는 것이 <a href="https://mmistakes.github.io/minimal-mistakes/">minimal-mistakes</a>이다. 간결하고 깔끔한 디자인과 꾸준한 업데이트, 그리고 무엇보다 엄청난 양의 한글 래퍼런스 (…)로 인해 나 역시도 minimal-mistakes을 기반으로 블로그를 개설하였기에, 앞으로 진행할 블로그 개설 역시 minimal-mistakes를 기반으로 진행한다.<br /></p>

<p>먼저 <a href="https://github.com/mmistakes/minimal-mistakes">minimal-mistakes Github 페이지</a>에서 <code class="language-plaintext highlighter-rouge">.zip</code> 파일을 다운로드한 후 압축을 해제한다. 그리고 아래 사진을 참고하여 필요한 파일 및 디렉토리만 남기고 나머지는 삭제한다. (아, 기존에 존재하지 않는 <code class="language-plaintext highlighter-rouge">_post</code>와 <code class="language-plaintext highlighter-rouge">_page</code> 디렉토리는 추후에 사용할 예정이니 미리 생성해두자.)</p>

<p><img width="228" alt="blog1-1" src="https://user-images.githubusercontent.com/105341168/229804167-bbb75af4-6ec4-4683-9753-0f2cbf7d97bb.png" /></p>

<h2 id="4-로컬에서-웹-호스팅">4. 로컬에서 웹 호스팅</h2>
<p>터미널 창에 다음 명령어를 입력해 Gemfile을 설치하기 위한 bundler를 사용해보자. 그러면 <code class="language-plaintext highlighter-rouge">.jekyll-cache</code> 폴더와 <code class="language-plaintext highlighter-rouge">Gemfile.lock</code> 파일이 생성된다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem install bundler
</code></pre></div></div>

<p>bundler 설치가 완료되면, 터미널 창에 다음 명령어를 입력해 Gemfile을 검사해 필요한 목록을 설치할 수 있다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle install
</code></pre></div></div>

<p>이제 터미널 창에 다음 명령어를 입력하여 블로그를 로컬에서 호스팅해보자.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle exec jekyll serve
</code></pre></div></div>

<p><a href="http://127.0.0.1:4000">http://127.0.0.1:4000</a>으로 접속하면 minimal-mistakes이 적용된 블로그 화면을 확인할 수 있다.</p>

<h2 id="4-github-pages에서-웹-호스팅">4. GitHub Pages에서 웹 호스팅</h2>

<p>이제 Github에 <code class="language-plaintext highlighter-rouge">(Github ID).github.io</code>의 형식으로 원격 저장소를 생성하자. 다음은 내 블로그가 저장된 원격 저장소 이미지이다.</p>

<p><img width="535" alt="blog1-2" src="https://user-images.githubusercontent.com/105341168/229810964-1fb40be8-4fc9-4949-89b2-1eb4b77fa0ff.png" /></p>

<p>그리고 지금까지 정리한 내용들을 포함한 디렉터리를 github에 push하면, <code class="language-plaintext highlighter-rouge">https://(Github ID).github.io</code>를 주소로 하는 블로그가 생성된 것을 확인해볼 수 있다. 그리고 <code class="language-plaintext highlighter-rouge">https://github.com/(Github ID)/(Github ID).github.io/actions</code>에서 블로그가 빌드된 기록을 확인할 수 있다. 만약 원격 저장소에서 푸시된 내용에 대한 빌드 작업이 실패한다면, 그 내용의 배포가 진행되지 않은 것을 확인해볼 수 있다.</p>

<blockquote>
  <p>Reference</p>
  <ul>
    <li>SW developer 님이 작성하신, <a href="https://devinlife.com/howto/">GitHub Pages 블로그 따라하기</a></li>
  </ul>
</blockquote>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="Github Pages" /><summary type="html"><![CDATA[이 내용은 작년 9월 말부터 작성한 Minimal Mistakes으로 Github Blog 만들기’의 내용 일부분을 재구성한 것이다. 해당 포스트도 완성도 있는 글이고, 처음 블로그를 설정하시는 분들 또한 도움을 얻을 것이라 생각되나 그때쯤 작성한 글들 대부분이 너무 나열식으로 쓰였고, 출처에 대한 언급이 많이 부실해 (모르는 부분이 있어 찾으려 하면 출처가 없어서 나도 찾지 못한다…), 부족한 점들을 보완하기 위해 다시 작성되었다. 그리고 현재 작성자의 실행 환경의 OS가 MacOS임을 미리 밝혀둔다. 아마 근시일 내에는 기기를 바꿀 계획이 없으니, 동일한 OS를 사용하시는 분들은 그대로 진행해주시면 된다.]]></summary></entry><entry><title type="html">[Github Pages] 3. Github Pages 블로그 소개</title><link href="http://localhost:4000/github%20pages/blog3/" rel="alternate" type="text/html" title="[Github Pages] 3. Github Pages 블로그 소개" /><published>2023-04-02T00:00:00+09:00</published><updated>2023-04-02T00:00:00+09:00</updated><id>http://localhost:4000/github%20pages/blog3</id><content type="html" xml:base="http://localhost:4000/github%20pages/blog3/"><![CDATA[<blockquote>
  <p>사실 이전 포스트에서 Github Pages에 대한 내용이 있어 좀 중복되는 느낌이 들 수도 있다. 하지만, 이 포스트에서는 Github Pages의 원리를 짚어보고자 작성한 것이니 혹시 모르는 사람들은 한번 읽어보자.</p>
</blockquote>

<h2 id="github-pages-블로그란">Github Pages 블로그란?</h2>

<p><img src="https://user-images.githubusercontent.com/105341168/229191108-c3f52e0c-4b2b-46af-9e07-5c59bd89183d.jpeg" alt="image" /></p>

<h3 id="정적-웹사이트-생성기-ssg-static-site-generator">정적 웹사이트 생성기 (SSG; Static Site Generator)</h3>

<p>많은 사람들이 Github Pages로 블로그를 사용하고 있어 이를 블로그 서비스로 인식하기 쉽지만, 사실 Github Pages는 Github에서 제공하는 정적 웹 사이트 호스팅 서비스이다. 그리고 정적 웹 사이트 호스팅 서비스를 가능하게 하는 것이 바로 SSG이다.<br /></p>

<p>SSG로 생성된 사이트는 모든 웹 페이지를 미리 생성하고, 방문자로부터 요칭이 들어오면 미리 만든 웹 페이지를 그대로 응답해준다. 그러므로 서버와 클라이언트 모두 렌더링을 위한 작업이 거의 없기 때문에, SSG로 생성된 웹 사이트는 속도가 매우 빠른 장점을 가진다. 그리고 SSG로 생성된 사이트는 미리 만들어놓은 수많은 웹 페이지로 이루어져 있는 구조라 검색엔진 최적화 (SEO; Search Engine Optimization)가 뛰어나 검색엔진이 사이트를 크롤링하는 데에 적합하다.<br /></p>

<p>그러나 빌드할 때마다 모든 웹 페이지를 생성하는 작업을 매번 하다보니, 컨텐츠를 자주 업데이트하는 웹 사이트나 규모가 커 빌드 시간이 오래 걸리는 웹 사이트에서는 큰 비효율성이 발생해 SSG보다는 다른 렌더링 기술을 사용한다. 그래서 SSG는 개인 블로그와 같이 컨텐츠의 변경이 자주 일어나지 않은, 소규모 웹 사이트를 제작할 때 많이 쓰이는 기술이다. (SSG 외에도 SPA, SSR과 같은 렌더링 기술이 있는데, 달레 님께서 <a href="https://www.daleseo.com/spa-ssg-ssr/">SPA와 SSG, 그리고 SSR</a>이라는 글에서 잘 정리해주셨으니 참고하길 바란다.)<br /></p>

<p>지금 현재 내가 사용하고 있는 Github Pages 테마인 <a href="https://mmistakes.github.io/minimal-mistakes/">Minimal Mistakes</a>는 Jekyll을 정적 웹사이트 생성기로 사용해 웹 사이트를 정적으로 생성한다. Jekyll 외에도 Hexo, Hugo와 같은 여러 정적 웹사이트 생성기들이 존재하는데, 이들을 간단하게 비교해보자.</p>

<ul>
  <li><a href="https://jekyllrb-ko.github.io">Jekyll</a>
    <ul>
      <li>Ruby 기반</li>
      <li>가장 많이 쓰이고, 한글 래퍼런스 많음</li>
      <li>Github Pages에서 공식으로 지원 : push한 글들이 별도의 빌드 과정 없이 알아서 Publish</li>
      <li>글이 많아질수록 전체 빌드 속도가 느려짐
<br /><br /></li>
    </ul>
  </li>
  <li><a href="https://hexo.io/ko/index.html">Hexo</a>
    <ul>
      <li>Node.js (javascript) 기반</li>
      <li>(javascript를 써서 그런지) 한글 래퍼런스 많음</li>
      <li><a href="https://www.holaxprogramming.com/2017/04/16/github-page-and-hexo/">Hexo로 블로그를 만들 때 참고할 만한 글</a>
<br /><br /></li>
    </ul>
  </li>
  <li><a href="https://gohugo.io">Hugo</a>
    <ul>
      <li>Golang 기반</li>
      <li>런타임에 다른 의존성이 필요하지 않아, 빌드 과정을 포함해도 빌드 속도가 빠른 편</li>
      <li>한글 래퍼런스는 상대적으로 적음</li>
      <li><a href="https://github.com/Integerous/Integerous.github.io">Hugo로 블로그를 만들 때 참고할 만한 글</a>
<br /><br /></li>
    </ul>
  </li>
</ul>

<h3 id="지킬-jekyll">지킬 (Jekyll)</h3>

<p><img src="https://user-images.githubusercontent.com/105341168/229413193-0534897e-6fdc-4c1a-888e-8e2e011045c5.jpg" alt="jekyll-logo" /></p>

<p>사실 SSG 중에 Jekyll이 좋은 거 같아 골랐다기보단, Minimal Mistakes 테마가 내 마음에 들어서 설치했는데 구글링해보니 다들 Jekyll을 쓰더라…의 흐름으로 쓰게 된 거고, Jekyll 말고도 다른 SSG가 있는 것을 알게 된 이후에도 어차피 다 같은 SSG인데 Jekyll 말고 굳이 다른 거를 배워서 쓸 필요성을 못 느껴서 (물론 Jekyll이 문제가 많다고 느끼면 다른 SSG를 사용할지에 대해 고민해봐야 할 것이다.) Jekyll을 계속 사용하고 있긴 하다. 일단 Jekyll이 어떤 방식으로 동작하는지 정리해보겠다. (사실 SSG와 동일한 원리인데, 이를 구체화한 것으로 생각하면 된다.)<br /></p>

<p>Jekyll은 동적 웹 사이트 (Dynamic Web Site)과 동일하게, 레이아웃에 해당하는 templates과 컨텐츠에 해당하는 contents를 분리해 저장한다. (이때 Jekyll에서 templates을 작성할 때 사용하는 언어가 Liquid이고, contents를 작성할 때 사용하는 언어가 markdown이다.) 하지만 동적 사이트와 달리, Jekyll은 templates와 contents을 합친 HTML 문서를 미리 빌드해 저장하고, 방문자가 요청을 보내면 정적 컨텐츠에 해당하는 HTML 문서를 전송한다.<br /></p>

<p>그래서 Jekyll은 웹 사이트를 운영하기 위한 HTML 관련 지식을 몰라도, .md 파일로 문서를 작성하면 HTML 파일로 이를 변환해주는 작업을 해주며 변환된 결과물을 토대로 웹 사이트를 구축해서 서비스해준다.</p>

<h3 id="깃허브-페이지-github-pages">깃허브 페이지 (Github Pages)</h3>

<p>상술하였듯 <a href="https://pages.github.com">Github Pages</a>는 Github에서 제공하는 정적 사이트 호스팅 서비스로, 무료 계정에 한해 하나의 Github Pages를 무료로 제공한다. Github Pages는 연동된 Github 저장소에서 HTML, CSS, JavaScript와 같은 정적 컨텐츠를 가져와 그대로 배포하는 방식으로 작동한다. 만약 Github 저장소가 Jekyll 디렉토리의 형태로 존재한다면, Github Pages는 해당 저장소가 Jekyll로 작성된 것임을 알고 이를 Jekyll로 빌드해 배포한다.<br /></p>

<blockquote>
  <p>Reference</p>
  <ul>
    <li>SW developer 님이 작성하신, <a href="https://devinlife.com/howto/">GitHub Pages 블로그 따라하기</a></li>
    <li>Wheel 님이 작성하신, <a href="https://heekangpark.github.io/categories#jekyll">지킬 (Jekyll)</a></li>
  </ul>
</blockquote>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="Github Pages" /><summary type="html"><![CDATA[사실 이전 포스트에서 Github Pages에 대한 내용이 있어 좀 중복되는 느낌이 들 수도 있다. 하지만, 이 포스트에서는 Github Pages의 원리를 짚어보고자 작성한 것이니 혹시 모르는 사람들은 한번 읽어보자.]]></summary></entry><entry><title type="html">[Github Pages] 2. 개발 블로그는 어디에 만들어야 하나요?</title><link href="http://localhost:4000/github%20pages/blog2/" rel="alternate" type="text/html" title="[Github Pages] 2. 개발 블로그는 어디에 만들어야 하나요?" /><published>2023-04-01T00:00:00+09:00</published><updated>2023-04-01T00:00:00+09:00</updated><id>http://localhost:4000/github%20pages/blog2</id><content type="html" xml:base="http://localhost:4000/github%20pages/blog2/"><![CDATA[<blockquote>
  <p>글을 시작하기 앞서, 이 내용은 매우 주관적인 판단이 들어간 서술이 많다. 나야 보시다시피 Github Pages를 사용하지만 다른 사람들은 여러 이유로 다양한 플랫폼을 사용할 것이고, 그 부분을 지적하거나 문제시하는 게 아님을 분명히 밝힌다. 이 글은 어디까지나 개발 블로그로 사용되는 여러 플랫폼에 대해 이야기해보는 과정을 통해 개발 블로그를 처음 만드는 개발자들이 이런 부분을 고려했으면 좋겠다, 는 취지로 작성된 것이다.</p>
</blockquote>

<h2 id="1-네이버-블로그">1. 네이버 블로그</h2>
<p><img src="https://user-images.githubusercontent.com/105341168/229186778-f25b0b7b-0f6e-482b-b2f1-ada95526a101.png" alt="1200x630wa" /></p>

<p>한때는 블로그, 하면 네이버 할 만큼 국내에서 가장 많이 쓰였던 블로그 플랫폼이다. 나도 개발 관련은 아니지만 작년까지 네이버 블로그를 운영했었다. 그런 점에서 가지는 네이버 블로그의 장점은 (국내 한정) 보편성이다. 보편적으로 쓰이는 만큼 사용자 수가 많고, 대다수가 한번씩은 네이버 블로그에 글 정도는 올려보게 되는 것이다. 그리고 이전의 올드한 디자인도 개선된 편이고 카테고리 사용도 간편하다. (개인적으로 새로 도입된 웹 에디터는 좀 불편했다.)<br /></p>

<p>하지만. 네이버 블로그의 가장 큰 문제는 구글에서 검색했을 때 노출이 되지 않는다는 것이다. 사실상 이 문제가 다른 모든 장점을 덮고도 남는다고 무방하다. 네이버라는 하나의 생태계에서 자체적으로 생산되는 컨텐츠를 검색할 수 있다는 것이 네이버 검색이 우리나라에서 널리 쓰이는 이유이겠지만, 개발자들 대다수가 구글을 통해 검색하는 만큼 다른 개발자들에게 내 글을 노출시키기 어렵다. (물론 블로그에 글을 올리는 목적이 조회수는 아니지만 내 글을 읽어주는 독자가 있다는 것, 그것이 적어도 내 의욕을 좌지우지하는 것 같다.)<br /></p>

<h2 id="2-티스토리">2. 티스토리</h2>
<p><img src="https://user-images.githubusercontent.com/105341168/229183807-164771aa-00b8-4871-9816-d045e1623345.png" alt="img" /></p>

<blockquote>
  <p>Example</p>
  <ul>
    <li>이동욱 님이 운영하시는, <a href="https://jojoldu.tistory.com">기억보단 기록을</a></li>
  </ul>
</blockquote>

<p>2006년에 창립되어 네이버처럼 국내에서 보편적으로 많이 쓰이는 블로그 플랫폼이다. 옛날엔 초대장 시스템이 있어서 사용자들의 접근성이 다소 떨어졌는데, 이게 사라지고 나서는 많이들 사용하는 것 같다. 예전에는 다음이 운영했는데, 다음이랑 카카오가 합병된 이후로는 카카오가 운영중인 것 같다.<br /></p>

<p>개발자의 시선에서는 코드 삽입도 지원하고, 플러그인도 다양해 커스터마이징도 가능하고, 구글 노출도 되고, 거기다가 구글 애드센스도 달 수 있고… 정말 안 쓸 이유가 없다. 그렇기에 정말 많은 개발 블로그들이 개설되어 있고, 나 역시도 구글링할 때에 제일 많이 들어가는 플랫폼 중 하나이다. 그래서 가장 무난하게 개발 블로그를 시작한다면, 티스토리에서 할 것을 권하고 싶다.<br /></p>

<p>아, 생각해보니 티스토리가 이런 팔방미인이 될 수 있었는지를 간략하게나마 적어두어야 할 것 같다. 티스토리가 등장하는 2000년대 중반은 막 우리나라에서 블로그라는 개념이 퍼져나가는 태동기였다. 그때는 상술한 네이버 블로그나 지금은 사라진 다음 블로그처럼 IT 기업들이 운영하는 서비스형 블로그들이 주를 이루었는데, 블로그를 정말 자유롭게 이용하기엔 회사의 약관이나 운영방침과 같은 제약이 있어 차질이 생기곤 했다. (카카오가 운영하는 티스토리 또한 이 문제에 자유롭지는 않다.)<br /></p>

<p>그래서 <a href="https://ko.wikipedia.org/wiki/정재훈_(프로그래머)">정재훈</a> 씨가 처음 개발하고,
이후에는 태터앤컴퍼니 (TNC)에서 외국에 존재하던 설치형 블로그를 현지화해 출시한 프로그램이 태터툴즈이었다. 태터툴즈는 기존의 설치형 블로그의 장점을 유지하면서, 한국어에 최적화된 점에서 굉장히 주목을 받았고, 그 TNC가 다음과 합작해 만든 블로그 서비스가 바로 티스토리이다. 이런 알련의 과정 속에서 탄생한 티스토리는 설치형 블로그와 서비스형 블로그의 장점이 적절히 혼합되어 있다.<br /></p>

<p>참고로 <a href="https://korea.googleblog.com/2008/09/blog-post_12.html">TNC는 2008년 국내 최초로 구글에 인수되었고 (!)</a>, 태터툴즈는 태터툴즈 사용자 커뮤니티였던 태터네트워크재단 (TNF)에서 개발을 전담해 텍스트큐브 (TextCube)로 리브랜딩되어 현재도 운영중…이면 좋겠지만, 정식 버전은 2014년 2월에 나온 1.10.10에서 멈춘 것 같고 베타 버전도 2.0 베타 3이 마지막인 것 같다. (<a href="https://github.com/Needlworks/Textcube/">텍스트큐브 Github</a>)<br /></p>

<h2 id="3-브런치">3. 브런치</h2>
<p><img src="https://user-images.githubusercontent.com/105341168/229189060-753356e0-10a1-424c-85e3-3df61b079214.png" alt="CleanShot 2023-04-01 at 02 24 20@2x" /></p>

<blockquote>
  <p>Example</p>
  <ul>
    <li>옛날개발자 님이 운영하시는, <a href="https://brunch.co.kr/@springboot#articles">에디의 기술블로그</a></li>
  </ul>
</blockquote>

<p>브런치는 2015년에 카카오가 글쓰기에 최적화된 플랫폼을 만든다는 야심찬 목표를 갖고 오픈한 블로그 플랫폼이다. 이곳에 글을 올리려면 작가 신청을 하고 에디터팀의 승인 심사에 합격해야 한다고 한다. 그래서 브런치에서 개발 블로그를 몇개 보긴 했는데도, 솔직히 난 소설 글쓰기 플랫폼으로 알고 있었다…<br /></p>

<p>하술할 미디엄을 어느 정도 벤치마킹한 것으로 보이는데, 미디엄과 달리 코드 삽입이 안되서 이미지로 캡쳐해야 한다는 점이 너무 아쉽다. 디자인이랑 폰트가 워낙 깔끔해서 글쓰기엔 특화된 느낌은 확실히 강한데, 개발 블로그로 사용하기에는 한계점이 명확해 보인다.</p>

<h2 id="4-미디엄">4. 미디엄</h2>
<p><img src="https://user-images.githubusercontent.com/105341168/229185067-3110e063-e89a-4312-ab09-981074a7a522.png" alt="cc0998ee99506" /></p>

<blockquote>
  <p>Example</p>
  <ul>
    <li>Moon 님이 운영하시는, <a href="https://medium.com/@moonformeli">medium</a></li>
    <li>박상권 님이 운영하시는, <a href="https://medium.com/@moonformeli">medium</a></li>
  </ul>
</blockquote>

<p>미디엄은 2012년 <a href="https://ko.m.wikipedia.org/wiki/에번_윌리엄스_(기업인)">에반 윌리엄스</a>가 만든 소셜 네트워크 서비스이다. 플랫폼을 처음 보았을 때에는 트위터나 링크드인과 같은 소셜 네트워크 서비스의 느낌이 강해 보였는데, 글을 작성하려 할 때 나오는 메모장 화면이 직관적이라 굉장히 좋았다. (미디엄이 글 쓸 때 나오는 한글 폰트가 구리다는 얘기가 많은데, 확장 프로그램 깔면 해결되는 부분이라 생각해 일단 나는 고려하지 않았다.)<br /></p>

<p>그런데 내가 안쓰는 이유는… 사실 처음 블로그를 만들 때 미디엄에 대해 몰랐다! 원래부터 국내 사용자 수가 적다보니 미디엄을 개발 블로그로 쓰는 분들은 더 적은 거 같다. 그리고 카테고리랑 검색 기능이 없으니, 앞서도 얘기했지만 SNS 같은 느낌이 계속 드는 것 같아서 좀 손이 잘 가지 않는다.</p>

<h2 id="5-노션">5. 노션</h2>
<p><img src="https://user-images.githubusercontent.com/105341168/229185749-c6702213-0a15-49c2-9f54-8255d8c81402.jpg" alt="notion1411" /></p>

<blockquote>
  <p>Example</p>
  <ul>
    <li>younho9 님이 운영하시는, <a href="https://younho9.notion.site/younho9-Blog-9ed630c8603541bab20662b4854a891f">notion</a></li>
  </ul>
</blockquote>

<p>나는 옛날부터 노트에 무언가를 적는 것을 선호해서 스마트폰을 산 뒤로 애플 메모, 네이버 메모, 마이크로스프트 원노트, 에버노트 순으로 메모 앱을 사용했는데 뭔가 아쉬운 점이 한두 개씩은 있엇다. 그런데 노션을 2019년즘에 처음 사용하고 나서는 너무 만족해서 쭈욱 사용하고 있다. 메모 앱으로는.<br /></p>

<p>확실히 짚고 가야할 것이 있다. 노션은 블로그가 아닌 메모장이다. 그런데 메모장을 블로그로 사용하려면 그게 잘 될까? 이것저것 템플릿을 잘 가져와 쓴다고 해도 근본적인 한계가 명확하다고 생각한다.</p>

<ul>
  <li>페이지 주소가 직관적이지 않고, 페이지 제목이 바뀌면 새로운 주소를 가지게 되어 글을 다시 공유해야 한다.</li>
  <li>하나의 페이지이므로 카테고리, 글 검색, 댓글 기능이 부재되어 있다.</li>
  <li>페이지가 무거우면 페이지를 불러오는 로딩 과정이 매우 길다.</li>
</ul>

<p>그러면 노션 블로그를 호스팅하면 되지 않을까? 할텐데, 도메인과 호스팅 비용이 상당히 든다. 당장 무료로 쓸 수 있는 옵션이 이렇게 많은데, 노션이 좋다고 계속해서 돈을 지출하는 것은 좀 과하지 않을까?</p>

<h2 id="6-벨로그">6. 벨로그</h2>
<p><img src="https://user-images.githubusercontent.com/105341168/229186379-572b75c5-6750-4708-9693-0025035bbb01.PNG" /></p>

<p>벨로그는 2018년 velopert 님이 개설한 개발자에 특화된 블로그 서비스이다. 유저 수가 소수였던 초창기와 달리, 국내 많은 개발자들이 유입되면서 개발자 생태계가 잘 구축되어 있고, 올라오는 정보의 양과 질 모두 좋은 편이다. 또한 코드 삽입, 마크다운 에디터 등 개발자에 특화된 요소들이 눈에 띄는 요소이다. 모두 같은 디자인이고 커스터마이징할 수 있는 요소가 없다는 부분이 단점이긴 하지만, 초심자가 개발 블로그를 만든다고 한다면 벨로그가 가장 이상적이라 생각한다.<br /></p>

<h2 id="7-워드프레스-블로그">7. 워드프레스 블로그</h2>
<p><img src="https://user-images.githubusercontent.com/105341168/229307295-2426ca8c-0341-4b54-89c8-5022bf6780d9.jpg" alt="WordPress-Logo-2008-present" /></p>

<p>상술한 티스토리의 TMI 파트에도 잠깐 등장한 워드프레스는 2003년 출시된 오픈소스 기반 CMS이다. 전세계에 있는 정말 많은 사이트나 블로그들이 워드프레스를 기반으로 되어 있고, 다양한 플러그인과 테마 또한 존재한다. 그래서 2018년에 네이버 블로그에서 워드프레스 블로그로 이전을 시도한 적이 있었는데… 결과는 실패였다.<br /></p>

<p>그때 실패한 가장 큰 이유는 그때 군생활이여서 무언가를 공부할 여건이 도저히 되지 않았다는 것이었다. 워드프레스를 처음 접했을 때 생각보다 시간이 걸리고 이에 대해 공부할 부분도 꽤 된다. 그리고 처음에 플러그인을 게임 애드온처럼 이것저것 설치했는데 버전 충돌이 생겨서, 다시 제거하고 하나씩 학습해보고… 거기다가 PHP나 자바스크립트에 대한 공부 또한 필수적이다. 개발자 커뮤니티에서는 이런 것을 학습곡선 (Learning Curve)이 계속 길어진다고 표현하던데… 정말 맞는 말이라고 생각한다.</p>

<h2 id="8-github-pages">8. Github Pages</h2>
<p><img src="https://user-images.githubusercontent.com/105341168/229191108-c3f52e0c-4b2b-46af-9e07-5c59bd89183d.jpeg" alt="image" /></p>

<blockquote>
  <p>Example</p>
  <ul>
    <li>한재엽 님이 운영하시는, <a href="https://jbee.io">JBEE.io</a></li>
    <li>이종립 님이 운영하시는, <a href="https://johngrib.github.io">기억 보조용 위키</a></li>
  </ul>
</blockquote>

<p>Github Blog라는 하나의 서비스가 존재하는 건 아니고, Github가 제공하는 Github Pages를 이용해 Github 저장소에 블로그나 웹 사이트 같은 웹 서비스를 호스팅하는 방식이다. 아무래도 지금 내가 사용하고 있는 거기도 하고 지난 6개월간 공부하고 경험한 것도 있기에 이 부분을 조금 상세히 언급해보고자 한다.</p>

<ul>
  <li>긍정적인 점
    <ul>
      <li>커스터마이징의 자유도가 엄청나게 높다. 나처럼 Github Pages용 오픈 소스 테마을 이용해도 되고 아예 처음부터 설계해 만드는 것 또한 가능하다. 구글 검색에 내 블로그를 노출시킬 수도 있고, 구글 애드센스를 통해 광고를 달아줄 수도 있다.</li>
      <li>Github에 저장소로 올라가는 방식으므로 Github와 연동이 된다. 로컬에서 블로그를 쉽게 편집하고 관리할 수 있으며, commit과 push로 글을 등록하면 된다. Github 저장소에 백업이 되어 있기 때문에 이를 다운받아 사용할 수도 있고, 필요한 경우 롤백하는 것도 가능하다.</li>
      <li>마크다운 형식으로 작성하는 것을 지원하고, 코드 블룩이나 인용 블록 또한 지원한다. 게시글 하나하나가 .md 파일이라 나중에 플랫폼을 이전한다 하더라도 이를 다시 활용하는 것 또한 가능하다. 
<br /><br /></li>
    </ul>
  </li>
  <li>복합적인 점
    <ul>
      <li>워드프레스 블로그만큼은 아니지만, 진입장벽이 존재한다. 처음에 웹 사이트의 소스 코드를 올리거나 수정하는 작업이 필요하므로 최소한 git이랑 markdown을 어떻게 사용하는지는 알아야 한다. 블로그를 이것저것 건드려보려고 한다면 백엔드 관련 지식이 요구되고, 커스터마이징을 해보려면 간단한 프론트엔드 관련 지식 또한 필요해진다. 물론 웹 개발자를 지망한다면 이런 일련의 과정을 한번 하는 것도 도움이 된다.</li>
      <li>Github 저장소에 올라가는 방식이므로 저장소 내의 소스 코드가 모두 공개된다. 블로그를 노출시키고 싶지만 블로그 내부까지 노출시키고 싶지 않는다면, 유료 걔정으로 전환해서 비공개로 전환해야 한다.</li>
      <li>하나의 Github 저장소는 용량과 트래픽에 제한이 존재한다. (1GB의 최대 용량, 월 100GB의 트래픽 제한) 제한을 넘어서 사용하려면 Cloudflare과 같은 CDN을 추가로 사용해야 한다. 일단은 한도 내에서만 쓰면 무료인 것은 장점이지만, 한도를 넘어버린다면 돈을 써야하니 용량이 있는 파일을 올리는 것과 같은 경우에 주의할 필요가 있다.
<br /><br /></li>
    </ul>
  </li>
  <li>부정적인 점
    <ul>
      <li>정적 페이지로 빌드한는 것만 지원한다. 그래서 댓글 기능을 추가할 때 외부 데이터베이스와 연동이 되지 않아 이를 위한 플러그인을 별도로 설치해야 한다. (Github가 소스 관리를 위한 서비스이니… 동적 호스팅 서비스는 AWS와 같은 클라우드 벤더나 가비아와 같은 동적 웹 호스팅 벤더를 사용하자.)</li>
      <li>벨로그처럼 작성하는 문서 서식을 바로 렌더링해서 볼 수 없다. 프리뷰 플러그인을 사용한다 치더라도, 플러그인으로 형성된 화면과 렌더링된 화면이 일치하지 않아 결국엔 플러그인을 잘 안쓰게 된다.</li>
      <li>글을 쓸 때 표나 이미지를 넣는 게 불편하다. 나 같은 경우에는 html과 css를 사용해 넣는데, 해당 문법을 알아도 표를 일일이 만드는 것은 굉장히 귀찮다. 이미지 같은 경우에는 외부 사이트에 업로드해 이를 호스팅하는데 그것 또한 번거로운 작업이다.
<br /><br /></li>
    </ul>
  </li>
</ul>

<p>나는 Github Pages 블로그를 운영하는 것은 장단점이 매우 명확해 개개인마다의 호불호가 엄청 갈릴 수 밖에 없다고 생각한다. 실제로 Github Pages 블로그를 운영하시다가 다른 블로그 플랫폼으로 이주하시는 분들도 많이 보았고 나 또한 블로그를 개설하면서, 그리고 개설된 블로그를 운영하면서도 이주할지말지에 대해 많이 고민했었다. <br /></p>

<p>그래도 내가 Github Pages 블로그를 운영하는 데에는 <b>git을 이용해 블로그를 관리할 수 있다는 것</b>과 <b>블로그 운영을 통해 웹 개발의 전반적인 과정을 학습해볼 수 있다는 점</b>이 가장 큰 이유인 것 같다. Github Pages 블로그를 개설할 때에는, 정말 아무것도 모르는 감자 (…)라서 많이 헤맸다. 그래서 처음에는 블로그와 연동되는 git에 대해 공부하고자 <a href="https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=302554047">Do it! 지옥에서 온 문서 관리자 깃 &amp; 깃허브 입문</a>이라는 도서를 구매해서 공부해보고, 그 다음에는 블로그를 커스터마이징해보려고 <a href="https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=260564604">Do it! HTML+CSS+자바스크립트 웹 표준의 정석</a>이라는 도서를 구매해서 공부해보고 이를 최대한 적용해보는 식으로 실습하였다. 이렇게 블로그를 성장시키려고 노력하는 과정 속에서 나 또한 많이 성장할 수 있었고, 앞으로도 이런 blog-driven이 잘 이루어졌으면 하는 것이 내 바램이다.</p>

<blockquote>
  <p>Reference</p>
  <ul>
    <li>productuidev 님이 작성하신, <a href="https://velog.io/@productuidev/PREV-Portfolio-1-ProjectBlog#개발-블로그--github">개발자 취업준비 (포트폴리오/블로그)</a></li>
  </ul>
</blockquote>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="Github Pages" /><summary type="html"><![CDATA[글을 시작하기 앞서, 이 내용은 매우 주관적인 판단이 들어간 서술이 많다. 나야 보시다시피 Github Pages를 사용하지만 다른 사람들은 여러 이유로 다양한 플랫폼을 사용할 것이고, 그 부분을 지적하거나 문제시하는 게 아님을 분명히 밝힌다. 이 글은 어디까지나 개발 블로그로 사용되는 여러 플랫폼에 대해 이야기해보는 과정을 통해 개발 블로그를 처음 만드는 개발자들이 이런 부분을 고려했으면 좋겠다, 는 취지로 작성된 것이다.]]></summary></entry><entry><title type="html">[Github Pages] 1. 개발자에게 개발 블로그는 왜 필요한가요?</title><link href="http://localhost:4000/github%20pages/blog1/" rel="alternate" type="text/html" title="[Github Pages] 1. 개발자에게 개발 블로그는 왜 필요한가요?" /><published>2023-03-31T00:00:00+09:00</published><updated>2023-03-31T00:00:00+09:00</updated><id>http://localhost:4000/github%20pages/blog1</id><content type="html" xml:base="http://localhost:4000/github%20pages/blog1/"><![CDATA[<blockquote>
  <p>내가 아직 취업 시장에 발도 담구지 않은 대학생인데 내가 개발 블로그의 필요성에 대해 논하는 것이 의미가 있는 걸까? 라는 의문이 들어 작년에 작성한 글에서는 이 부분을 짚어보지 않았다. 하지만 이 부분을 뺀 채로 블로그를 운영하다보니, 처음에 내가 가졌었던 생각이나 느낌이 희석되어 여러 가지를 이유로 들며 블로그 운영을 게을리한 것 같다. 그래서 지난 6개월간 내가 작성한 내용을 다시 정리하기 앞서, 이 부분에 대해 이야기하고자 한다.</p>
</blockquote>

<h2 id="a1-블로그에-글을-쓰는-과정-또한-하나의-공부가-될-수-있다">A1. 블로그에 글을 쓰는 과정 또한 하나의 공부가 될 수 있다.</h2>
<p>글을 쓰는 과정은 생각보다 귀찮다. 글을 쓰기 위한 소재도 미리 준비해야 하고, 그 소재에 대해 모르는 부분을 공부해야 하고, 이를 검토하는 과정 또한 거쳐야 하고… 하지만 글을 쓰는 과정은 충분히 하나의 공부가 될 수 있다. 내가 이전에 공부하거나 경함한 내용을 자세하고 정확히 설명하기 위해 노력하면서, 그 내용에 대한 나의 이해도가 올라갈 수 있다. 또한 단순히 개념으로 머릿속에 넣은 내용을 문장이나 예시로 설명하면서, 내용을 이해하는 것을 넘어서 개념을 응용하는 능력 또한 증진시킬 수 있다. <br /></p>

<p><img src="https://user-images.githubusercontent.com/105341168/229170501-4f26985a-ab1a-437a-812c-f9db6ee50863.jpg" alt="pexels-armando-are-3759364" /></p>

<p>글을 쓰는 것과 같이 누군가에게 무언가를 설명하려고 노력하는 행위를 나만 성장하는 데에 있어 도움이 된다고 느낀 건 아닌지, <a href="https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=290172950">실용주의 프로그래머</a>에서는 프로그래머가 고무 오리 인형에게 코드 한 줄씩 설명하는 <a href="https://ko.wikipedia.org/wiki/고무_오리_디버깅">고무 오리 디버깅</a>으로 무언가를 설명해본 경험의 중요성을 강조한다. 이처럼 무언가를 설명해보는 경험이 계속 축적되다보면, 나중엔 무엇을 배우든간에 그것을 어떻게 설명해볼지에 대해 미리 생각해보게 될 것이다.<br /></p>

<p>그리고 당연하지만, 글은 하나의 기록이 된다. 자신이 공부하고 경험한 것을 기록하는 것은 내가 기억하는 것보다 더 오래 보존된다. 나는 공부를 하거나 이런저런 자료를 참고한 것을 모으는 방법에 대해 늘 고민하곤 했는데 (즐겨찾기에 등록하는 것이나 PDF를 저장하는 것 모두 단점이 명확해 중간에 그만두었다), 코드의 주석처럼 글을 쓸 때 바로바로 참고한 내용을 링크를 걸어주는 방법이 제일 즉각적이고 직관적인 것 같다. 또한 만약 생각이나 회고을 적어둔 경우에는 내가 이런 생각을 했구나, 하면서 나중에 참고하기도 좋다.</p>

<h2 id="a2-블로그를-운영하는-것이-성장의-동기가-될-수-있다">A2. 블로그를 운영하는 것이 성장의 동기가 될 수 있다.</h2>
<p>나는 어렸을 때부터 무언가를 수집하는 것을 좋아했다. 초등학교 때는 TCG 게임의 카드들을 수집해 컬렉터 앨범을 만드는 것을 좋아했고, 중학교 때에는 코인 홀더에 담을 프루프를 사기 위해 용돈을 모아본 적도 있다. 블로그에 글을 쓰는 것 또한 내가 인터넷이나 서적 곳곳에 퍼져 있는 지식들을 수집해 하나의 모음집을 만든다고 느꼈기에 처음 개설하였을 때부터 블로그를 운영하는 데에 애착이 갔다.<br /></p>

<p><img src="https://user-images.githubusercontent.com/105341168/229171570-0609a126-3177-47d8-aa22-1e179c6b7f9e.jpg" alt="pexels-canva-studio-3194523" /></p>

<p>그래서 나는 blog-driven, 즉 블로그를 운영하기 위해 공부하고 경험하면서 나 또한 성장한다는 개념에 대해 긍정적으로 생각한다. 보통 블로그에 글을 쓰면서 blog-driven이 이루어진다고 생각하는데, 나는 blog-driven이 더 포괄적인 개념이라고 생각한다. 블로그를 계속해서 살아있는 상태로 유지하려면 단순히 블로그에 글을 쓰는 것만이 아닌, 블로그를 개선하고 유지보수하는 과정 또한 필요하다. 지난 6개월간 블로그를 운영하면서 알게 모르게 시행착오를 거친 부분이 꽤 되는데 웹 개발을 공부하면서 이를 블로그에 대입해 생각해보기도 하고, 블로그에 적용시켜볼 계획도 세우기도 하는 식으로 앞으로 나아가는 데에 큰 도움이 되었던 것 같다.<br /></p>

<h2 id="a3-운영하는-블로그가-개발자에게-새로운-기회를-줄-수-있다">A3. 운영하는 블로그가 개발자에게 새로운 기회를 줄 수 있다.</h2>
<p>내가 대학교 4학년이 되면서 느낀 점이 있다면, 나를 포장하고 홍보하는 것 또한 정말 중요하다는 것이다. 수능은 모든 학생을 일렬로 세우고 점수로 평가하지만, 사회에는 어떤 절대적인 기준이 존재하지 않으므로 사람들이 나를 평가할 수 있는 input data를 내가 스스로 가공해 제공할 필요성이 있다. 특히 개발자는 다른 직업보다 정보를 활용하는 능력이 뛰어나다보니, Github 프로필을 만들거나 포트폴리오 사이트를 만드는 것과 같이 나에 대한 정보를 공유하는 것 또한 매우 활발하다.<br /></p>

<p><img src="https://user-images.githubusercontent.com/105341168/229171850-d6723260-8a79-48d0-a288-7e9a55c29f21.jpg" alt="pexels-markus-winkler-4584830" /></p>

<p>요즘 IT 기업들이 지원자의 개발 블로그나 Github의 주소를 요구하는 것 또한 그런 맥락일 것이다. 기업 입장에서는 모든 점에서 뛰어난 인재를 채용하고자 하겠지만, 그것은 매우 소수이다. 그래서 기업은 지원자의 잠재력 또한 확인해 평가하고자 노력한다. 그리고 이런 부분은 개발과 직접적으로 관련되어 있지만 단순한 결과물의 집합체인 이력서나 포트폴리오보다는, 성장하는 데에 있어 중요한 가치를 엿볼 수 있는 개발 블로그나 Github에 잘 들어난다.</p>

<blockquote>
  <p>Reference</p>
  <ul>
    <li>코드쓰는사림 님이 작성하신, <a href="https://taegon.kim/archives/7107">개발자가 블로그를 운영해야 할 이유</a></li>
    <li>productuidev 님이 작성하신, <a href="https://velog.io/@productuidev/PREV-Portfolio-1-ProjectBlog#개발-블로그--github">개발자 취업준비 (포트폴리오/블로그)</a></li>
  </ul>
</blockquote>]]></content><author><name>pocj8ur4in</name><email>pocj8ur4in@gmail.com</email></author><category term="Github Pages" /><summary type="html"><![CDATA[내가 아직 취업 시장에 발도 담구지 않은 대학생인데 내가 개발 블로그의 필요성에 대해 논하는 것이 의미가 있는 걸까? 라는 의문이 들어 작년에 작성한 글에서는 이 부분을 짚어보지 않았다. 하지만 이 부분을 뺀 채로 블로그를 운영하다보니, 처음에 내가 가졌었던 생각이나 느낌이 희석되어 여러 가지를 이유로 들며 블로그 운영을 게을리한 것 같다. 그래서 지난 6개월간 내가 작성한 내용을 다시 정리하기 앞서, 이 부분에 대해 이야기하고자 한다.]]></summary></entry></feed>