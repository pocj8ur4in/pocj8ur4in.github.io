var store = [{
        "title": "[F/E] HTML",
        "excerpt":"HTML (HyperText Mark-up Language) : 웹 문서의 구조를 기술하는 마크업 언어         하이퍼링크 (hyperlink) : 문서 내 어떤 요소와 다른 요소 간의 비선형적 (nonlinear) 연결   하이퍼텍스트 (hypertext) : 하이퍼링크를 통해 상호 연결되어 네트워크처럼 구성된 문서   &lt;html&gt; &lt;head&gt; \t&lt;div style=\"color: blue; font-size: 15px;\"&gt; \t\tHello World! \t&lt;/div&gt; &lt;/head&gt; &lt;/html&gt;    \t \t\t \t\t\tHello World! \t\t \t      HTML 요소 (HTML Elements) : HTML 문서나 웹 페이지를 이루는 개별적인 부분            HTML 태그 (HTML Tags) &lt;tag&gt;&lt;/tag&gt; : 요소의 시작과 끝을 나타내 문서의 구조를 명시하는 마크업 기호                    HTML 속성 (HTML Attributes) &lt;tag element=\"\"&gt; : 여는 태그 내에서 명령어를 구체화하는 속성                            HTML 변수 (HTML Arguments) &lt;tag element=\"value\"&gt; : 태그 내의 속성에 해당되는 인자                                                   HTML 내용 (HTML Contents) : HTML 문서를 통해 화면에 표시될 내용   # HTML 전역 속성 (HTML Global Attributes) : 모든 HTML 요소에서 사용 가능한 속성   class와 id  : CSS나 JavaScript에서 요소를 선택하거나 접근할 때 사용하는 속성     클래스 (class=\"\") : HTML 문서에서 정의된 요소의 별칭   아이디 (id=\"\") : HTML 문서에서 정의된 고유한 식별자   &lt;div class=\"class\"&gt; \t&lt;div id=\"id\"&gt; \t  class &amp; id \t&lt;/div&gt; &lt;/div&gt;   lang : 웹 문서의 텍스트가 어떤 언어로 작성되었는지 나타내는 속성   &lt;p lang=\"ko\"&gt;한글&lt;/p&gt; &lt;p lang=\"en\"&gt;english&lt;/p&gt;   한글  english   style : 요소에 적용할 CSS을 나타내는 속성   &lt;div style=\"color: white; font-size: 15px; background-color: black;\"&gt; \t&lt;a href=\"https://pocj8ur4in.github.io\" target=\"_blank\" title=\"pocj8ur4in\"&gt;   \t  pocj8ur4in \t&lt;/a&gt; &lt;/div&gt;             pocj8ur4in      title : 요소의 설명을 나타내는 속성   &lt;p title=\"pocj8ur4in\"&gt;pocj8ur4in&lt;/p&gt;   pocj8ur4in   # 범위 관련 HTML 태그   &lt;html&gt;&lt;/html&gt; : HTML으로 작성된 문서임을 선언하는 태그     &lt;!DOCTYPE html&gt; : 마크업 언어에서의 문서 형식을 정의하는 태그            DTD 태그 (Document Type Definition)       웹 브라우저의 렌더링 엔진이 관용 모드 (Quirks Mode)가 아닌 표준 모드로 렌더링       HTML5`` :&lt;!DOCTYPE html&gt;```으로 선언           &lt;!DOCTYPE html&gt; &lt;html lang=\"ko\"&gt; ... &lt;/html&gt;   &lt;head&gt;&lt;/head&gt; : 웹 문서의 속성을 선언하는 태그     실제 웹 브라우저 화면 상에는 출력되지 않는 HTML 문서의 정보들을 넣음   &lt;!DOCTYPE html lang=\"ko\"&gt; &lt;html lang=\"ko\"&gt; &lt;head&gt; ... &lt;/head&gt; ... &lt;/html&gt;   &lt;body&gt;&lt;/body&gt; : 웹 문서의 모양을 선언하는 태그     실제 웹 브라우저 화면 상에는 출력되는 HTML 문서의 레이아웃을 넣음   &lt;!DOCTYPE html&gt; &lt;html lang=\"ko\"&gt; ... &lt;body&gt; ... &lt;/body&gt; &lt;/html&gt;   # 메타 정보 관련 태그     메타 정보 (meta data) : 웹 서버와 웹 브라우저 간 상호 교환되는 정보   &lt;title&gt;&lt;/title&gt; : 웹 문서의 제목을 선언하는 태그     브라우저의 제목 표시줄이나 페이지 탭에 표시되는 제목을 출력   &lt;!DOCTYPE html&gt; &lt;html lang=\"ko\"&gt; &lt;head&gt; \t&lt;title&gt;웹 문서의 제목&lt;/title&gt; &lt;/head&gt; &lt;/html&gt;   &lt;base /&gt; : 웹 문서에 포함된 모든 상대 URL들에 대한 기준 URL를 선언하는 태그     상대 URL를 사용하는 다른 HTML 요소보다 앞에 위치해야 함   한 문서에 하나의 &lt;base&gt;만을 사용 가능   문서 내에 &lt;base&gt;가 존재하지 않으면, 해당 문서의 기준 URL는 (현재 위치).(상대 URL)   &lt;!DOCTYPE html&gt; &lt;html lang=\"ko\"&gt; &lt;head&gt; \t&lt;base href=\"기준 URL (절대 경로, 상대 경로 모두 가능)\" \ttarget=\"_self (현재 창에서 열기) | _blank (새로운 창에서 열기)\" /&gt; &lt;/head&gt; &lt;/html&gt;   &lt;link /&gt; : 현재 웹 문서와 외부 리소스 간의 관계를 정의하는 태그     HTML, CSS, 아이콘 등을 가져옴    \t \t\t \t\t\tlink 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\trel \t\t\t현재 웹 문서와 외부 소스 간의 관계 \t\t \t\t \t\t\thref \t\t\t외부 소스의 주소 \t\t \t\t \t\t\ttype \t\t\t외부 소스의 타입 \t\t \t   &lt;!DOCTYPE html&gt; &lt;html lang=\"ko\"&gt; &lt;head&gt; &lt;link \trel=\"manifest\"\t\t\t&lt;!--? 현재 웹 문서와 웹 익스텐션이 포함하는 manifest.json을 연결할 때 --&gt; \thref=\"manifest.json\"/&gt; &lt;link \trel=\"canonical\"\t\t\t&lt;!--? 검색 엔진을 위한 대표 URL를 설정하는 rel 변수 --&gt; \thref=\"대표 URL\"/&gt;\t\t\t&lt;!--? 웹 문서 내 URL는 다르나 동일한 내용의 웹 문서가 있을 때 사용 --&gt; &lt;link \trel=\"shortcut icon\"\t\t&lt;!--? 브라우저 탭에 표시될 아이콘을 설정하는 rel 변수 --&gt; \thref=\"PUBLIC_URL%/favicon.ico\" \ttype=\"image/x-icon\" \tsizes=\"16x16\"/&gt; &lt;link\t\t\t\t\t&lt;!--? 애플 메타 태그 (apple meta tag) --&gt; \trel=\"apple-touch-icon\"\t\t&lt;!--? '홈 화면에 추가' 기능을 사용할 때 표시될 웹 사이트의 아이콘을 설정하는 rel 변수 --&gt; \thref=\"%PUBLIC_URL%/img/apple-icon-57.png\" \tsizes=\"12x57\"/&gt; &lt;link \trel=\"apple-touch-startup-icon\"\t&lt;!--? '홈 화면에 추가' 기능을 사용할 때 로딩 시 스타트업 이미지을 설정하는 rel 변수 --&gt; \tsizes=\"320x460\"\t\t\t&lt;!--? 단, 이미지의 크기가 각 기기에 맞게끔 정확히 맞춰져 있어야 제대로 화면에 표시 --&gt; \thref=\"%PUBLIC_URL%/img/apple-icon-320.png\"/&gt; &lt;/head&gt; &lt;/html&gt;   &lt;style&gt;&lt;/style&gt; : 현재 웹 문서의 스타일 정보를 정의하는 태그     CSS 선택자, 속성, 값을 설정    \t \t\t \t\t\tstyle 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\ttype \t\t\t외부 소스의 타입 \t\t \t   &lt;!DOCTYPE html&gt; &lt;html lang=\"ko\"&gt; &lt;head&gt; &lt;style&gt; \tbody { background-color: #fff; } \tdiv { color: #000; } &lt;/&gt; &lt;/head&gt; &lt;/html&gt;   &lt;meta /&gt; : 기타 메타데이터 요소들을 선언하는 태그     검색 엔진 등이 웹 페이지를 읽을 때 해당 서비스에서 이 페이지를 어떻게 표시할지 설명    \t  \t\t  \t\t\tmeta 태그의 속성 값  \t\t\t설명  \t\t  \t  \t  \t\t  \t\t\tname  \t\t\t메타 정보의 이름 선언 : 웹 서버가 웹 브라우저의 요청에 대해 응답할 정보들을 지정하는 속성  \t\t \t\t  \t\t\thttp-equiv  \t\t\tHTTP 문서의 초기 정보 선언 : 웹 서버가 웹 문서 내에 HTML 응답 헤더를 넣어 웹 브라우저가 초기 정보를 지정하는 속성  \t\t  \t\t  \t\t\tcontent  \t\t\t메타 정보의 내용 선언 : name 변수와 http-equiv 태그를 선언할 때 같이 포함되어야 할 내용을 지정하는 속성  \t\t  \t   &lt;!DOCTYPE html&gt; &lt;html lang=\"ko\"&gt; &lt;head&gt;  &lt;meta  name=\"description\"\t\t\t\t&lt;!--? 웹 브라우저의 검색 결과에 표시될 웹 문서의 설명을 선언하는 name 변수 --&gt;  content=\"설명\"/&gt;\t\t\t\t&lt;!--? content 값은 공백을 포함해 최대 150글자여야 함 --&gt;      &lt;meta  name=\"keywords\"\t\t\t\t&lt;!--? 웹 브라우저의 검색 엔진에 의해 검색될 검색 키워드를 선언하는 name 변수 --&gt;  content=\"키워드1, 키워드2,...\"/&gt;       &lt;meta  name=\"date\"\t\t\t\t\t&lt;!--? 웹 문서가 작성된 날짜를 선언하는 name 변수 --&gt;  content=\"2022-09-21T17:38:06+09:00\"/&gt;\t\t&lt;!--? content 값은 \"연도-월-일T시:분:초+(GMT)\" 형식으로 작성 --&gt; \t\t\t\t\t\t&lt;!--? GMT는 그리니치 표준시와 현 국가/지역 사이의 시차를 의미 --&gt;   &lt;meta  name=\"robots\"\t\t\t\t\t&lt;!--? 검색 로봇을 제어하는 name 변수 --&gt;  content=\"robots의 content 변수1,...\"/&gt;\t\t&lt;!--? Index : 해당 문서를 포함해 링크가 걸린 곳을 수집 대상으로 지정 --&gt; \t\t\t\t\t\t&lt;!--? Noindex : 해당 문서를 수집 대상에서 제외 --&gt; \t\t\t\t\t\t&lt;!--? Follow : 해당 문서를 수집 대상으로 지정 --&gt; \t\t\t\t\t\t&lt;!--? Nofollow : 해당 문서를 포함해 링크가 걸린 곳을 수집 대상에서 제외 --&gt; \t\t\t\t\t\t&lt;!--? All : 'Index, Follow'와 동일 --&gt; \t\t\t\t\t\t&lt;!--? None : 'Noindex, Nofollow'와 동일 --&gt;  &lt;meta  name=\"viewport\"\t\t\t\t&lt;!--? 모든 장치에서 웹 문서가 잘 보이도록 뷰 포트를 설정하는 name 변수 --&gt;  content=\"width=device-width,  initial-scale=1.0\"/&gt;   &lt;meta\t\t\t\t\t\t&lt;!--? twitter : 트위터의 '미리보기'을 설정하는 name 변수 --&gt;  name=\"twitter:card\"\t\t\t\t&lt;!--? twitter:card : 트위터 미리보기를 표시 --&gt;  content=\"summary\"/&gt;       &lt;meta  name=\"twitter:url\"\t\t\t\t&lt;!--? twitter:url : 트위터 미리보기에서 표시될 웹 페이지 주소 --&gt;  content=\"website_url\"/&gt;       &lt;meta  name=\"twitter:title\"\t\t\t\t&lt;!--? twitter:title : 트위터 미리보기에서 표시될 웹 페이지 제목 --&gt;  content=\"website_name\"/&gt;        &lt;meta  name=\"twitter:description\"\t\t\t&lt;!--? twitter:description : 트위터 미리보기에서 표시될 웹 페이지 설명 --&gt;  content=\"website_description\"/&gt;        &lt;meta  name=\"twitter:image\"\t\t\t\t&lt;!--? twitter:image : 트위터 미리보기에서 표시될 웹 페이지 이미지 --&gt;  content=\"website_image\"/&gt;       &lt;meta\t\t\t\t\t\t&lt;!--? apple-mobile-web-app : 사파리 '홈 화면에 추가'을 설정하는 name 변수 --&gt;  name=\"apple-mobile-web-app-title\"\t\t&lt;!--? 홈 화면에 추가 기능을 사용할 때 표시될 웹 사이트의 이름 --&gt;  content=\"website_name\"/&gt;       &lt;meta  name=\"apple-mobile-web-app-capable\"\t\t&lt;!--? 홈 화면에 추가 기능을 사용할 때 브라우저의 UI 사용 여부 --&gt;  content=\"yes\"/&gt;       &lt;meta  name=\"apple-mobile-web-app-status-bar-style\"\t&lt;!--? 홈 화면에 추가 기능을 사용할 때 표시될 상태바의 색상 --&gt;  content=\"black-translucent\"/&gt; \t\t\t&lt;!--? default : 회색, black : 검정, black-translucent : 반투명 --&gt;       &lt;meta  http-equiv=\"X-UA-Compatible\"\t\t\t&lt;!--? 웹 문서를 렌더링할 IE 버전을 명시해 웹 호환성을 지정하는 http-equiv 변수 --&gt;  content=\"X-UA-Compatible의 content 변수\"/&gt;\t&lt;!--? IE=5,7,8,EmulateIE7,EmulateIE8 : 각 버전에 해당하는 렌더링 방식 사용 --&gt; \t\t\t\t\t\t&lt;!--? IE=edge : 항상 최신 표준 모드로 렌더링 --&gt; \t\t\t\t\t\t&lt;!--? IE=edge, chrome=1: ~, Chrome이 설치되어 있다면 Chrome으로 렌더링 --&gt; \t  &lt;meta  charset=\"문자 인코딩 방식\"/&gt;\t\t\t&lt;!--? 웹 브라우저의 문자 인코딩 방식 ('호환성 보기') 을 지정하는 http-equiv 변수 --&gt; \t\t\t\t\t\t&lt;!--? EUC-KR (ISO-2022-KR) : ISO-숫자 타입 문자 인코딩 (한글을 2비트로 변환) --&gt; \t\t\t\t\t\t&lt;!--? UTF-8,16,32 : 유니코드 변환 포맷 인코딩 (모든 문자를 8,16,32비트로 변환) --&gt;   &lt;meta  http-equiv=\"content-security-policy\"\t\t&lt;!--? XSS, 데이터 삽입 공격을 대비해 웹 문서 컨텐츠 정책을 명시하는 http-equiv 변수 --&gt;  content=\"CSP 지시문\"/&gt;\t\t\t\t&lt;!--? default-src : 모든 컨텐츠는 현재 도메인에서만 제공 (디폴트 설정) --&gt; \t\t\t\t\t\t&lt;!--? connect-src : 연결 가능한 URL 제한 --&gt; \t\t\t\t\t\t&lt;!--? script-src : 스크립트 관련 권한 집합 제어 --&gt; \t\t\t\t\t\t&lt;!--? style-src : 스타일시트 관련 권한 집합 제어 --&gt; \t\t\t\t\t\t&lt;!--? img-src : 이미지 관련 권한 집합 제어 --&gt; \t\t\t\t\t\t&lt;!--? font-src : 웹 글꼴을 제공할 수 있는 URL 지정 --&gt; \t\t\t\t\t\t&lt;!--? frame-src : 상위 iframe 도메인에서 하위 iframe 도메인을 확인하고 제어 --&gt;       &lt;meta  http-equiv=\"content-security-policy\"  content=\"CSP 지시문 CSP 옵션\"/&gt;\t\t\t&lt;!--? *.trusted.com : 접근 허용할 도메인 지정 --&gt; \t\t\t\t\t\t&lt;!--? 'none' : 모든 도메인 차단 --&gt; \t\t\t\t\t\t&lt;!--? 'self' : 현재 도메인만 허용 --&gt; \t\t\t\t\t\t&lt;!--? 'unsafe-inline' : 소스 코드 내 인라인 자바스크립트 및 CSS 허용 --&gt; \t\t\t\t\t\t&lt;!--? 'nonce-암호화된 문자' : 암호화된 방식으로 인라인 자바스크립트 및 CSS 허용 --&gt;   &lt;meta  http-equiv=\"content-script-type\"\t\t&lt;!--? 웹 문서에 사용된 프로그래밍 언어를 명시하는 http-equiv 변수 --&gt;  content=\"text/프로그래밍 언어\"/&gt;       &lt;meta  http-equiv=\"default-style\"\t\t\t&lt;!--? 웹 문서에 우선적으로 적용할 스타일 시트를 지정하는 http-equiv 변수 --&gt;  content=\"스타일시트\"/&gt;       &lt;meta  http-equiv=\"refresh\"\t\t\t\t&lt;!--? 웹 문서를 새로고침하는 시간 간격을 지정하는 http-equiv 변수 --&gt;  content=\"시간 간격\"; url=\"\"/&gt;\t\t\t&lt;!--? url=\"\" : 새로고침한 후 이동할 주소 지정 --&gt;       &lt;meta  http-equiv=\"cache-control\"\t\t\t&lt;!--? 웹 캐시 사용 여부를 지정하는 http-equiv 변수 --&gt;  content=\"no-cache\"/&gt;\t\t\t\t&lt;!--? no-cache : 사용자의 웹 브라우저가 항상 캐시를 읽지 않고 페이지를 갱신 --&gt;       &lt;meta  http-equiv=\"pragma\"\t\t\t\t&lt;!--? 현재 웹 문서를 캐시로 저장할지 여부를 지정하는 http-equiv 변수 --&gt;  content=\"no-cache\"/&gt;\t\t\t\t&lt;!--? no-cache : 사용자의 웹 브라우저가 항상 캐시를 읽지 않고 페이지를 갱신 --&gt;       &lt;meta  http-equiv=\"expires\"\t\t\t\t&lt;!--? 현재 웹 문서의 웹 캐시 만료일을 지정하는 http-equiv 변수 --&gt;  content=\"캐시 만료일\"/&gt;       &lt;meta  http-equiv=\"장면 전환 http-equiv 변수\"\t\t&lt;!--? 특정 상황에서의 장면 전환 효과를 지정하는 http-equiv 변수 --&gt;  content=\"revealtrans(duration=수행할 시간,\t&lt;!--? page-enter : 현재 페이지 접속 시  --&gt;  transition=수행할 방법)\"/&gt;\t\t\t&lt;!--? page-exit : 현재 페이지 종료 시 --&gt; \t\t\t\t\t\t&lt;!--? site-enter : 현재 사이트 접속 시 --&gt; \t\t\t\t\t\t&lt;!--? site-exit : 현재 사이트 종료 시 --&gt;       &lt;meta  http-equiv=\"origin-trial\"\t\t\t&lt;!--? 웹 개발자가 웹 문서에 실험단계인 속성을 명시하는 http-equiv 변수 --&gt;  content=\"....\"/&gt;       &lt;meta\t\t\t\t\t\t&lt;!--? 오픈그래프 태그 (OpenGraph Tag) --&gt;  property=\"og:오픈그래프 변수\"\t\t\t&lt;!--? SNS에 게시될 때 데이터 설정을 최적화하는 property 변수 --&gt;  content=\"오픈그래프 변수에 해당되는 값\"/&gt;\t\t&lt;!--? og 필수 변수 --&gt; \t  \t\t\t\t\t&lt;!--? title : 웹 사이트 제목 --&gt; \t\t\t\t\t\t&lt;!--? type : 웹 문서의 타입 --&gt; \t\t\t\t\t\t&lt;!--? image : 웹 문서에 표현될 이미지 --&gt; \t\t\t\t\t\t&lt;!--? url : 웹 문서의 대표 URL --&gt; \t\t\t\t\t\t&lt;!--? og 옵션 변수 --&gt; \t\t\t\t\t\t&lt;!--? description : 웹 문서 내에 표현될 설명 --&gt; \t\t\t\t\t\t&lt;!--? locale : 웹 문서 내에 표현될 언어 --&gt; \t\t\t\t\t\t&lt;!--? locale:alternate : 웹 문서 내에 표현될 다국적 언어 --&gt; \t\t\t\t\t\t&lt;!--? site_name : 웹 문서 내에 표현될 카테고리 제목 --&gt; \t\t\t\t\t\t&lt;!--? audio : 웹 문서에 포함되는 오디오 파일 URL --&gt; \t\t\t\t\t\t&lt;!--? video : 웹 문서에 포함되는 비디오 파일 URL --&gt; \t\t\t\t\t\t&lt;!--? og 오브젝트 변수 --&gt; \t\t\t\t\t\t&lt;!--? width : 웹 문서에 표현될 오브젝트의 가로 길이 --&gt; \t\t\t\t\t\t&lt;!--? height : 웹 문서에 표현될 오브젝트의 세로 길이 --&gt; \t\t\t\t\t\t&lt;!--? url : 웹 문서에 표현될 오브젝트의 URL --&gt; \t\t\t\t\t\t&lt;!--? secure_url : 웹 문서에 표현될 오브젝트의 HTTPS URL --&gt; \t\t\t\t\t\t&lt;!--? alt : 표현될 오브젝트에 대한 설명 --&gt; &lt;/head&gt; &lt;/html&gt;   # 컨텐츠 구분 관련 태그   &lt;h1&gt;&lt;/h1&gt;~&lt;h6&gt;&lt;/h6&gt; : 문서 정보 계층을 구조화하는 태그     문서나 구분된 영역의 제목을 설정 (Heading)            숫자가 낮을 수록 높은 단계의 제목           &lt;h1&gt;h1&lt;/h1&gt; &lt;h2&gt;h2&lt;/h2&gt; &lt;h3&gt;h3&lt;/h3&gt; &lt;h4&gt;h4&lt;/h4&gt; &lt;h5&gt;h5&lt;/h5&gt; &lt;h6&gt;h6&lt;/h6&gt;   \th1  \th2  \th3  \th4  \th5  \th6    &lt;header&gt;&lt;/header&gt; : 문서의 헤더를 선언하는 태그     헤더 (header) 영역 : 일반적으로 로고, 제목, 검색 등이 포함   &lt;header&gt; &lt;h1&gt;제목&lt;/h1&gt; ... &lt;/header&gt;  header { display: block; }   &lt;footer&gt;&lt;/footer&gt; : 문서의 푸터를 선언하는 태그     푸터 (footer) 영역 : 일반적으로 작성자, 저작권, 관련 문서 등이 포함   &lt;footer&gt; &lt;p&gt;작성자&lt;/p&gt; ... &lt;/footer&gt;  footer { display: block; }   &lt;main&gt;&lt;/main&gt; : 문서의 주요 컨텐츠 영역을 선언하는 태그     한 문서에 하나의 &lt;main&gt; 태그만을 선언 가능   IE에서 지원하지 않음   &lt;main&gt; &lt;h1&gt;주요 컨텐츠&lt;/h1&gt; ... &lt;/main&gt;  main { display: block; }   &lt;article&gt;&lt;/article&gt; : 독립적으로 구분되거나 재사용 가능한 영역을 선언하는 태그     &lt;h1&gt;~&lt;h6&gt; 태그를 포함해 식별   작성한 날짜와 시간을 &lt;time&gt; 태그의 datetime 속성으로 작성   &lt;article&gt; &lt;h2&gt;독립 영역 1&lt;/h2&gt; ... &lt;/article&gt; &lt;article&gt; &lt;h2&gt;독립 영역 2&lt;/h2&gt; ... &lt;/article&gt;  article { display: block; }   &lt;section&gt;&lt;/section&gt; : 문서의 일반적인 영역을 선언하는 태그     &lt;h1&gt;~&lt;h6&gt; 태그를 포함해 식별   &lt;section&gt; &lt;h2&gt;일반 영역 1&lt;/h2&gt; ... &lt;/section&gt; &lt;section&gt; &lt;h2&gt;일반 영역 2&lt;/h2&gt; ... &lt;/section&gt;  section { display: block; }   &lt;aside&gt;&lt;/aside&gt; : 문서의 별도 컨텐츠 영역을 선언하는 태그     사이드 (aside) 영역 : 일반적으로 광고나 사이드바로 설정   &lt;aside&gt; &lt;h4&gt;별도 컨텐츠&lt;/h4&gt; ... &lt;/aside&gt;  aside { display: block; }   &lt;nav&gt;&lt;/nav&gt; : 다른 페이지로 이동하기 위한 링크를 선언하는 태그     일반적으로 바로가기, 목차, 색인 등으로 설정   &lt;a&gt; 태그로 링크 선언   &lt;nav&gt; \t&lt;a href=\"/html/\"&gt;HTML&lt;/a&gt; | \t&lt;a href=\"/html/css/\"&gt;CSS&lt;/a&gt; | \t&lt;a href=\"/html/css/js/\"&gt;JavaScript&lt;/a&gt; &lt;/nav&gt; &lt;nav&gt;     &lt;ol&gt;         &lt;li&gt;&lt;a href=\"#\"&gt;HTML&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href=\"#\"&gt;CSS&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href=\"#\"&gt;JavaScript&lt;/a&gt;&lt;/li&gt;     &lt;/ol&gt; &lt;/nav&gt;  aside { display: block; }   &lt;div&gt;&lt;/div&gt; : 아무것도 나타내지 않은 컨텐츠 영역을 선언하는 태그     일반적으로 CSS와 연게해 꾸미는 목적으로 사용   &lt;div&gt; &lt;h2&gt;아무것도 나타내지 않은 컨텐츠 영역&lt;/h2&gt; ... &lt;/div&gt;  div { display: block; }   # 인라인 텍스트 관련 태그   &lt;p&gt;&lt;/p&gt; : 하나의 문단을 선언하는 태그   &lt;p align=\"center\"&gt;문단 1 : 가운데 정렬&lt;/p&gt; &lt;p align=\"right\"&gt;문단 2 : 오른쪽 정렬&lt;/p&gt;    \t문단 1 : 가운데 정렬  \t문단 2 : 오른쪽 정렬    p { display: block; }   &lt;hr&gt; : 문단을 분리하는 가로줄을 넣는 태그   ↓ 가로줄 &lt;hr&gt; ↑ 가로줄    \t↓ 가로줄 \t \t↑ 가로줄   hr { display: block; }  &lt;a&gt;&lt;/a&gt; : 하이퍼링크를 생성하는 태그   \t \t\t \t\t\ta 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tdownload \t\t\t이 요소가 리소스를 다운로드하는 용도인가? (boolean) \t\t \t\t \t\t\thref \t\t\t링크된 문서를 입력 \t\t \t\t \t\t\ttarget \t\t\t링크된 문서를 어떻게 열지 지정 \t\t \t\t \t\t\tname \t\t\t링크의 이름을 지정 (문서 내에서도 이 이름을 이용해 이동 가능) \t\t \t   &lt;a   href=\"https://pocj8ur4in.github.io\"   target=\"_blank\"   title=\"pocj8ur4in\"&gt;     pocj8ur4in &lt;/a&gt;             pocj8ur4in      a { display: inline; }   &lt;code&gt;&lt;/code&gt; : 소스 코드를 넣는 태그     `을 3번 쓰는 것으로 대체 가능   &lt;code&gt; \tprint(\"Hello World!\") &lt;code&gt;    \tprint(\"Hello World!\")    code { display: inline; }   &lt;time&gt; : 날짜나 시간을 나타내기 위해 선언하는 태그   &lt;p&gt;Hello World!&lt;time datetime=\"유효한 날짜나 시간\"&gt;&lt;/p&gt;  time { display: inline; }   &lt;span&gt;&lt;/span&gt; : 아무것도 나타내지 않는 컨텐츠 영역을 선언하는 태그     일반적으로 CSS와 연게해 꾸미는 목적으로 사용   &lt;p&gt;Hello &lt;span style=\"color:blue\"&gt;World&lt;/span&gt;!&lt;/p&gt;    \tHello World!    span { display: inline; }   &lt;br&gt; : 줄바꿈을 선언하는 태그     Enter 키를 2번 입랙한 것으로 대체 가능   &lt;br&gt;       br { display: inline; }   # 목록 관련 태그   &lt;li&gt;&lt;/li&gt; : 목록을 표시할 때 각 항목들을 선언하는 태그     &lt;ol&gt;과 &lt;ul&gt;은 &lt;li&gt;의 부모            &lt;li&gt;는 단독으로 사용할 수 없음            \t \t\t \t\t\tli 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tvalue \t\t\t숫자로 항목의 순서 지정 \t\t \t   &lt;!--? 잘못된 사용 --&gt; &lt;li&gt;X&lt;/li&gt; &lt;li&gt;Y&lt;/li&gt; &lt;li&gt;Z&lt;/li&gt;   li { display: list-item; }   &lt;ul&gt;&lt;/ul&gt; : 순서 없는 목록을 선언하는 태그   &lt;ul&gt; \t&lt;li&gt;X&lt;/li&gt; \t&lt;li&gt;Y&lt;/li&gt; \t&lt;li&gt;Z&lt;/li&gt; &lt;/ul&gt;    \t \t\tX \t\tY \t\tZ \t   ul { display: block; }   &lt;ol&gt;&lt;/ol&gt; : 순서 있는 목록을 선언하는 태그     정렬된 목록의 항목 순서는 해당 항목의 중요도를 의미할 수 있음    \t \t\t \t\t\tli 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tstart \t\t\t숫자로 항목에 매겨진 번호의 시작 값 지정 \t\t \t\t \t\t\ttype \t\t\t항목에 매겨진 번호의 유형 지정 \t\t \t   &lt;ol&gt; \t&lt;li&gt;X&lt;/li&gt; \t&lt;li&gt;Y&lt;/li&gt; \t&lt;li&gt;Z&lt;/li&gt; &lt;/ol&gt;    \t \t\tX \t\tY \t\tZ \t   ol { display: block; }   &lt;dl&gt;&lt;/dl&gt; : 용어 (&lt;dt&gt;&lt;/dt&gt;)와 정의 (&lt;dd&gt;&lt;/dd&gt;) 쌍의 영역을 선언하는 태그     &lt;dd&gt;와 &lt;dt&gt;는 &lt;dl&gt;의 자식            &lt;dd&gt;와 &lt;dt&gt;는 단독으로 사용할 수 없음           키 (key)와 값 (value)의 형태를 표현할 때 사용   &lt;dl&gt;   &lt;dt&gt;용어 1&lt;/dt&gt;&lt;dd&gt;정의 1&lt;/dd&gt;   &lt;dt&gt;용어 2&lt;/dt&gt;&lt;dd&gt;정의 2&lt;/dd&gt; &lt;/dl&gt;    \t   \t\t용어 1정의 1   \t\t용어 2정의 2 \t   dl, dt, dd { display: block; }   # 표 관련 태그   &lt;table&gt;, &lt;tr&gt;, &lt;th&gt;, &lt;td&gt; : 표를 만드는 태그     데이터 표(&lt;table&gt;)의 행(&lt;tr&gt;), 머리글 열(&lt;th&gt;)과 내용 열(&lt;td&gt;)을 생성    \t \t\t \t\t\ttable 태그 \t\t\t설명 \t\t \t \t \t\t \t\t\ttr \t\t\t표의 행 표현 \t\t \t\t \t\t\tth \t\t\t표의 머리말 열 표현 \t\t \t\t \t\t\ttd \t\t\t표의 내용 열 표현 \t\t \t    \t \t\t \t\t\ttable 컨텐츠 구분 \t\t\t설명 \t\t \t \t \t\t \t\t\tcaption \t\t\t표의 제목 부분 기술 \t\t \t\t \t\t\tcol \t\t\t표의 열 정보 기술 \t\t \t\t \t\t\tthead \t\t\t표의 헤더 부분 기술 \t\t \t\t \t\t\ttbody \t\t\t표의 본문 부분 기술 \t\t \t\t \t\t\ttfoot \t\t\t표의 푸터 부분 기술 \t\t \t    \t \t\t \t\t\ttable 관련 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tabbr \t\t\tth : 표에서 열에 대한 설명 \t\t \t\t \t\t\tscope \t\t\tth : 어느 부분의 머리말인지 명시 col / row : 자신의 열 / 자신의 행 colgroup / rowgroup : 모든 열 / 모든 행 \t\t \t\t \t\t\tcolspan \t\t\t표에서 병합하려는 열의 수 \t\t \t\t \t\t\trowspan \t\t\t표에서 병합하려는 행의 수 \t\t \t   &lt;table&gt;   &lt;caption&gt;OO고등학교 시간표&lt;/caption&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt; &lt;/th&gt;       &lt;th&gt;월&lt;/th&gt;       &lt;th&gt;화&lt;/th&gt;       &lt;th&gt;수&lt;/th&gt;       &lt;th&gt;목&lt;/th&gt;       &lt;th&gt;금&lt;/th&gt;      &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;     &lt;tr&gt;       &lt;th&gt;1교시&lt;/th&gt;       &lt;td&gt;수학&lt;/td&gt;       &lt;td rowspan=\"2\"&gt;국어&lt;/td&gt;       &lt;td&gt;수학&lt;/td&gt;       &lt;td&gt;과학&lt;/td&gt;       &lt;td&gt;영어&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;th&gt;2교시&lt;/th&gt;       &lt;td rowspan=\"2\"&gt;사회&lt;/td&gt;       &lt;td&gt;영어&lt;/td&gt;       &lt;td&gt;국어&lt;/td&gt;       &lt;td rowspan=\"3\"&gt;음악&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;th&gt;3교시&lt;/th&gt;       &lt;td&gt;수학&lt;/td&gt;       &lt;td rowspan=\"2\"&gt;미술&lt;/td&gt;       &lt;td&gt;영어&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;th&gt;4교시&lt;/th&gt;       &lt;td&gt;체육&lt;/td&gt;       &lt;td&gt;사회&lt;/td&gt;       &lt;td&gt;영어&lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;    \tOO고등학교 시간표 \t \t\t \t\t\t  \t\t\t월 \t\t\t화 \t\t\t수 \t\t\t목 \t\t\t금 \t\t \t \t \t\t \t\t\t1교시 \t\t\t수학 \t\t\t국어 \t\t\t수학 \t\t\t과학 \t\t\t영어 \t　　 \t\t \t\t\t2교시 \t\t\t사회 \t\t\t영어 \t\t\t국어 \t\t\t음악 \t　　 \t\t \t\t\t3교시 \t\t\t수학 \t\t\t미술 \t\t\t영어 \t\t \t\t \t\t\t4교시 \t\t\t체육 \t\t\t사회 \t\t\t영어 \t　　 \t   table { display: table; } tr { display: table-row; } th, td { display: table-cell; }   # 멀티미디어 관련 태그   &lt;img&gt; : 이미지를 삽입하는 태그   \t \t\t \t\t\timg 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tsrc \t\t\t이미지 파일의 경로를 지정 절대 경로 : http:// 또는 https:// 상대 경로 : /path/filename \t\t \t\t \t\t\talt \t\t\t이미지가 출력되지 않을 경우 이미지에 대한 설명을 제공 \t\t \t\t \t\t\ttitle \t\t\t이미지에 대한 추가 정보를 제공  (마우스가 접근하면 말풍선으로 표시) \t\t \t\t \t\t\twidth, height \t\t\t이미지의 가로, 세로의 길이를 지정 (HTML5 : 픽셀만 지정 가능, %는 CSS 대체) \t\t \t\t \t\t\tborder \t\t\t이미지의 경계선의 두께를 지정 (기본값 : 1px) \t\t \t   &lt;img src=\"https://cdn.pixabay.com/photo/2020/10/21/04/01/leaves-5672036_1280.png\"   alt=\"leaves-5672036_1280.png\"   title=\"이미지\"   height=\"360px\"   width=\"360px\"   border=\"0px\"&gt;      img { display: inline; }   &lt;audio&gt; : 오디오를 삽입하는 태그    \t \t\t \t\t\taudio 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tsrc \t\t\t삽입할 오디오의 주소 지정 \t\t \t\t \t\t\tautoplay \t\t\t오디오의 자동 재생 여부 지정 \t\t \t\t \t\t\tcontrols \t\t\t오디오의 소리 조절, 시간대 탐색, 일시정지 및 재시작을 할 수 있는 컨트롤러 생성 \t\t \t\t \t\t\tloop \t\t\t비디오의 재시작 여부 지정 \t\t \t\t \t\t\tpreload \t\t\t웹 문서를 열 때 동영상, 메타데이터 로드 여부 지정 auto : 모두 로드 metadata : 메타데이터만 로드 none : 모두 로드하지 않음 \t\t \t   audio { display: inline; }   &lt;video&gt; : 비디오를 삽입하는 태그    \t \t\t \t\t\tvideo 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tsrc \t\t\t삽입할 비디오의 주소 지정 \t\t \t\t \t\t\tposter \t\t\t삽입할 비디오 썸네일 이미지의 주소 지정 \t\t \t\t \t\t\ttype \t\t\t삽입할 비디오의 타입 지정 \t\t \t\t \t\t\theight \t\t\t비디오의 출력 영역 높이 지정 \t\t \t\t \t\t\twidth \t\t\t비디오의 출력 영역 너비 지정 \t\t \t\t \t\t\tposter \t\t\t비디오 포스터 프레임의 주소 지정 \t\t \t\t \t\t\tautoplay \t\t\t비디오의 자동 재생 여부 지정 \t\t \t\t \t\t\tcontrols \t\t\t비디오의 소리 조절, 시간대 탐색, 일시정지 및 재시작을 할 수 있는 컨트롤러 생성 \t\t \t\t \t\t\tloop \t\t\t비디오의 재시작 여부 지정 \t\t \t\t \t\t\tpreload \t\t\t웹 문서를 열 때 동영상, 메타데이터 로드 여부 지정 auto : 모두 로드 metadata : 메타데이터만 로드 none : 모두 로드하지 않음 \t\t \t      video { display: inline; }   &lt;figure&gt;&lt;/figure&gt; : 이미지나 다이어그램 영역을 삽입하는 태그     &lt;figcation&gt; : &lt;figure&gt;에 포함되어 이미지나 다이어그램의 설명을 추가하는 태그   &lt;figure&gt;   &lt;figcaption&gt;     figure   &lt;/figcaption&gt;   &lt;img     src=\"https://cdn.pixabay.com/photo/2020/10/21/04/01/leaves-5672036_1280.png\"     alt=\"leaves-5672036_1280.png\"     title=\"이미지\"     height=\"360px\"     width=\"360px\"&gt; &lt;/figure&gt;    \t \t\tfigure \t \t   figure { display: block; } figcation { display: inline; }   # 프레임 관련 태그   &lt;iframe&gt;&lt;/iframe&gt; : 웹 문서 안에 박스형으로 프레임을 넣어 문서 안의 문서를 표현하는 태그     중첩된 브라우저 프레임 : 다른 HTML 문서를 현재 HTML 문서에 삽입    \t \t\t \t\t\tiframe 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tname \t\t\t프레임의 이름 지정 \t\t \t\t \t\t\tsrc \t\t\t삽입할 웹 문서의 주소 지정 \t\t \t\t \t\t\theight \t\t\t프레임의 높이 지정 \t\t \t\t \t\t\twidth \t\t\t프레임의 너비 지정 \t\t \t\t \t\t\tsandbox \t\t\t일기 전용으로 삽입 (Boolean) allow-form : 양식 제출 가능 allow-scripts : 스크립트 실행 가능 allow-same-origin : 같은 도메인의 리소스 사용 가능 \t\t \t\t \t\t\tframeborder \t\t\t프레임 테두리 표시 여부 지정 (Boolean) \t\t \t\t \t\t\tallowfullscreen \t\t\t프레임의 전체 화면 모드 전환 여부 지정 \t\t \t   &lt;div&gt; \t&lt;iframe \t\tsrc=\"https://github.com/pocj8ur4in\" \t\twidth=\"360\" \t\theight=\"360\" \t\tscrolling=\"no\" \t\tframeborder=\"1\" \t\tallowfullscreen=\"true\" \t\tallow=\" \t\t\tclipboard-write; \t\t\tencrypted-media; \t\t\tpicture-in-picture; \t\t\tweb-share\" \t\tsandbox=\" \t\t\tallow-same-origin \t\t\tallow-popups \t\t\tallow-scripts\" \t\t&gt; \t&lt;/iframe&gt; &lt;/div&gt;    \t \t   iframe { display: inline; }   # 스크립트 관련 태그   &lt;script&gt;&lt;/script&gt; : 외부 스크립트 파일을 참조하는 태그     외부 스크립트 파일 : javascript, CSS    \t \t\t \t\t\tscript 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tsrc \t\t\t삽입할 외부 스크립트의 주소 지정 \t\t \t\t \t\t\tasync \t\t\t스크립트의 비동기적 실행 여부 (Boolean) \t\t \t\t \t\t\tdefer \t\t\t문서 파싱 후 작동 여부 (Boolean) \t\t \t\t \t\t\ttype \t\t\t삽입할 외부 스크립트의 타입 지정 \t\t \t\t \t\t\tframeborder \t\t\t프레임 테두리 표시 여부 지정 (Boolean) \t\t \t\t \t\t\tallowfullscreen \t\t\t프레임의 전체 화면 모드 전환 여부 지정 \t\t \t   &lt;script type=\"application/ld+json\"&gt;\t&lt;!--? 구조화된 JSON-LD 데이터 스니펫 : 제목, 작성자 및 세부 정보를 Google이 수집 --&gt;   {     \"@context\": \"https://schema.org\",            \"@type\": \"website\",       \"name\": \"website_name\",       \"author\": {         \"@type\": \"Person\",         \"name\": \"Person_name\"       },       \"description\": \"website_description\",       \"url\": \"website_url\"   } &lt;/script&gt;   script { display: none; }   # 양식 관련 태그   &lt;form&gt;&lt;/form&gt; : 웹 서버에 제출하기 위한 양식의 입력값을 받는 태그     &lt;form&gt;이 다른 &lt;form&gt;을 자식 요소로 포함할 수 없음      form 태그가 동작하는 과정         사용자가 브라우저를 통해 폼이 있는 웹 문서에 방문     사용자가 브라우저를 통해 폼의 내용을 입력     폼 안에 있는 모든 데이터를 웹 서버로 전송     웹 서버는 전송받은 폼 데이터의 처리를 위해 웹 프로그램으로 전달     웹 프로그램에서 데이터를 처리하고, 결과에 따른 새로운 웹 문서를 웹 서버로 전달     웹 서버는 전송받은 새로운 웹 문서를 브라우저로 전송     브라우저는 전송받은 새로운 웹 문서를 표현       \t \t\t \t\t\tform 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tname \t\t\t폼을 식별하기 위한 고유한 이름 지정 \t\t \t\t \t\t\taccept-charset \t\t\t폼 전송에 사용할 문자 인코딩 방식 지정 \t\t \t\t \t\t\tautocomplete \t\t\t자동 완성 기능을 사용할지 여부 지정 (ON | OFF) \t\t \t\t \t\t\taction \t\t\t입력 양식에 입력된 값을 저장할 데이터베이스 문서 지정 (해당 문서는 PHP나 ASP로 작성) \t\t \t\t \t\t\tnovalidate \t\t\t양식 데이터의 유효성을 검사하지 않을지 지정 \t\t \t\t \t\t\ttarget \t\t\taction에서 지정한 스크립트 파일을 현재 창이 아닌 다른 위치에 열도록 지정 \t\t \t\t \t\t\tmethod \t\t\tHTTP 메소드 (웹 서버와의 통신 방식) 지정 (GET | POST) \t\t \t   &lt;html&gt;   &lt;body&gt;     &lt;form       action = \"http://localhost:4000/form.jsp\"       accept-charset=\"utf-8\"       name = \"person_info\"       method = \"get\"&gt;      &lt;/form&gt;   &lt;/body&gt; &lt;html&gt;  form { display: block; }   &lt;label&gt;&lt;/label&gt; : 양식에 이름을 지정하는 태그     &lt;label for=\"\"&gt; : label의 for의 값과 양식의 id의 값이 같으면 연결하는 속성   &lt;label&gt; 가능 요소 : &lt;button&gt;, &lt;input&gt;, &lt;progress&gt;, &lt;select&gt;, &lt;textarea&gt;   &lt;label for=\"input-label\"&gt;   input-text &lt;/label&gt;  &lt;input type=\"text\" id=\"input-text\"&gt;  &lt;label for=\"checkbox-label\"&gt;   checkbox-text &lt;/label&gt;  &lt;input type=\"checkbox\" id=\"checkbox-text\"&gt;    \tinput-text \t \tcheckbox-text \t   label { display: inline; }   &lt;input&gt; : 입력값을 입력받을 필드를 선언하는 태그    \t \t\t \t\t\tinput 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tname \t\t\t입력값 필드을 식별하기 위한 고유한 이름 지정 \t\t \t\t \t\t\ttype \t\t\t입력값 필드의 종류를 지정 \t\t \t    \t \t\t \t\t\tinput type 변수 \t\t\t설명 \t\t \t \t \t\t \t\t\ttext \t\t\t한 줄의 문자열 생성 (기본 변수) \t\t \t\t \t\t\tpassword \t\t\t비밀번호 생성 \t\t \t\t \t\t\trange \t\t\t지정한 범위의 숫자 생성 \t\t \t\t \t\t\tcheckbox \t\t\t선택/해제할 수 있는 항목 (중복 가능) 생성 \t\t \t\t \t\t\tradio \t\t\t선택/해제할 수 있는 항목 (중복 불가) 생성 \t\t \t\t \t\t\tsubmit \t\t\t클릭할 경우 입력값을 전송하는 버튼 생성 \t\t \t\t \t\t\tsearch \t\t\t클릭할 경우 입력값을 검색하는 버튼 생성 \t\t \t\t \t\t\treset \t\t\t클릭할 경우 입력값을 초기화하는 버튼 생성 \t\t \t\t \t\t\tfile \t\t\t파일을 업로드하는 버튼 생성 \t\t \t\t \t\t\thidden \t\t\t입력값 없이 폼과 함께 전송해야 하는 정보를 감쌈 (hidden flied) \t\t \t   &lt;input type=\"text\" name=\"text\"&gt;    \t   &lt;input type=\"password\" name=\"password\"&gt;    \t   &lt;input type=\"range\" name=\"range\"&gt;    \t   &lt;input type=\"checkbox\" name=\"checkbox\" value=\"1\"&gt;1 &lt;input type=\"checkbox\" name=\"checkbox\" value=\"2\"&gt;2 &lt;input type=\"checkbox\" name=\"checkbox\" value=\"3\"&gt;3 &lt;input type=\"checkbox\" name=\"checkbox\" value=\"4\"&gt;4 &lt;input type=\"checkbox\" name=\"checkbox\" value=\"5\"&gt;5    \t1  \t2  \t3  \t4  \t5   &lt;input type=\"radio\" name=\"radio\" value=\"1\"&gt;1 &lt;input type=\"radio\" name=\"radio\" value=\"2\"&gt;2 &lt;input type=\"radio\" name=\"radio\" value=\"3\"&gt;3 &lt;input type=\"radio\" name=\"radio\" value=\"4\"&gt;4 &lt;input type=\"radio\" name=\"radio\" value=\"5\"&gt;5    \t1  \t2  \t3  \t4  \t5   &lt;input type=\"submit\" name=\"submit\"&gt;    \t   &lt;input type=\"search\" name=\"search\"&gt;    \t   &lt;input type=\"reset\" name=\"reset\"&gt;    \t   &lt;input type=\"file\" name=\"file\"&gt;    \t      input { display: inline-block; }   &lt;button&gt;&lt;/button&gt; : 클릭 가능한 버튼을 생성하는 태그    \t \t\t \t\t\tbutton 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tautofocus \t\t\t페이지가 로드될 때 자동으로 포커싱 여부 (Boolean). 문서 내에 고유해야 함 \t\t \t\t \t\t\tdisabled \t\t\t버튼의 비활성화 여부 (Boolean) \t\t \t\t \t\t\tname \t\t\t폼 데이터와 함께 전송될 버튼의 이름을 지정 \t\t \t\t \t\t\ttype \t\t\t버튼의 종류를 지정 (button, reset, submit) \t\t \t   &lt;button name=\"button\"&gt; \t버튼 &lt;/button&gt;    \t버튼    button { display: inline-block; }   &lt;textarea&gt;&lt;/textarea&gt; : 여러 줄의 문자열 값을 입력받는 태그    \t \t\t \t\t\ttextarea 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tautofocus \t\t\t페이지가 로드될 때 자동으로 포커싱 여부 (Boolean). 문서 내에 고유해야 함 \t\t \t\t \t\t\tautocomplete \t\t\t자동 완성 기능을 사용할지 여부 지정 (ON | OFF) \t\t \t\t \t\t\tdisabled \t\t\t텍스트 에이리어의 비활성화 여부 (Boolean) \t\t \t\t \t\t\trows \t\t\t텍스트 에이리어의 행의 개수을 지정 \t\t \t\t \t\t\tcols \t\t\t텍스트 에이리어의 열의 개수을 지정 \t\t \t\t \t\t\tmaxlength \t\t\t텍스트 에이리어에 입력 가능한 최대 문자 수 \t\t \t\t \t\t\tplaceholder \t\t\t텍스트 에이리어에 입력할 문자열에 대한 힌트 \t\t \t\t \t\t\treadonly \t\t\t읽기 전용 여부 (Boolean) \t\t \t   &lt;textarea cols=\"50\" rows=\"10\"&gt;&lt;/textarea&gt;    \t      textarea { display: inline-block; }   &lt;progress&gt;&lt;/progress&gt; : 작업의 진행률을 표시하는 태그    \t \t\t \t\t\tprogress 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tmax \t\t\t작업의 총량 지정 \t\t \t\t \t\t\tvalue \t\t\t작업의 진행량 지정 \t\t \t   &lt;progress value=\"70\" max=\"100\"&gt;70 %&lt;/progress&gt;    \t70 %      progress { display: inline-block; }   &lt;select&gt;&lt;/select&gt; : 드롭다운 목록을 생성하는 태그     드롭다운 항목(&lt;option&gt;)의 드롭다운 목록(&lt;select&gt;) 제공    \t \t\t \t\t\tselect 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tautocomplete \t\t\t자동 완성 기능을 사용할지 여부 지정 (ON | OFF) \t\t \t\t \t\t\tdisabled \t\t\t드롭다운 목록의 비활성화 여부 (Boolean) \t\t \t\t \t\t\tmultiple \t\t\t다중으로 선택할지 여부 (Boolean) \t\t \t\t \t\t\tname \t\t\t드롭다운 목록의 이름 지정 \t\t \t\t \t\t\tsize \t\t\t드롭다운 목록에서 한 번에 볼 수 있는 행의 개수 \t\t \t   select { display: inline-block; }   &lt;option&gt;&lt;/option&gt; : 드롭다운 목록에 대한 드롭다운 항목을 생성하는 태그     &lt;option&gt;는 선택적 빈 태그로 사용 가능   &lt;optgroup&gt;으로 그룹화 가능    \t \t\t \t\t\toption 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tdisabled \t\t\t드롭다운 항목의 비활성화 여부 (Boolean) \t\t \t\t \t\t\tlabel \t\t\t드롭다운 항목의 제목 지정 (생략되면 포함된 텍스트를 표시) \t\t \t\t \t\t\tselected \t\t\t옵션이 선택되었음을 표시 (Boolean) \t\t \t\t \t\t\tvalue \t\t\t양식으로 제출될 값 (생략되면 포함된 텍스트를 값으로 사용) \t\t \t   &lt;form&gt;     &lt;select&gt;         &lt;option&gt;a&lt;/option&gt;         &lt;option&gt;b&lt;/option&gt;         &lt;option&gt;c&lt;/option&gt;         &lt;option&gt;d&lt;/option&gt;     &lt;/select&gt; &lt;/form&gt; &lt;form&gt;     &lt;select autofocus&gt;         &lt;option&gt;e&lt;/option&gt;         &lt;option&gt;f&lt;/option&gt;         &lt;option&gt;g&lt;/option&gt;         &lt;option&gt;h&lt;/option&gt;     &lt;/select&gt; &lt;/form&gt; &lt;form&gt;     &lt;select disabled&gt;         &lt;option&gt;i&lt;/option&gt;         &lt;option&gt;j&lt;/option&gt;         &lt;option&gt;k&lt;/option&gt;         &lt;option&gt;l&lt;/option&gt;     &lt;/select&gt; &lt;/form&gt; &lt;form&gt;     &lt;select multiple&gt;         &lt;option&gt;m&lt;/option&gt;         &lt;option&gt;n&lt;/option&gt;         &lt;option&gt;o&lt;/option&gt;         &lt;option&gt;p&lt;/option&gt;     &lt;/select&gt; &lt;/form&gt; &lt;form&gt;     &lt;select name=\"select box\" size=\"2\"&gt;         &lt;option&gt;q&lt;/option&gt;         &lt;option&gt;r&lt;/option&gt;         &lt;option&gt;s&lt;/option&gt;         &lt;option&gt;t&lt;/option&gt;     &lt;/select&gt; &lt;/form&gt;                 a         b         c         d                     e         f         g         h                     i         j         k         l                     m         n         o         p                     q         r         s         t        option, optgroup { display: block; }   &lt;fieldset&gt;&lt;/fieldset&gt; : 같은 목적의 양식을 그룹화하는 태그     &lt;legend&gt; 태그로 제목을 지정할 수 있음   &lt;form&gt;   &lt;fieldset&gt;     &lt;legend&gt;커피 사이즈&lt;/legend&gt;     &lt;label&gt;         &lt;input type=\"radio\" name=\"size\" value=\"t\" /&gt;         톨     &lt;/label&gt;     &lt;label&gt;         &lt;input type=\"radio\" name=\"size\" value=\"g\" /&gt;         그란데     &lt;/label&gt;     &lt;label&gt;         &lt;input type=\"radio\" name=\"size\" value=\"v\" /&gt;         벤티     &lt;/label&gt;   &lt;/fieldset&gt; &lt;/form&gt;           커피 사이즈                       톨                            그란데                            벤티           fieldset, legend { display: block; }  ","categories": ["Frontend"],
        "tags": ["HTML"],
        "url": "/frontend/html1/",
        "teaser": null
      },{
        "title": "[macOS] 홈브류 (Homebrew)",
        "excerpt":"Homebrew : macOS용 패키지 관리 어플리케이션 (Package Management Application)      일반적으로 커맨드라인 도구나 시스템 패키지 설치에 사용   cask Package : GUI 어플리케이션 설치도 가능하게 해주는 Homebrew 확장 패키지   mas Package : App Store 어플리케이션 설치도 가능하게 해주는 Homebrew 확장 패키지   Homebrew 설치     터미널 실행 후 다음 명령어를 입력   /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"      터미널 창에 다음 명령어를 입력해 Homebrew가 정상적으로 설치되었는지 확인   brew --version // \"Homebrew X.X.X\" 출력 : 정상 설치 // \"zsh: command not found: brew\" 출력 : 설치 오류   cask Package 설치     터미널 창에 다음 명령어를 입력   brew install cask      터미널 창에 다음 명령어를 입력해 cask Package가 정상적으로 설치되었는지 확인   brew list   mas Package 설치     터미널 창에 다음 명령어를 입력   brew install mas      터미널 창에 다음 명령어를 입력해 mas Package가 정상적으로 설치되었는지 확인   brew list   Homebrew 명령어                              Homebrew 명령어 이름             Homebrew 명령어 설명                                         brew --version             Homebrew의 버전 정보 확인                               brew doctor             Homebrew 설치 환경을 검사                               brew update             Homebrew를 최신 버전으로 업데이트                               brew list             설치된 패키지를 확인                               brew upgrade             설치된 모든 패키지를 업데이트                               brew search (패키지명)             해당 패키지가 설치되어 있는지 검색                               brew install (패키지명)             해당 패키지를 최신 버전으로 설치                               brew info (패키지명)             해당 패키지의 정보 확인                               brew upgrade (패키지명)             해당 패키지를 업데이트                               brew uninstall (패키지명)             해당 패키지를 삭제                               brew outdated             최신 버전이 존재하는 패키지 확인                               brew cleanup (패키지명)             해당 패키지의 구버전에 해당하는 파일 삭제                 cask 명령어     기존의 brew 명령어 뒤에 --cask를 추가   mas 명령어                              mas 명령어 이름             mas 명령어 설명                                         mas version             mas의 버전 정보 확인                               mas list             mas로 설치된 패키지 확인                               mas upgrade             mas로 설치된 모든 패키지를 최신 버전으로 업데이트                               mas search (검색어)             앱스토어에서 해당 검색어와 일치하는 패키지 검색                               mas install (패키지 ID)             해당되는 ID를 가진 패키지를 최신 버전으로 설치                               mas upgrade (패키지 ID)             해당되는 ID를 가진 패키지를 최신 버전으로 업데이트                               mas uninstall (패키지명)             mas로 설치된 해당 패키지를 삭제                               mas outdated             mas로 설치된 패키지 중 최신 버전이 존재하는 패키지 확인                 Homebrew 삭제     터미널 실행 후 다음 명령어를 입력   // Homebrew로 설치한 모든 package를 일괄 삭제 brew remove --force --ignore-dependencies $(brew list)  // Homebrew 삭제 ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)\"      터미널 창에 다음 명령어를 입력해 Homebrew가 정상적으로 삭제되었는지 확인   brew --version // \"zsh: command not found: brew\" 출력 : 정상 삭제 // \"Homebrew X.X.X\" 출력 : 삭제 오류  ","categories": ["Mac"],
        "tags": [],
        "url": "/mac/homebrew1/",
        "teaser": null
      },{
        "title": "[F/E] CSS",
        "excerpt":"CSS (Cascading Style Sheet) : 웹 문서가 표현되는 방법을 기술하는 스타일시트 언어         ~1996 : HTML 문서에 사용자가 원하는 스타일을 적용하고자 함       Inline Style : HTML 태그의 style 속성으로 태그의 속성을 일일이 적용   &lt;p style=\"color: blue\"&gt;     hello world &lt;/p&gt;      Inline Style Sheet : HTML 문서 내 &lt;style&gt; 태그로 한 문서의 스타일 적용   &lt;head&gt;     &lt;style&gt;         body { background-color: black; }     &lt;/style&gt; &lt;/head&gt;      1996 : 레이아웃 및 디자인 정보로 인해 HTML 문서의 구조화가 어려워진 문제를 해결하기 위해 CSS 탄생       Linking Style Sheet : 내용으로부터 스타일 정보를 분리해 별도의 스타일시트 (.css) 파일을 만들고 HTML 문서와 연결   &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;  CSS 스타일시트 (CSS Style Sheet) : 스타일을 선언하고 태그를 선택하는 CSS RuleSet의 집합     CSS 선택자 (CSS Selector) : 어떤 HTML 태그나 HTML 속성을 꾸밀지 지정   CSS 선언 (CSS declaration) : CSS 선택자에 대한 CSS 속성과 CSS 값을 정의            CSS 속성 (CSS Attributes) : 선택자가 지정한 것을 어떤 속성으로 꾸밀지 지정       CSS 변수 (CSS Arguments) : 지정된 속성을 어떻게 나타낼지 지정           CSS 선택자 {     CSS 속성 : CSS 값; /* CSS 선언 */ }  CSS 선택자 { /* 세미클론 (;)으로 선언을 구분해 여러 번의 선언 가능 */     CSS 속성1 : CSS 값1;     CSS 속성2 : CSS 값2; }   CSS 선택자 { /* 작은따옴표 ('') 혹은 큰따옴표 (\"\")으로 값의 공백 처리 */     CSS 속성1 : 'CSS 값1';     CSS 속성2 : \"CSS 값2\"; }      ! 같은 CSS 선택자나 CSS 속성이 선언되었다면? : CSS RuleSet에 대한 우선순위의 필요성    캐스케이딩 (Cascading) : 같은 CSS 선언이 여러 번 선언하였다면, 나중에 선언된 것을 적용     나중에 선언된 것이 먼저 선언된 것을 덮어버림 (Override)   CSS 선택자 { /* 나중에 선언된 CSS 속성1의 값2가 적용된다. */     CSS 속성1 : CSS 값1;     CSS 속성1 : CSS 값2; }     전역적인 것을 먼저 적용하고, 그 다음에 지역적인 것을 적용            부모 태그에서 선언된 속성은 자식 태그로 상속되어, 부모 자식에서 선언된 값이 적용된다.       자식 태그에서 상속받은 속성을 다시 선언되면, 자식 태그에서 선언된 값이 적용된다.           &lt;p style=\"color: red\"&gt;     &lt;span style=\"color: blue\"&gt;         CSS 우선순위 : span의 font-color 속성이 p의 font-color 속성보다 높다.     &lt;/span&gt; &lt;/p&gt;                 CSS 우선순위 : span의 font-color 속성이 p의 font-color 속성보다 높다.         CSS 명시도 (Specificity) : 작성된 순서가 아닌, CSS 선언에 적용되는 가중치에 따라 우선순위 적용     가중치는 네 가지 기준을 숫자로 표현 (0,0,0,0) : 제일 앞의 숫자가 높을수록 높은 우선순위를 가짐            명시도가 동일할 경우, 나중에 선언된 것을 우선해 적용 (Cascading)           p..div &gt; span { color : green;} /* 몀시도 : 0,1,0,2 */ b span {color : red;} /* 명시도 : 0,0,0,2 */      첫번째 0 : 인라인 스타일 (inline style)의 개수   세번째 0 : 클래스, 가상 클래스, 속성 선택자의 개수   두번째 0 : ID 선택자의 개수   네번째 0 : 태그 선택자, 가상 요소 선택자의 개수   !important : 기존의 우선순위를 무시하고 해당 CSS 선언을 우선해 적용   CSS 선택자 { */     CSS 속성1 : CSS 값1 !important;     CSS 속성1 : CSS 값2; }  CSS 선택자 (CSS Selector) : HTML 문서에 스타일을 입힐 요소를 선택하는 문자     여러 종류의 선택자를 중첩 가능 (p.span)   여러 종류의 선택자를 space 키로 구분해 동시에 선택 가능  (p.span p.img)   CSS 선택자 {     CSS 속성 : CSS 값; }   전체 선택자 * : 모든 요소를 선택하는 선택자   * {   color: blue; }   태그 선택자 tag : 해당 태그의 요소를 선택하는 선택자   tag {   color: aqua; }   아이디 선택자 #id : 해당 아이디의 요소를 선택하는 선택자   #tag {   color: red; }   클래스 선택자 .class : 해당 클래스의 요소를 선택하는 선택자   .class {   color: green; }   후손 선택자 (selector1) (selector2) : 해당 선택자의 모든 하위 요소 중 하나를 지정해 선택하는 선택자   div tag {      color: yellow; } ... &lt;div&gt;     &lt;tag&gt;         hello world     &lt;/tag&gt; &lt;/div&gt; &lt;div&gt;     &lt;span&gt;         &lt;tag&gt;             hello world         &lt;/tag&gt;     &lt;/span&gt; &lt;/div&gt;   자손 선택자 (selector1)&gt;(selector2) : 해당 선택자의 자식 요소 중 하나를 지정해 선택하는 선택자   div &gt; tag{      color: purple; } ... &lt;div&gt;     &lt;tag&gt;         hello world     &lt;/tag&gt; &lt;/div&gt;   형제 선택자 (selector1)~(selector2) : 해당 선택자의 형제 요소 중 하나를 지정해 선택하는 선택자   div ~ tag{      color: pink; } ... &lt;div&gt;     hello world &lt;/div&gt; &lt;tag&gt;     ! &lt;/tag&gt;   인접 형제 선택자 (selector1)+(selector2) : 선택자의 형제 중 바로 다음에 오는 요소를 선택하는 선택자   div + tag{      color: gray; } ... &lt;div&gt;     hello world &lt;/div&gt; &lt;tag&gt;     ? &lt;/tag&gt; &lt;tag&gt;     ! &lt;/tag&gt; /* 첫번째 형제 요소인 \"?\"가 회색으로 출력 */   속성 선택자 [attr] : 태그에 해당 속성이 명시되어 있는 요소들을 모두 선택하는 선택자     [attr = \"A\"] : 해당 속성이 명시되어 있는 요소들 중 값이 일치하는 것들만 선택   [attr ~= \"B\"] : 해당 속성이 명시되어 있는 요소들 (띄어쓰기로 여러 값이 저장된 요소 포함) 중 값이 일치하는 것들만 선택   [attr ^= \"C\"] : 해당 속성이 명시되어 있는 요소들 중 값을 접두사로 가지는 것들만 선택   [attr $= \"D\"] : 해당 속성이 명시되어 있는 요소들 중 값을 접미사로 가지는 것들만 선택   [attr *= \"E\"] : 해당 속성이 명시되어 있는 요소들 중 값을 포함하는 것들만 선택   tag[attributes]{      color: white; } ... &lt;tag attributes=\"true\"&gt;     hello world &lt;/tag&gt;  tag[attributes=\"attr\"]{      color: yellow; } ... &lt;tag attributes=\"attr\"&gt;     hello world &lt;/tag&gt;   가상 클래스 선택자 (Pseudo-class Selector) : 가상 클래스를 선택하는 선택자     앵커 가상 클래스 : 어떤 요소에 대한 스타일을 추가하는 선택자            link : 사용자가 이전에 방문하지 않은 요소에 대한 스타일을 추가하는 선택자       visited : 사용자가 이전에 방문하였던 요소에 대한 스타일을 추가하는 선택자       :hover : 사용자가 해당 요소에 커서를 접근시킬 때의 동적인 스타일을 추가하는 선택자       :active : 사용자가 해당 요소를 클릭할 때의 동적인 스타일을 추가하는 선택자       :focus : 사용자가 해당 요소에 키보드로 포커싱할 때의 동적인 스타일을 추가하는 선택자           a:link {     color: black; } a:visited {     color: gray; } a:hover {     color: red; } a:active {     color: gray; } a:focus {     color: yellow; }      순서 가상 클래스 : 순서가 존재하는 요소의 특정 항목에 대한 스타일을 추가하는 선택자            :first-child : li의 첫번쩨 요소에 대한 스타일를 추가하는 선택자       :last-child : li의 마지막 요소에 대한 스타일를 추가하는 선택자       :nth-child(n) : li의 n번쩨 요소에 대한 스타일를 추가하는 선택자           ol li:first-child {     border-top: none; } ol li:last-child {     border-top: none; } ol li:nth-child(2) {     border-top: none; }   가상 요소 선택자 (Pseudo-element Selector) : 가상 요소를 선택하는 선택자     선택된 요소의 태그 안에 가상 요소가 자식 요소로 위치 (::before &gt; 컨텐츠 &gt; ::after 순)   선택자::가상 요소 {     property: value; }      ::before : 요소 내용의 앞에 새 컨텐츠를 추가하는 선택자   tag::before {     content: \"Hello, \"; }      ::after : 요소 내용의 뒤에 새 컨텐츠를 추가하는 선택자   tag::after {     content: \"World! \"; }      ::first-letter : 요소의 첫번째 글자를 선택하는 선택자   tag::first-line {   color: orange; }      ::first-line : 요소의 첫번째 줄을 선택하는 선택자   tag::first-line {   color: orange; }      현재까지 배운 것을 토대로 여러 HTML 문서로 이루어진 가상의 웹사이트를 디자인한다고 가정해보자.         태그나 문서에 스타일을 적용하는 경우를 배제하고, 스타일시트에 모든 스타일 정보가 존재한다 가정하자.     모든 HTML문서가 &lt;body&gt;, &lt;main&gt;, &lt;section&gt;, &lt;p&gt;만 존재하고, 다음의 구조를 이룬다.       &lt;body&gt;   &lt;main&gt;     &lt;section&gt;       &lt;p&gt; Hello World! &lt;/p&gt;     &lt;/section&gt;   &lt;/main&gt; &lt;/body&gt;            그리고 스타일시트에는 다음과 같은 CSS 선택자만 사용한다고 가정하자.                문서의 전반적인 스타일을 적용하기 위한 &lt;body&gt;를 지정할 선택자         메인 컨텐츠의 스타일을 적용하기 위한 &lt;main&gt;를 지정할 선택자         세부 컨텐츠의 스타일을 적용하기 위한 &lt;section&gt;를 지정할 선택자         문단의 스타일을 적용하기 위한 &lt;p&gt;를 지정할 선택자                   A는 모든 문서의 “Hello World!”를 빨간색으로 적용하고 싶어서 태그에 스타일을 적용했다.     p {    color:green; }       그런데 B가 특정 문서의 “Hello World!”를 초록색으로 적용하고 싶어서 id와 #를 사용했다.     &lt;p id=\"sec2\"&gt; Hello World! &lt;/p&gt;      #sec {    color:green; }       A가 그걸 보고     p {    color:green; }            CSS는 시대가 요구하는 의도대로 설계되었으나, 기존의 설계와 새로운 요구사항에 괴리가 발생                문서를 잘 표현하기 위해 설계된 방법 vs 어플리케이션을 잘 표현하기 위해 설계된 방법                        이를 절충하기 위해 기존의 의도와는 다른 방식으로 CSS를 사용해 화면을 표현                                     CSS가 웹 문서를 웹 사이트에 표현하는 데에서 시작되어 대규모 웹 서비스를 만드는 데에 한계점 존재                그러므로, 이를 극복하기 위한 최신 기술들을 꾸준히 학습하고, 프로젝트에 도입해야 된다!                          CSS 변수 (CSS variables) : CSS 사용자 속성 (CSS 일반 속성과 동일한 문법으로 변수를 정의 가능)            var() 함수 : CSS 변수값을 읽는 데에 사용       :root : CSS 변수를 전역 변수로 정의           .ex {     --variable-name: value; }  :root {        --variable-name: value; }   # 박스 모델 (Box Model) 관련 CSS 속성     모든 HTML 엘리멘트들은 박스 모양으로 구성되어 있음            마진 영역 (Margin Area)       테두리 영역 (Border Area)       패딩 영역 (Padding Area)       컨텐츠 영역 (Content Area)                         마진 영역 (Margin Area)                      테두리 영역 (Border Area)                              패딩 영역 (Padding Area)                                      컨텐츠 영역 (Content Area)                                               width, height : 박스의 가로, 세로 길이를 지정하는 속성   &lt;div style=\"     position: relative;     background-color: black;     margin-left: auto;     margin-right: auto;     width: 200px;     height: 200px;\"&gt;     &lt;div style=\"         position: absolute;         background-color: white;         margin-left: auto;         margin-right: auto;         width: 70%;         height: 70%;\"&gt;     &lt;/div&gt; &lt;/div&gt;                margin : 마진에 값을 부여하는 속성     margin-top: : 위쪽 마진에 값을 부여하는 속성   margin-right: : 오른쪽 마진에 값을 부여하는 속성   margin-bottom: : 아랫쪽 마진에 값을 부여하는 속성   margin-left: : 왼쪽 마진에 값을 부여하는 속성   .box {     margin: xx yy zz ww;     /* xx는 위쪽 마진, yy는 오른쪽 마진, zz는 아랫쪽 마진, ww는 왼쪽 마진 */     margin-top: xx;     margin-right: yy;     margin-bottom: zz;     margin-left: ww; }                 margin-top                                       margin-left                                              테두리 영역 (Border Area)                                      패딩 영역 (Padding Area)                                              컨텐츠 영역 (Content Area)                                                                margin-right                         margin-bottom        padding : 패딩에 값을 부여하는 속성     padding-top: : 위쪽 패딩에 값을 부여하는 속성   padding-right: : 오른쪽 패딩에 값을 부여하는 속성   padding-bottom: : 아랫쪽 패딩에 값을 부여하는 속성   padding-left: : 왼쪽 패딩에 값을 부여하는 속성   .box {     padding: xx yy zz ww;     /* xx는 위쪽 패딩, yy는 오른쪽 패딩, zz는 아랫쪽 패딩, ww는 왼쪽 패딩 */     padding-top: xx;     padding-right: xx;     padding-bottom: xx;     padding-left: xx; }                 마진 영역 (Margin Area)                  테두리 영역 (Border Area)              padding-top                                        padding-left                                          컨텐츠 영역 (Content Area)                           padding-right                  padding-bottom                  border : 테두리에 값을 부여하는 속성                                               border: 속성                 설명                                                             기본값                 medium, none, color                                           상속 여부                 N                                           애니메이션 여부                 Y                                           문법                                                                                                                                                                  border: 값                                     설명                                                                                                                                                                 border-width                                                                                                                                                                                                                                 border-width: 값                                                     테두리의 두께 정도 지정                                                                                                                                                                                                                                                 medium                                                     기본값                                                                                                                                                       thick                                                     기본값보다 굵게                                                                                                                                                       thin                                                     기본값보다 얇게                                                                                                                                                       %, px, em, rem                                                     직접 테두리의 두께 정도 지정                                                                                                                                                                                                                                                                                   border-style                                                                                                                                                                                                                                 border-style: 값                                                     테두리의 모양 지정                                                                                                                                                                                                                                                 none                                                     테두리를 생성하지 않음 (기본값)                                                                                                                                                       dashed, dotted, double, groove, hidden, inset,  outset, ridge, solid                                                     여러 모양의 테두리를 생성                                                                                                                                                                                                                                                                                   border-color                                     테두리의 색상 지정                                                                                                       border-radius                                     %, px, em, rem 등으로 테두리의 모서리에 대한 둥근 정도 지정                                                                                      top-left-x                                             top-right-x                                             bottom-right-x                                             bottom-left-x                                             top-left-y                                             top-right-y                                             bottom-right-y                                             bottom-left-y                                                                                                                                                                                                                                         &lt;div style=\"     background-color: black;     text-align: center;     margin-left: auto;     margin-right: auto;     padding-top: 2%;     padding-bottom: 2%;     \"&gt;     &lt;div style=\"         border: dashed 5px red;         margin-left: 5%;         margin-right: 5%;         border-radius: 25%;         padding-bottom: inherit;\"&gt;     dashed 5px red (border-radius: 25%)         &lt;div style=\"             border: dotted 3px blue;             margin-left: inherit;             margin-right: inherit;             padding-bottom: inherit;\"&gt;         dotted 3px blue             &lt;div style=\"                 border: double 7px green;                 margin-left: inherit;                 margin-right: inherit;                 padding-bottom: inherit;\"&gt;             double 7px green                 &lt;div style=\"                     border: solid 3px gray;                     margin-left: inherit;                     margin-right: inherit;                     padding-bottom: inherit;\"&gt;                     solid 3px gray                 &lt;/div&gt;             &lt;/div&gt;         &lt;/div&gt;     &lt;/div&gt; &lt;/div&gt;             dashed 5px red (border-radius: 25%)                  dotted 3px blue                          double 7px green                                      solid 3px gray                                               box-sizing : 박스 크기의 기준을 지정하는 속성                                               box-sizing: 속성                 설명                                                             기본값                 content-box                                           상속 여부                 N                                           애니메이션 여부                 N                                           문법                                                                                                                                                                  box-sizing: 값                                     설명                                                                                                                                                                 content-box                                     컨텐츠 영역을 기준으로 지정                                                                                                       border-box                                     테두리 영역을 기준으로 지정                                                                                                                                                           .cb {     box-sizing: content-box; } .bb {     box-sizing: border-box; } .iib {     box-sizing: initial; } .ihb {     box-sizing: inherit; }   # 배경 관련 CSS 속성   background-color : 배경의 색상을 지정하는 속성                                               background-color: 속성                 설명                                                             기본값                 transparent                                           상속 여부                 N                                           애니메이션 여부                 Y                                           문법                                                                                                                                                                  background-color: 값                                     설명                                                                                                                                                                 transparent                                     배경색 없음                                                                                                       color                                     배경색 지정                                                                                                                                                           &lt;div style=\"     position: relative;     background-color: black;     width: 200px;     height: 200px;\"&gt;     &lt;div style=\"         position: absolute;         background-color: white;         margin-left: auto;         margin-right: auto;         width: 70%;         height: 70%;\"&gt;         &lt;div style=\"             position: absolute;             background-color: black;             margin-left: auto;             margin-right: auto;             width: 70%;             height: 70%;\"&gt;         &lt;/div&gt;     &lt;/div&gt; &lt;/div&gt;                                  background-image : 배경 이미지를 지정하는 속성                                               background-image: 속성                 설명                                                             기본값                 none                                           상속 여부                 N                                           애니메이션 여부                 N                                           문법                                                                                                                                                                  background-image: 값                                     설명                                                                                                                                                                 none                                     배경 이미지 사용 안함                                                                                                       url(\"\")                                     배경 이미지 URL 지정                                                                                                                                                              background-attachment : 배경 이미지의 스크롤 여부를 지정하는 속성            scroll : 내용을 스크롤하면 배경 이미지는 스크롤되지 않음       fixed : 배경 이미지가 움직이지 않음       local : 내용을 스크롤하면 배경 이미지는 스크롤       initial : 현재의 속성값을 기본값으로 지정       inherit : 부모 요소의 속성값 상속           background-position : 배경 이미지의 위치를 지정하는 속성            x y : 가로와 세로 위치 지정 (left-right, center, top-bottom, %, length)       initial : 현재의 속성값을 기본값으로 지정       inherit : 부모 요소의 속성값 상속           background-size : 배경 이미지의 크기를 지정하는 속성            length : 배경 이미지의 가로와 세로 크기나 백분율을 직접 지정       cover : 가로/세로 비율을 유지하면서, 배경을 다 채울 수 있도록 이미지 조절       contain : 가로/세로 비율을 유지하면서, 배경을 벗어나지 않도록 이미지 조절       initial : 현재의 속성값을 기본값으로 지정       inherit : 부모 요소의 속성값 상속           &lt;div style=\"background-image: https://cdn.pixabay.com/photo/2020/10/21/04/01/leaves-5672036_1280.png;\"&gt;     background-image &lt;/div&gt;   overflow : 컨텐츠가 요소의 크기를 벗어날 때의 처리 방법을 지정하는 속성                                               overflow: 속성                 설명                                                             기본값                 visible                                           상속 여부                 N                                           애니메이션 여부                 N                                           문법                                                                                                                                                                  overflow: 값                                     설명                                                                                                                                                                 visible                                     박스를 넘어가도 내용을 표시                                                                                                       hidden                                     박스를 넘어간 부분은 표시하지 않음                                                                                                       scroll                                     무조건 스크롤바 표시                                                                                                       auto                                     박스를 넘어가면 스크롤바 표시                                                                                                                                                           &lt;div&gt;     &lt;div style=\"         width: 20%;         height: 150px;         background-color: black;         float: left;         overflow: visible;         margin-right: 5%;\"&gt;             visible     &lt;/div&gt;     &lt;div style=\"         width: 20%;         height: 150px;         background-color: black;         float: left;         overflow: hidden;         margin-right: 5%;\"&gt;             hidden     &lt;/div&gt;     &lt;div style=\"         width: 20%;         height: 150px;         background-color: black;         float: left;         overflow: scroll;         margin-right: 5%;\"&gt;             scroll     &lt;/div&gt;     &lt;div style=\"         width: 20%;         height: 150px;         background-color: black;         float: left;         overflow: auto;         margin-right: 5%\"&gt;             auto     &lt;/div&gt; &lt;/div&gt;                         자기가 무엇에 홀려 있음을 깨닫는다. 그 넉넉한 뱃길에 여태껏 알아보지 못하고, 숨바꼭질을 하고, 피하려 하고 총으로 쏘려고까지 한 일을 생각하면, 무엇에 씌었던 게 틀림없다. 큰 새 작은 새는 좋아서 미칠 듯이, 물속에 가라앉을 듯, 탁 스치고 지나가는가 하면, 되돌아오면서, 그렇다고 한다.                           자기가 무엇에 홀려 있음을 깨닫는다. 그 넉넉한 뱃길에 여태껏 알아보지 못하고, 숨바꼭질을 하고, 피하려 하고 총으로 쏘려고까지 한 일을 생각하면, 무엇에 씌었던 게 틀림없다. 큰 새 작은 새는 좋아서 미칠 듯이, 물속에 가라앉을 듯, 탁 스치고 지나가는가 하면, 되돌아오면서, 그렇다고 한다.                           자기가 무엇에 홀려 있음을 깨닫는다. 그 넉넉한 뱃길에 여태껏 알아보지 못하고, 숨바꼭질을 하고, 피하려 하고 총으로 쏘려고까지 한 일을 생각하면, 무엇에 씌었던 게 틀림없다. 큰 새 작은 새는 좋아서 미칠 듯이, 물속에 가라앉을 듯, 탁 스치고 지나가는가 하면, 되돌아오면서, 그렇다고 한다.                           자기가 무엇에 홀려 있음을 깨닫는다. 그 넉넉한 뱃길에 여태껏 알아보지 못하고, 숨바꼭질을 하고, 피하려 하고 총으로 쏘려고까지 한 일을 생각하면, 무엇에 씌었던 게 틀림없다. 큰 새 작은 새는 좋아서 미칠 듯이, 물속에 가라앉을 듯, 탁 스치고 지나가는가 하면, 되돌아오면서, 그렇다고 한다.         z-index : 요소들의 수직 위치를 지정하는 속성     숫자가 클수록 위에, 숫자가 작을수록 아래에 위치   // 수직 위치를 역순으로 배치 &lt;div style=\"     width: 100px; \theight: 100px; \tposition: absolute;     top: 30px; \tleft: 210px;     background-color: red;     z-index: 1;\"&gt;&lt;/div&gt; &lt;div style=\"width: 100px; \theight: 100px; \tposition: absolute;     top: 60px; \tleft: 270px;     background-color: blue;\"&gt;&lt;/div&gt; &lt;div style=\"width: 100px; \theight: 100px;     position: absolute;     top: 90px; \tleft: 240px;     background-color: green;     z-index: -1;\"&gt;&lt;/div&gt;   # 글자 관련 CSS 속성   color : 글자의 색상을 지정하는 속성                                               color: 속성                 설명                                                             기본값                 #000000                                           상속 여부                 Y                                           애니메이션 여부                 Y                                           문법                                                                                                                                                                  color: 값                                     설명                                                                                                                                                                 color                                     색상 지정                                                                                                                                                           &lt;div style=\"color:red\"&gt;     hello world &lt;/div&gt;       hello world   font-size : 글자의 크기를 지정하는 속성                                               font-size: 속성                 설명                                                             기본값                 medium                                           상속 여부                 Y                                           애니메이션 여부                 Y                                           문법                                                                                                                                                                  font-size: 값                                     설명                                                                                                                                                                 medium                                     웹 브라우저에서 정한 기본값                                                                                                       xx-small, x-small, small, large, x-large, xx-large                                     기본값에 대한 상대적인 크기                                                                                                       smaller, larger                                     부모 요소의 글자 크기에 대한 상대적인 크기                                                                                                       px                                     글자 크기를 직접 지정                                                                                                       %, em                                     부모 요소의 글자 크기에 대한 상대적인 글자 크기의 비율을 직접 지정                                                                                                       rem                                     최상위 요소의 글자 크기에 대한 상대적인 글자 크기의 비율을 직접 지정                                                                                                                                                           &lt;div style=\"font-size: xx-small\"&gt;xx-small&lt;/div&gt; &lt;div style=\"font-size: x-small\"&gt;x-small&lt;/div&gt; &lt;div style=\"font-size: small\"&gt;small&lt;/div&gt; &lt;div style=\"font-size: medium\"&gt;medium&lt;/div&gt; &lt;div style=\"font-size: large\"&gt;large&lt;/div&gt; &lt;div style=\"font-size: x-large\"&gt;x-large&lt;/div&gt; &lt;div style=\"font-size: xx-large\"&gt;xx-large&lt;/div&gt;        xx-small     x-small     small     medium     large     x-large     xx-large   &lt;div style=\"font-size: smaller\"&gt;smaller&lt;/div&gt; &lt;div&gt;medium&lt;/div&gt; &lt;div style=\"font-size: larger\"&gt;larger&lt;/div&gt;        smaller     medium     larger   &lt;div style=\"font-size: 10px\"&gt;     10px     &lt;i style=\"font-size: 200%;\"&gt;         20px         &lt;span style=\"font-size: 0.8em\"&gt;             16px             &lt;b style=\"font-size: 1rem\"&gt;                 1rem             &lt;/b&gt;         &lt;/span&gt;     &lt;/i&gt; &lt;/div&gt;        10px              20px                      16px                              1rem                              font-family : 글꼴을 지정하는 속성                                               font-family: 속성                 설명                                                             기본값                 웹 브라우저의 기본 글꼴                                           상속 여부                 Y                                           애니메이션 여부                 N                                           문법                                                                                                                                                                  font-family: 값                                     설명                                                                                                                                                                 font                                     글꼴 이름 / 글꼴 유형                                                                                                                                                           &lt;div style=\"font-family: (지정할 글꼴);\"&gt;     지정된 글꼴로 출력합니다. &lt;/div&gt;   &lt;div style=\"font-family: (지정할 글꼴1), (지정할 글꼴2);\"&gt;     지정된 글꼴1로 출력하되 (i) 해당 글꼴이 존재하지 않는다면 (ii) 표현할 수 없다면, 지정된 글꼴2로 출력합니다. &lt;/div&gt;   font-weight : 글자의 굵기 정도를 지정하는 속성     나타낼 수 있는 굵기의 정도는 글꼴마다 다름                                               font-weight: 속성                 설명                                                             기본값                 normal                                           상속 여부                 Y                                           애니메이션 여부                 Y                                           문법                                                                                                                                                                  font-weight: 값                                     설명                                                                                                                                                                 normal                                     보통 굵기 (400)                                                                                                       bold                                     굵은 굵기 (700)                                                                                                       bolder                                     상속된 값보다 굵은 크기                                                                                                       lighter                                     상속된 값보다 얇은 크기                                                                                                       number                                     굵기 정도를 직접 지정                                                                                                                                                           &lt;div style=\"font-weight: normal\"&gt;     &lt;div style=\"font-weight: lighter\"&gt;normal-lighter&lt;/div&gt;     normal     &lt;div style=\"font-weight: bolder\"&gt;normal-bolder&lt;/div&gt; &lt;/div&gt; &lt;div style=\"font-weight: bold\"&gt;     &lt;div style=\"font-weight: lighter\"&gt;bold-lighter&lt;/div&gt;     bold     &lt;div style=\"font-weight: bolder\"&gt;bold-bolder&lt;/div&gt; &lt;/div&gt;                 normal-lighter         normal         normal-bolder                   bold-lighter         bold         bold-bolder        # 텍스트 관련 CSS 속성   text-align : 텍스트를 정렬하는 속성                                               text-align: 문법                 설명                                                             left                 왼쪽 정렬                                           right                 오른쪽 정렬                                           center                 가운데 정렬                                           justify                 양쪽 정렬                              &lt;div style=\"text-align: left;\"&gt;바다는 크레파스보다 진한 푸르고 육중한 비늘을 무겁게 뒤채면서, 숨을 쉰다.&lt;/div&gt; &lt;div style=\"text-align: right;\"&gt;중립국으로 가는 석방 포로를 실은 인도 배 타고르호는, 흰 페인트로 말쑥하게 칠한 삼천 톤의 몸을 떨면서, 물건처럼 빼곡이 들어찬 동지나 바다의 훈김을 헤치며 미끄려져 간다.&lt;/div&gt; &lt;div style=\"text-align: center;\"&gt;석방 포로 이명준(李明俊)은, 오른편의 곧장 갑판으로 통한 사닥다리를 타고 내려가, 배 뒤쪽 난간에 가서, 거기에 기대어 선다.&lt;/div&gt; &lt;div style=\"text-align: justify;\"&gt;담배를 꺼내 물고 라이터를 켜댔으나 바람에 이내 꺼지고 하여, 몇 번이나 그르친 끝에, 그 자리에 쭈그리고 앉아서 오른팔로 얼굴을 가리고 간신히 댕긴다.&lt;/div&gt;        바다는 크레파스보다 진한 푸르고 육중한 비늘을 무겁게 뒤채면서, 숨을 쉰다.     중립국으로 가는 석방 포로를 실은 인도 배 타고르호는, 흰 페인트로 말쑥하게 칠한 삼천 톤의 몸을 떨면서, 물건처럼 빼곡이 들어찬 동지나 바다의 훈김을 헤치며 미끄려져 간다.     석방 포로 이명준(李明俊)은, 오른편의 곧장 갑판으로 통한 사닥다리를 타고 내려가, 배 뒤쪽 난간에 가서, 거기에 기대어 선다.     담배를 꺼내 물고 라이터를 켜댔으나 바람에 이내 꺼지고 하여, 몇 번이나 그르친 끝에, 그 자리에 쭈그리고 앉아서 오른팔로 얼굴을 가리고 간신히 댕긴다.   text-decoration : 텍스트을 꾸미는 선을 지정하는 속성                                               text-decoration: 속성                 설명                                                             기본값                 none                                           상속 여부                 N                                           애니메이션 여부                 N                                           문법                                                                                                                                                                  text-decoration: 값                                     설명                                                                                                                                                                 none                                     선을 만들지 않음                                                                                                       line-through                                     취소선 생성                                                                                                       overline                                     윗줄 생성                                                                                                       underline                                     밑줄 생성                                                                                                                                                           &lt;div style=\"text-decoration: none\"&gt;none&lt;/div&gt; &lt;div style=\"text-decoration: line-through\"&gt;line-through&lt;/div&gt; &lt;div style=\"text-decoration: overline\"&gt;overline&lt;/div&gt; &lt;div style=\"text-decoration: underline\"&gt;underline&lt;/div&gt; &lt;div style=\"text-decoration: line-through overline underline\"&gt;text-decoration&lt;/div&gt;        none     line-through     overline     underline     text-decoration   columns : 여러 개의 문단을 만드는 속성                                               columns: 속성                 설명                                                             기본값                 auto                                           속성값                 문단의 최대 개수 or 문단의 최소 가로 길이                               &lt;div style=\"columns: 3;\"&gt;자기가 무엇에 홀려 있음을 깨닫는다. 그 넉넉한 뱃길에 여태껏 알아보지 못하고, 숨바꼭질을 하고, 피하려 하고 총으로 쏘려고까지 한 일을 생각하면, 무엇에 씌었던 게 틀림없다. 큰 새 작은 새는 좋아서 미칠 듯이, 물속에 가라앉을 듯, 탁 스치고 지나가는가 하면, 되돌아오면서, 그렇다고 한다. 무덤을 이기고 온, 못 잊을 고운 각시들이, 손짓해 본다. 내 딸아. 비로소 마음이 놓인다. 옛날, 어느 벌판에서 겪은 신내림이, 문득 떠오른다. 그러자, 언젠가 전에, 이렇게 이 배를 타고 가다가, 그 벌판을 지금처럼 떠올린 일이, 그리고 딸을 부르던 일이, 이렇게 마음이 놓이던 일이 떠올랐다. 거울 속에 비친 남자는 활짝 웃고 있다.&lt;/div&gt;        자기가 무엇에 홀려 있음을 깨닫는다. 그 넉넉한 뱃길에 여태껏 알아보지 못하고, 숨바꼭질을 하고, 피하려 하고 총으로 쏘려고까지 한 일을 생각하면, 무엇에 씌었던 게 틀림없다. 큰 새 작은 새는 좋아서 미칠 듯이, 물속에 가라앉을 듯, 탁 스치고 지나가는가 하면, 되돌아오면서, 그렇다고 한다. 무덤을 이기고 온, 못 잊을 고운 각시들이, 손짓해 본다. 내 딸아. 비로소 마음이 놓인다. 옛날, 어느 벌판에서 겪은 신내림이, 문득 떠오른다. 그러자, 언젠가 전에, 이렇게 이 배를 타고 가다가, 그 벌판을 지금처럼 떠올린 일이, 그리고 딸을 부르던 일이, 이렇게 마음이 놓이던 일이 떠올랐다. 거울 속에 비친 남자는 활짝 웃고 있다.   &lt;div style=\"columns: 150px;\"&gt;자기가 무엇에 홀려 있음을 깨닫는다. 그 넉넉한 뱃길에 여태껏 알아보지 못하고, 숨바꼭질을 하고, 피하려 하고 총으로 쏘려고까지 한 일을 생각하면, 무엇에 씌었던 게 틀림없다. 큰 새 작은 새는 좋아서 미칠 듯이, 물속에 가라앉을 듯, 탁 스치고 지나가는가 하면, 되돌아오면서, 그렇다고 한다. 무덤을 이기고 온, 못 잊을 고운 각시들이, 손짓해 본다. 내 딸아. 비로소 마음이 놓인다. 옛날, 어느 벌판에서 겪은 신내림이, 문득 떠오른다. 그러자, 언젠가 전에, 이렇게 이 배를 타고 가다가, 그 벌판을 지금처럼 떠올린 일이, 그리고 딸을 부르던 일이, 이렇게 마음이 놓이던 일이 떠올랐다. 거울 속에 비친 남자는 활짝 웃고 있다.&lt;/div&gt;        자기가 무엇에 홀려 있음을 깨닫는다. 그 넉넉한 뱃길에 여태껏 알아보지 못하고, 숨바꼭질을 하고, 피하려 하고 총으로 쏘려고까지 한 일을 생각하면, 무엇에 씌었던 게 틀림없다. 큰 새 작은 새는 좋아서 미칠 듯이, 물속에 가라앉을 듯, 탁 스치고 지나가는가 하면, 되돌아오면서, 그렇다고 한다. 무덤을 이기고 온, 못 잊을 고운 각시들이, 손짓해 본다. 내 딸아. 비로소 마음이 놓인다. 옛날, 어느 벌판에서 겪은 신내림이, 문득 떠오른다. 그러자, 언젠가 전에, 이렇게 이 배를 타고 가다가, 그 벌판을 지금처럼 떠올린 일이, 그리고 딸을 부르던 일이, 이렇게 마음이 놓이던 일이 떠올랐다. 거울 속에 비친 남자는 활짝 웃고 있다.   # 애니메이션 관련 CSS 속성   transform: : 요소의 형태를 변화시키는 속성   transform: rotate( angle )  /* 요소를 angle (각의 크기)만큼 회전 (단위 : deg, turn) */ transform: rotateX( angle ) /* 가로를 축으로 회전 */ transform: rotateY( angle ) /* 세로를 축으로 회전 */  transform: translate( Xpx, Ypx ) /* 요소를 가로축, 세로축 기준으로 이동 */ transform: translateX( px ) /* 가로축을 기준으로 이동 */ transform: translateY( px ) /* 세로축을 기준으로 이동 */  transform: scale( X ) /* 가로와 세로를 모두 X배만큼 확대 */ transform: scale( X, Y ) /* 가로로 X배만큼 확대, 세로로 Y배만큼 확대 */ transform: scaleX( X ) /* 가로로 X배만큼 확대 */ transform: scaleY( Y ) /* 세로로 Y배만큼 확대 */  transform: skewX( Xdeg ) // 가로 뱡향으로 비틈 transform: skewY( Ydeg ) // 세로 뱡향으로 비틈 transform: skewX( Xdeg, Ydeg ) // 가로 뱡향으로 X도만큼, 세로 방향으로 Y도만큼 비틈   animation : 요소에 애니메이션 효과를 넣는 속성   @keyframes name { /* 애니메이션에 이름을 붙이고, 어떤 모양에서 어떤 모양으로 바꿀지 지정 */ 0% { ... } /* 시작할 때 요소의 모양 지정 */ n% { ... } /* n%일 때 요소의 모양 지정 */ 100% { ... } /* 끝날 때 요소의 모양 지정 */}  animation-name: /* 어떤 이름의 @keyframes를 사용할지 지정 */;   animation-duration: /* 애니메이션이 진행될 시간 지정 (단위: s 또는 ms) */;  animation-timing-function: /* 애니메이션의 진행 속도 지정 */   /* cubic-bezier(n,n,n,n) 함수 : 애니메이션을 3차원 베지에 곡선에 맞게 표현 */   /* linear : cubic-bezier(0,0,1,1). 애니메이션 효과가 처음부터 끝까지 일정한 속도로 진행 */   /* ease : 기본값. cubic-bezier(0.25,0.1,0.25,1). 애니메이션 효과가 천천히 시작되어 빨라졌다가 다시 느려짐 */   /* ease-in : cubic-bezier(0.42,0,1,1). 애니메이션 효과가 천천히 시작됨 */   /* ease-out : cubic-bezier(0,0,0.58,1). 애니메이션 효과가 천천히 끝남 */   /* ease-in-out : cubic-bezier(0.42,0,0.58,1). 애니메이션 효과가 천천히 시작되어 천천히 끝남 */   /* steps(1,...) 함수 : 애니메이션을 스텝에 맞게 끝어서 표현 */   /* step-start : steps(1,start). 시작하는 지점에 스텝 */   /* step-end : steps(1,end). 끝나는 지점에 스텝 */  animation-delay: /* 애니메이션이 시작하기 전에 대기하는 시간 지정 (단위: s 또는 ms) */;  animation-iteration-count: /* 애니메이션이 반복하는 횟수 지정 */;  animation-direction: /* 애니메이션이 진행하는 방향 지정 (normal | reverse | alternate | alternate-reverse) */;  animation-fill-mode: /* 애니메이션 종료 후의 상태 지정 (none | forwards | backwards | both) */;  animation-play-state : /* 애니메이션의 진행 여부 지정 (running | paused) */;   transition: : 요소에 트랜지션 효과를 넣는 속성   transition-property: /* 트랜지션의 속성 지정 (none | all | property) */;  transition-timing-function: /* 트랜지션의 진행 속도 지정 */;   /* cubic-bezier(n,n,n,n) 함수 : 애니메이션을 3차원 베지에 곡선에 맞게 표현 */   /* linear : cubic-bezier(0,0,1,1). 애니메이션 효과가 처음부터 끝까지 일정한 속도로 진행 */   /* ease : 기본값. cubic-bezier(0.25,0.1,0.25,1). 애니메이션 효과가 천천히 시작되어 빨라졌다가 다시 느려짐 */   /* ease-in : cubic-bezier(0.42,0,1,1). 애니메이션 효과가 천천히 시작됨 */   /* ease-out : cubic-bezier(0,0,0.58,1). 애니메이션 효과가 천천히 끝남 */   /* ease-in-out : cubic-bezier(0.42,0,0.58,1). 애니메이션 효과가 천천히 시작되어 천천히 끝남 */   /* steps(1,...) 함수 : 애니메이션을 스텝에 맞게 끝어서 표현 */   /* step-start : steps(1,start). 시작하는 지점에 스텝 */   /* step-end : steps(1,end). 끝나는 지점에 스텝 */  transition-duration: /* 트랜지션이 진행될 시간 지정 (단위: s 또는 ms) */;  transition-delay: /* 트랜지션이 시작하기 전에 대기하는 시간 지정 (단위: s 또는 ms) */;  ","categories": ["Frontend"],
        "tags": ["HTML","CSS"],
        "url": "/frontend/css1/",
        "teaser": null
      },{
        "title": "[DevOps] 깃 (Git)",
        "excerpt":"버전 관리 (Version Control) : 특정한 시간 기준으로 파일 변화를 저장하고 관리      버전 (Version) : 어떤 파일이 수정된 기록이나 그 파일이 수정된 내용   1. 로컬 버전 관리 (Local Version Control)     로컬 사용자가 서버 없이 로컬 컴퓨터 내의 데이터베이스를 이용해 파일의 변경 정보 관리            협업에서 사용하기 어려움, 내부 정보가 손상되면 복구할 방법이 없음           2. 중앙집중식 버전 관리 (Central Version Control) : 서브 머신 (SVN)     클라이언트가 최종본를 관리하는 데이터베이스 서버로부터 개별 파일을 로컬에 다운로드, 수정본을 서버에 올림            데이터베이스 서버에 의존적, 협업 규모가 커지면 수정 충돌 문제 발생 (유사 사례 : 나무위키의 편집 충돌)           3. 분산형 버전 관리 (Distributed Version Control) : 깃 (Git)     클라이언트가 원격 저장소에서 전체 기록과 각 기록을 추적할 수 있는 정보를 포함한 데이터를 로컬 저장소에 저장            클라이언트가 자신의 작업을 원격 저장소에 독립적인 로컬 저장소에 버전별로 저장하고 관리       여러 클라이언트들의 작업을 여러 로컬 저장소로 다원화해 각 클라이언트는 충돌의 염려 없이 작업 가능       필요한 경우에 클라이언트가 서버의 원격 저장소에 원하는 버전을 통합 (서버 단위의 편집 버전을 +1)                    클라이언트는 원격 저장소에 자신의 작업을 통합시킬 때만 서버와 통신하면 됨                           깃 (Git) : 분산형 버전 관리 시스템 (Distributed Version Control System)     터미널 창에 다음 명령어를 입력해 homebrew를 통해 git 설치   brew install git   .gitignore 디렉터리 : 버전 관리를 하지 않을 파일이나 디렉터리, 혹은 파일 확장자를 설정      특정한 이름을 가진 파일 제외   filename.txt      특정한 확장자를 가진 파일 제외   *.txt      특정한 경로 아래의 파일 제외   folder/      특정한 경로 아래의 특정한 확장자를 가진 파일 제외   folder/filename.txt      예외 만들기   !filename.txt   README.md 파일 : 프로젝트에 대한 설명과 사용 방법, LICENSE 등의 내용을 작성     기존의 Markdown에 깃허브에서만 사용 가능한 기능을 추가한 Github Flavored Markdown을 이용   Github 프로젝트 레포지토리 페이지에서 README.md가 표현된 것을 확인 가능            자신의 아이디와 같은 이름의 레포지토리의 README.md는 해당 사용자의 깃허브 프로필에 표시됨                 뱃지 : 해당 사이트에서 뱃지의 구성 요소들을 직접 지정해 생성한 후 img 태그로 삽입   &lt;img src=\"https://img.shields.io/badge/(아이콘 내용)-(아이콘 색상)?style=flat-square&amp;logo=(로고 이름)&amp;logoColor=(로고 색상)\"/&gt;         방문자 수 : 해당 사이트에서 Target URL과 로고를 선택한 후 a 태그로 삽입   &lt;a href=\"https://github.com/pocj8ur4in\"&gt; ... &lt;/a&gt;         Solved.ac 티어 : 해당 사이트에서 마크다운 언어로 삽입   [![Solved.ac 프로필] (http://mazassumnida.wtf/api/v2/generate_badge?boj={백준ID})] (https://solved.ac/백준ID)         Solved.ac 잔디 : 해당 사이트에서 img 태그로 삽입   &lt;img src=\"http://mazandi.herokuapp.com/api?handle={백준ID}&amp;theme=warm\"/&gt;         자주 사용한 언어 : 해당 사이트에서 마크다운 언어로 삽입   [![Top Langs] (https://github-readme-stats.vercel.app/api/top-langs/?username=깃허브ID)] (https://github.com/깃허브ID/github-readme-stats)         Header &amp; Footer : 해당 사이트에서 마크다운 언어로 삽입   ![header] (https://capsule-render.vercel.app/api?type=모양&amp;color=auto&amp;height=높이&amp;section=header&amp;text=내용&amp;fontSize=폰트크기)    ![Footer] (https://capsule-render.vercel.app/api?type=모양&amp;color=auto&amp;height=높이&amp;section=header&amp;text=내용&amp;fontSize=폰트크기)     .git 디렉터리 : 깃의 버전을 저장할 로컬 저장소     버전 (Version) : 어떤 파일이 수정된 기록이나 그 파일이 수정된 내용            작업 트리 (working tree) : 파일 수정, 저장 등의 작업을 하는 작업 디렉터리                    스테이징 (Staging) : 작업 트리에서 작업한 파일을 버전으로 만들기 위해 스테이지로 이동                       스테이지 (stage) : 버전으로 만들 파일이 대기하는 스테이징 영역                    커밋 (Commit) : 스테이지에서 대기중인 파일을 버전으로 만들어 레포지토리에 저장                       레포지토리 (repository) : 스테이지에서 대기하고 있던 파일들을 버전으로 만들어 저장하는 저장소           깃 명령어 (Git Command) : git &lt;command&gt; 형식으로 구성          git : 깃 명령 다음에 입력할 수 있는 명령어 옵션 확인       $ git ...         git init : 깃 저장소를 만들 디렉터리 초기화 (깃 저장소인 .git 디렉터리가 생성)   $ git init Initialized empty Git repository in ...      git status :  깃의 현재 상태 확인            untracked 상태 : 현재 깃이 해당 파일의 수정 여부를 추적하고 있지 않습니다. (파일이 스테이지에서 대기 : false)       tracked 상태 : 현재 깃이 해당 파일의 수정 여부를 추적하고 있습니다. (파일이 스테이지에서 대기 : true)                    unmodified 상태 : 깃에 현재 버전이 저장된 이후 파일이 수정되지 않았습니다.                            Working tree clean                                   modified 상태 : 깃에 현재 버전이 저장된 이후 파일이 수정되었으나 스테이징되지 않았습니다.                            Changes not stage for commit:                                   staged 상태 : 깃에 현재 버전이 저장된 이후 파일이 수정되었고 스테이징되었습니다.                            Changes to be committed:                                                   $ git status On branch master  // 현재 master 브랜치에 위치해 있음 No commits yet    // 아직 커밋한 파일이 존재하지 않음 nothing to commit // 현재 커밋한 파일이 존재하지 않음  $ git status On branch master No commits yet untracked files   // untracked 상태 : 아직 버전 관리하지 않은 파일들이 존재함      git add : 작업 트리에서 스테이지로 스테이징   $ git add helloWorld.txt      git commit : 스테이지에 있는 파일을 버전으로 커밋            -m 옵션을 통해 커밋과 함께 메시지 저장       -am 옵션을 통해 스테이징과 커밋을 동시에 처리           $ git commit -m \"message1\"      git log : 레포지토리에 저장된 버전 정보 확인            커밋 해시 (commit hash) : 커밋을 구별하는 ID (HEAD-&gt;master : 해당 버전이 가장 최신임을 표시)       작성자 (Author) : git config --global user를 통해 입력한 사용자 정보 (이름과 이메일)       작성일 (Date) : 버전이 작성된 시각       커밋 메시지 (commit message) : git commit -m을 통해 저장된 메시지          ","categories": ["Devops"],
        "tags": [],
        "url": "/devops/git1/",
        "teaser": null
      },{
        "title": "[DevOps] 도커 (Docker)",
        "excerpt":"가상화 (Virtualization) : 컴퓨터 자원 (Computer Resource)의 추상화      하드웨어 종속성 배제 : 물리적인 하드웨어 자원을 논리적인 단위로 나누고 이를 통합해 가상의 자원을 활용   리소스 가상화 (Resource Virtualization) : 컴퓨터 내 특정 자원만을 추상화     (가상의) 메인 메모리 : 가상 메모리 (Virtual Memory)   (가상의) 저장 장치 : 클라우드 (Cloud)   (가상의) 그래픽 카드 : vGPU   (가상의) 네트워크 : 가상 사설 네트워크 (Virtual Personal Network)   플랫폼 가상화 (Platform Virtualization) : 여러 개의 프로세스을 구동할 수 있는 플랫폼을 추상화     에뮬레이션 (Emulation) : 다른 컴퓨터 프로세서를 위해 쓰인 운영체제와 응용 프로그램을 실행   하드웨어 수준 가상화 (H/W-level Virtualization) : 하드웨어 플랫폼 위의 하이퍼바이저를 통해 가상 머신을 관리함        운영체제 수준 가상화 (O/S-level Virtualization) : 운영체제의 커널이 각각의 격리된 프로세스를 동작시킴            에뮬레이터 (Emulator) : 모든 하드웨어 자원의 동작을 소프트웨어로 대체             애뮬레이터 안의 응용 프로그램은 물리 하드웨어가 아닌 인터프리터 프로그램을 통해 실행 (Java Virtual Machine)                    인터프리터 프로그램은 가상 머신에서 명령을 수행할 때마다 물리 CPU가 처리할 바이너리 코드 갱신           물리 CPU는 에뮬레이터를 실행하기 위한 바이너리 코드를 해석해 이를 대신 실행                       장점 : 아키텍쳐가 전혀 다른 하드웨어 역시 가상화할 수 있음 (vs 하이퍼바이저 : 가상화할 수 없음)       단점 : 물리 CPU 내에서 직접 실행할 때보다 비효율적임                하이퍼바이저 (Hypervisor) : 다수의 가상 머신을 생성, 실행, 제어하는 논리적 플랫폼으로써의 프로세스             하이퍼바이저 안의 응용 프로그램은 물리 하드웨어를 하이퍼바이저에 의해 제한적으로 사용                하드웨어 가상 머신 (H/W Virtual Machine) : 하이퍼바이저에 의해 생성된 가상 환경                        Type 1. 호스팅 (Hosting) : 하이퍼바이저가 일반 프로그램과 같이 운영체제의 소프트웨어 계층에서 실행                     장점 : 가상의 하드웨어를 구동하기에 호스트 운영 체제에 큰 제약이 없음           단점 : 호스트 운영 체제 위에서 게스트 운영체제를 구동해 비교적 큰 오버헤드 가짐 / GPU Passthrough 미지원                                Type 2. 네이티브 (Native) : 하이퍼바이저를 하드웨어에 직접 임베디드되어 실행                     장점 : 별도의 호스트 운영체제가 없어 오버헤드가 적음 / 하드웨어를 직접 제어하기에 효율적인 자원 사용 가능           단점 : 자체적인 가상 머신에 대한 관리 기능이 없기에, 이를 위한 별도의 컴퓨터나 콘솔이 필요                        전가상화 (Full-Virtualization) : 하이퍼바이저에서 명령을 번역                             게스트 가상 머신이 요청한 명령은 하이퍼바이저가 실행한 관리용 가상 머신 DOM을 통해 하드웨어에 접근               하이퍼바이저가 각 가상 머신들의 모든 명령을 번역하여 실행하고, 이에 맞게 자원을 할당해야 함                                                반가상화 (Para-Virtualization) : 게스트 가상 머신에서 명령을 번역                             게스트 가상 머신이 하이퍼 콜 (Hyper Call)을 통해 하이퍼바이저에 명령을 직접 요청               게스트 가상 머신의 운영 체제가 하이퍼 콜을 요청할 수 있게 커널을 수정해야 함                                                        컨테이너 (Container) : 소프트웨어 패키지의 추상화             컨테이너는 프로세스가 동작하는 격리된 사용자 공간 인스턴스                    하나의 응용 프로그램과 그 응용 프로그램의 동작을 위한 라이브러리로 구성                                운영체제의 커널은 여러 개의 격리된 컨테이너를 갖추어 각각의 개별적인 서버처럼 동작시킴                        리눅스 컨테이너 (Linux Container) : 리눅스에서 제공하는 운영체제 레벨의 가상화                     커널 레벨의 격리된 (isolated) 공간만 제공할 뿐, 개발 및 서버 운영에 필요한 부가 기능 부족                            사용자가 운영체제 A에서만 가능한 a, 운영체제 B에서만 가능한 b, 운영체제 C에서만 가능한 c을 동시에 실행한다고 가정한다면,    에뮬레이션 : 응용 프로그램 ×3 ⊂ 에뮬레이트 운영체제 ×3 ⊂ 에뮬레이터 ×3 ⊂ 호스트 운영체제 ⊂ 하드웨어   Type 1. 호스팅 : 응용 프로그램 ×3 ⊂ 게스트 운영체제 ×3 ⊂ 하이퍼바이저 ⊂ 호스트 운영체제 ⊂ 하드웨어   Type 2. 네이티브 &gt; 전가상화 : 응용 프로그램 ×3 ⊂ 게스트 운영체제 ×3 ⊂ DOM ⊂ 하이퍼바이저 ⊂ 하드웨어   Type 2. 네이티브 &gt; 반가상화 : 응용 프로그램 ×3 ⊂ 수정된 게스트 운영체제 ×3 ⊂ 하이퍼바이저 ⊂ 하드웨어   운영체제 수준 가상화 : 컨테이너 프로세스 ×3 ⊂ 컨테이너 관리 소프트웨어 ⊂ 운영체제 ⊂ 하드웨어        Q. MacOS에서 도커로 윈도우 컨테이너를 실행하는 경우라면? : 응용 프로그램을 실행할 때 (O) 운영 체제를 실행할 때 (X)            윈도우 컨테이너 ⊂ 가상 머신 (호스팅) ⊂ 컨테이너 관리 소프트웨어 ⊂ 운영체제 ⊂ 하드웨어           도커 (Docker) : 컨테이너 기반 가상화 플랫폼 (Container-based Virtualization Platform)         공식 홈페이지에서 .dmg 파일을 다운로드 후 설치   터미널 창에 다음 명령어를 입력해 도커가 정상적으로 설치되었는지 확인   docker version // 현재 도커의 버전 확인  Client:  Cloud integration: ~  Version:           ~  API version:       ~  Go version:        ~  Server: ~  Engine:   Version:          ~   API version:      ~   Go version:       ~     Q. 클라이언트와 서버의 버전 정보가 따로 구성되어 있는 이유?         도커가 클라이언트와 서버의 역할을 각각 수행할 수 있음                리눅스 터미널에 도커 명령어를 입력하면 도커 클라이언트가 도커 서버로 명령을 전송하고 이를 터미널에 출력                  Q. 도커를 쓰는 이유? : 비교적 효율적인 가상화 방식 + 통일된 개발 환경 + 배포의 동시성     Virtualization : 응용 프로그램 실행 시 운영체제 수준 가상화 방식이 성능 손실이 더 적고 빠르게 동작한다.   Development : 운영체제에 상관없이 같은 환경에서 개발할 수 있게 해준다.   Deployment : 서비스 환경과 응용 프로그램을 같이 배포할 수 있게 한다.   도커 파일 (Dockerfile) : 서버 운영 기록을 코드화해 저장한 파일 -&gt; 해당 시점의 도커 이미지 빌드      눈송이 서버 (Snowflakes Server) : 각각의 서버마다 운영 기록이 다르기에 서로 모양이 다른 서버들이 공존하는 상황         서버 간의 운영체제, 컴파일러, 설치된 패키지 등의 차이로 발생하는 문제 개선을 위해 서버 운영 기록 저장         DSL (Domain-Specific Language) : 도커 파일을 작성할 때 쓰는 언어 (도커 이미지의 생성 과정 표현)   Q. 도커 파일을 쓰는 이유? : 테스트 주도 개발의 순환에 부합한다.     테스트 주도 개발 (Test Driven Development) : 선 테스트 후 개발 사이클을 반복하는 개발 방법론       테스트를 작성한다. : 도커 파일을 만든다.   테스트에 실패하고 코드를 수정한다. : 도커 이미지의 빌드에 실패하고 도커 파일을 수정한다.   테스트에 성공한다면, 중복된 코드 등을 리펙터링한다. : 도커 이미지의 빌드에 성공한다면, 도커 파일의 내용을 리펙터링하다.   처음으로 되돌아간다.    도커 이미지 (Docker Image) : 컨테이너의 실행에 필요한 모든 파일과 설정값 정보을 포함     상태값을 가지지 않음 (변하지 않는 값들을 저장) &lt;-&gt; 컨테이너 : 이미지가 실행된 살태 (변하는 값들을 저장)   이미지 레이어 : 도커 이미지는 여러 개의 읽기 전용 (Read-Only) 레이어로 구성되고, 파일 추가/생성 시 새로운 레이어를 생성            유니온 파일 시스템 (Union File Systems)읕 통해 여러 개의 레이어를 하나의 파일 시스템으로 활용           컨테이너 레이어 : 컨테이너가 실행되면 이미지 레이어 위에 읽기/쓰기 (Read-Write) 레이어를 추가            컨테이너를 실행하면서 생성되거나 변경된 내용을 저장           이미지 경로 : URL 방식으로 관리 -&gt; 뒤에 태그 (/tag)를 붙임    도커 허브 (Docker Hub) : 도커 이미지를 서버에 무료로 공개하고 관리   Q. 도커 이미지를 쓰는 이유? : 도커 이미지와 도커 컨테이너들을 클래스나 인스턴스처럼 활용한다.     도커는 해시 값 (= 컨테이너 ID)과 임의의 이름 (= 컨테이너 이름)를 통해 컨테이너를 구분하고 이들을 환경변수로 관리    운영자가 지금까지 운영한 서버를 도커 이미지로 배포하고 도커 컨테이너에 설치한다면,    도커 파일 : 지금까지 서버를 운영한 기록   도커 이미지 (도커 파일 + 실행 시점) : 지금부터 설치된 서버가 가질 초기값   도커 컨테이너 (도커 파일 + 환경 변수) : 지금부터 설치된 서버가 운영될 장소      도커 안에서는 서버 역시 하나의 소프트웨어처럼 사용할 수 있고, 생성할 수 있는 컨테이너의 개수에도 제한이 없다.   도커 명령어 (Docker Command) : docker &lt;command&gt; 형식으로 구성     리눅스 터미널에 도커 명령어를 입력하면 도커 서버에서 이에 해당되는 작업 수행   항상 root 권한으로 실행되기에 $ sudo를 앞에 붙어야 함   sudo usermod -aG docker $USER # 현재 사용자를 docker 그룹에 추가                                               docker 명령어                 명령어 형식                 명령어 설명                                                             docker search                 $ docker search [이미지]                 도커 허브에서 이미지 검색                                           docker pull                 $ docker pull [사용자명/] 이미지 [:태그]                 도커 허브에서 이미지 다운로드 사용자명을 지정해 도커 허브에서 해당 사용자가 올린 이미지을 다운로드 태그로 버전을 지정해 다운로드 (latest : 최신 버전)                                           docker images                 $ docker images                 사용 가능한 모든 이미지 목록 확인                                           docker rmi                 $ docker rmi 이미지 [:태그]                 다운로드한 이미지 삭제 태그로 버전을 지정해 다운로드 (latest : 최신 버전)                                           docker run                 $ docker run [옵션] [실행할 이미지]                 이미지를 컨테이너로 생성한 뒤 컨테이너 실행 입력받은 이미지가 현재 없다면, 해당 이미지를 도커 허브에서 다운로드 실행할 파일을 지정해 직접 실행 가능 (여기서 빠져나오면 컨테이너가 정지)                                             docker run 옵션                 옵션 설명                                                             -d                 백그라운드 모드 (detached mode)                                           -p [호스트 포트:컨테이너 포트]                 호스트와 컨테이너의 포트를 연결 (port forwarding) http://호스트 IP:호스트 포트로 컨테이너의 포트 접속                                           -v [호스트의 디렉터리]                 호스트의 디렉터리를 컨테이너의 디렉터리에 연결 (mount)                                           -e [환경변수]                 컨테이너 내에서 사용할 환경변수 설정 (environment variable)                                           --name [컨테이너 이름]                 컨테이너 이름 설정 (container name)                                           -rm                 프로세스 종료 시 컨테이너 자동으로 제거 (remove container)                                           -link [컨테이너 이름:주소]                 컨테이너와 컨테이너 연결 (link container) [주소:포트번호]로 컨테이너에 접속                                           -it                 리눅스 터미널 입력을 위한 옵션 (interactive / Pseudo-tty)                                                                      docker ps               $ docker ps [옵션]               실행중인 모든 컨테이너 목록 확인 -a 옵션으로 정지된 컨테이너까지 모두 검색                                         docker start               $ docker start [컨테이너 이름 | 컨테이너 ID]               정지된 컨테이너 재시작                                         docker stop               $ docker exec [컨테이너 이름 | 컨테이너 ID]               실행 중인 컨테이너 정지                                         docker attach               $ docker attach [컨테이너 이름 | 컨테이너 ID]               실행 중인 컨테이너에 접속                                         docker exec               $ docker exec [컨테이너 이름 | 컨테이너 ID] [명령] [매개 변수]               컨테이너 외부에서 컨테이너 내의 명령 실행                                         docker diff               $ docker diff [컨테이너 이름 | 컨테이너 ID]               컨테이너가 실행되면서 변경된 파일 목록 확인 A : 추가된 파일 C : 변경된 파일 D : 삭제된 파일                                         docker cp               $ docker cp [컨테이너 이름 | 컨테이너 ID] [:컨테이너 경로] [호스트 경로]               컨테이너의 파일을 호스트의 디렉토리로 복사                                         docker attach               $ docker attach [컨테이너 이름 | 컨테이너 ID]               실행 중인 컨테이너에 접속                                         docker rm               $ docker exec [컨테이너 이름 | 컨테이너 ID]               생성된 컨테이너 삭제                                         docker commit               $ docker commit [옵션] [컨테이너 이름 | 컨테이너 ID] [이미지 이름] [:태그]               컨테이너를 이미지 파일로 생성                                         docker build               $ docker build [옵션] [도커 파일 경로] [--tag 이미지 이름 : 이미지 태그]                도커 파일에 설정된 내용대로 도커 이미지 생성 --tag 뒤에 이미지 이름와 이미지 태그를 설정할 수 있음                                         docker history               $ docker history [이미지 이름 | 이미지 ID] [:태그]               도커 파일에 설정된 내용대로 이미지 히스토리 생성                                         docker inspect               $ docker inspect [이미지나 컨테이너 이름 | 이미지나 컨테이너 ID]               이미지나 컨테이너의 세부 정보 출력                              ","categories": ["Devops"],
        "tags": [],
        "url": "/devops/docker1/",
        "teaser": null
      },{
        "title": "[Github Pages] 1. 개발자에게 개발 블로그는 왜 필요한가요?",
        "excerpt":"   내가 아직 취업 시장에 발도 담구지 않은 대학생인데 내가 개발 블로그의 필요성에 대해 논하는 것이 의미가 있는 걸까? 라는 의문이 들어 작년에 작성한 글에서는 이 부분을 짚어보지 않았다. 하지만 이 부분을 뺀 채로 블로그를 운영하다보니, 처음에 내가 가졌었던 생각이나 느낌이 희석되면서, 여러 가지를 이유로 들며 블로그 운영을 게을리한 것 같다. 그래서 지난 1년간 내가 작성한 내용을 다시 정리하기 앞서, 이 부분에 대해 이야기하고자 한다.    1. 블로그에 글을 쓰는 과정 또한 하나의 공부가 될 수 있다.  사실 글을 쓰는 과정은 엄청나게 귀찮다. 글을 쓰기 위한 소재도 미리 준비해야 하고, 그 소재에 대해 모르는 부분을 공부해야 하고, 내가 잘못된 내용을 적는 게 아닌지 검토하는 과정 또한 거쳐야 하고… 하지만 내가 이전에 공부하거나 경함한 내용을 자세하고 정확히 설명하기 위해 노력하면서, 그 내용에 대한 나의 이해도가 올라가는 것 같다. 이전에 블로그에 글을 쓰기 전의 나는 수업 끝나면 다시 책을 펴보지 않았지만, 지금은 블로그에 글을 쓰기 위해서라도 최대한 기록을 남기려고 노력한다. 이러면서 내가 단순히 개념으로 머릿속에 집어넣은 내용을 블로그의 문장이나 예시로 설명하면서, 내용을 이해하는 것을 넘어서 개념을 응용하는 능력 또한 증진되는 것 같다.       글을 쓰는 것과 같이 누군가에게 무언가를 설명하려고 노력하는 행위를 나만 성장하는 데에 있어 도움이 된다고 느낀 건 아닌지, 실용주의 프로그래머라는 책에서는 프로그래머가 고무 오리 인형에게 코드 한 줄씩 설명하는 고무 오리 디버깅 (rubber duck debugging)으로 무언가를 설명해본 경험의 중요성을 강조한다. 이처럼 무언가를 설명해보는 경험이 계속 축적되다보면, 나중엔 무엇을 배우든간에 그것을 어떻게 설명해볼지에 대해 미리 생각해보게 될 것이다.    그리고 당연하지만, 글은 하나의 기록이고 그 자체로 나의 history가 된다. 자신이 공부하고 경험한 것을 기록하는 것은, 당연하지만 내가 기억하는 것보다 더 오래 보존된다. 나는 공부를 하거나 이런저런 자료를 참고한 것을 모으는 방법에 대해 늘 고민하곤 했는데 (예를 들면 즐겨찾기에 등록하는 것이나 PDF를 저장하는 것. 2가지 모두 단점이 명확해 중간에 그만두었다), 역시 코드의 주석처럼 글을 쓸 때 바로바로 참고한 내용을 링크를 걸어주는 방법이 제일 즉각적이고 직관적인 것 같다. 또한 만약 생각이나 회고을 적어둔 경우에는 내가 이런 생각을 했구나, 하면서 나중에 참고하기도 좋다.   2. 블로그를 운영하는 것이 성장의 동기가 될 수 있다.  나는 어렸을 때부터 무언가를 수집하는 것을 좋아했다. 초등학교 때는 TCG 게임의 카드들을 수집해 컬렉터 앨범을 만드는 것을 좋아했고, 중학교 때에는 코인 홀더에 담을 프루프를 사기 위해 용돈을 모아본 적도 있다. 블로그에 글을 쓰는 것 또한 내가 인터넷이나 서적 곳곳에 퍼져 있는 지식들을 수집해 하나의 모음집을 만든다고 느꼈기에 처음 개설하였을 때부터 블로그를 운영하는 데에 애착이 갔다.       그래서 나는 Blog-driven, 즉 블로그를 운영하기 위해 공부하고 경험하면서 나 또한 성장한다는 개념에 대해 긍정적으로 생각한다. 대다수의 사람들이 보통 블로그에 글을 쓰면서 Blog-driven이 이루어진다고 생각하는데, 나는 Blog-driven이 더 포괄적인 개념이라고 생각한다. 블로그를 계속해서 살아있는 상태로 유지하려면 단순히 블로그에 글을 쓰는 것만이 아닌, 블로그를 개선하고 유지보수하는 과정 또한 필요하다. 지난 1년간 블로그를 운영하면서 알게 모르게 시행착오를 거친 부분이 꽤 되는데 웹 개발을 공부하면서 이를 블로그에 대입해 생각해보기도 하고, 블로그에 적용시켜볼 계획도 세우기도 하는 식으로 앞으로 나아가는 데에 큰 도움이 되었던 것 같다.    3. 운영하는 블로그가 개발자에게 새로운 기회를 줄 수 있다.  내가 이번에 대학교 4학년이 되면서 느낀 점이 있다면, 나를 포장하고 홍보하는 것 또한 정말 중요하다는 것이다. 수능은 모든 학생을 일렬로 세우고 점수로 평가하지만, 사회에는 어떤 절대적인 기준이 존재하지 않으므로 사람들이 나를 평가할 수 있는 input data를 내가 스스로 가공해 제공할 필요성이 있다. 특히 개발자는 다른 직업보다 정보를 활용하는 능력이 뛰어나다보니, Github 프로필을 만들거나 포트폴리오 사이트를 만드는 것과 같이 나에 대한 정보를 공유하는 것 또한 매우 활발하다.       요즘 IT 기업들이 지원자의 개발 블로그나 Github의 주소를 요구하는 것 또한 그런 맥락일 것이다. 기업 입장에서는 모든 점에서 뛰어난 인재를 채용하고자 하겠지만, 그것은 매우 소수이다. 그래서 기업은 지원자의 잠재력 또한 확인해 평가하고자 노력한다. 그리고 이런 부분은 개발과 직접적으로 관련되어 있지만 단순한 결과물의 집합체인 이력서나 포트폴리오보다는, 성장하는 데에 있어 중요한 가치를 엿볼 수 있는 개발 블로그나 Github에 잘 들어나는 것 같다.      Reference         코드쓰는사림 님이 작성하신, 개발자가 블로그를 운영해야 할 이유     productuidev 님이 작성하신, 개발자 취업준비 (포트폴리오/블로그)     ","categories": ["Github Pages"],
        "tags": ["Github"],
        "url": "/github%20pages/blog1/",
        "teaser": null
      },{
        "title": "[Github Pages] 2. 개발 블로그는 어디에 만들어야 하나요?",
        "excerpt":"   글을 시작하기 앞서 말할 부분이 있다. 이번 포스트의 내용은 나의 주관적인 판단이 들어간 서술이 많다. 나야 보시다시피 Github Pages를 사용하지만 다른 사람들은 여러 이유로 다양한 플랫폼을 사용할 것이고, 그 부분을 지적하거나 문제시하는 게 아님을 분명히 밝히고 싶다. 이 글은 어디까지나 개발 블로그로 사용되는 여러 플랫폼에 대해 이야기해보는 과정을 통해 개발 블로그를 처음 만드는 개발자들이 이런 부분을 고려했으면 좋겠다, 는 취지로 작성된 것이다.    1. 네이버 블로그     한때는 블로그, 하면 네이버? 라고 할 만큼 국내에서 가장 많이 쓰였던 블로그 플랫폼이다. 나도 개발 관련은 아니지만 작년까지 네이버 블로그를 운영했었다. 그런 점에서 가지는 네이버 블로그의 장점은 (국내 한정) 보편성이다. 보편적으로 쓰이는 만큼 사용자 수가 많고, 대다수가 한번씩은 네이버 블로그에 글 정도는 올려보게 되는 것이다. 그리고 이전의 올드한 디자인도 개선된 편이고 카테고리 사용도 간편하다. (이번에 새로 도입된 웹 에디터는 좀 불편했다.)    하지만, 네이버 블로그의 가장 큰 문제는 역시 구글에서 검색했을 때 노출이 잘 되지 않는다는 것이다. 사실상 이 문제가 다른 모든 장점을 덮고도 남는다고 무방하다. 네이버라는 하나의 생태계에서 자체적으로 생산되는 컨텐츠를 검색할 수 있다는 것이 네이버 검색이 우리나라에서 널리 쓰이는 이유이겠지만, 개발자들 대다수가 구글을 통해 검색하는 만큼 다른 개발자들에게 내 글을 노출시키기 어렵다. (물론 블로그에 글을 올리는 목적이 조회수는 아니지만 내 글을 읽어주는 독자가 있다는 것, 그것이 적어도 내 의욕을 좌지우지하는 것 같다.)    2. 티스토리        Example         이동욱 님이 운영하시는, 기억보단 기록을      2006년에 창립되어 네이버처럼 국내에서 보편적으로 많이 쓰이는 블로그 플랫폼이다. 옛날엔 초대장 시스템이 있어서 사용자들의 접근성이 다소 떨어졌는데, 이게 사라지고 나서는 많이들 사용하는 것 같다. 예전에는 다음이 운영했는데, 다음이랑 카카오가 합병된 이후로는 카카오가 운영중인 것 같다.    개발자의 시선에서는 코드 삽입도 지원하고, 플러그인도 다양해 커스터마이징도 가능하고, 구글 노출도 되고, 거기다가 구글 애드센스도 달 수 있고… 정말 안 쓸 이유가 없다. 그렇기에 정말 많은 개발 블로그들이 개설되어 있고, 나 역시도 구글링할 때에 제일 많이 들어가는 플랫폼 중 하나이다. 그래서 초심자가 가장 무난하게 개발 블로그를 시작한다면, 티스토리에서 할 것을 권하고 싶다.    아, 생각해보니 티스토리가 이런 팔방미인이 될 수 있었는지를, (TMI지만) 간략하게나마 적어두어야 할 것 같다. 티스토리가 등장하는 2000년대 중반은 막 우리나라에서 블로그라는 개념이 퍼져나가는 태동기였다. 그때는 상술한 네이버 블로그나 지금은 사라진 다음 블로그처럼 IT 기업들이 운영하는 서비스형 블로그들이 주를 이루었는데, 블로그를 정말 자유롭게 이용하기엔 회사의 약관이나 운영방침과 같은 제약이 있어 차질이 생기곤 했다. (카카오가 운영하는 티스토리 또한 이 문제에 자유롭지는 않다.)    그래서 정재훈 씨가 처음 개발하고, 이후에는 태터앤컴퍼니 (TNC)에서 외국에 존재하던 설치형 블로그를 현지화해 출시한 프로그램이 태터툴즈이었다. 태터툴즈는 기존의 설치형 블로그의 장점을 유지하면서, 한국어에 최적화된 점에서 굉장히 주목을 받았고, 그 TNC가 다음과 합작해 만든 블로그 서비스가 바로 티스토리이다. 이런 알련의 과정 속에서 탄생한 티스토리는 설치형 블로그와 서비스형 블로그의 장점이 적절히 혼합되어 있다.    참고로 TNC는 2008년 국내 최초로 구글에 인수되었고 (!), 태터툴즈는 태터툴즈 사용자 커뮤니티였던 태터네트워크재단 (TNF)에서 개발을 전담해 텍스트큐브 (TextCube)로 리브랜딩되어 현재도 운영중…이면 좋겠지만, 정식 버전은 2014년 2월에 나온 1.10.10에서 멈춘 것 같고 베타 버전도 2.0 베타 3이 마지막인 것 같다. (텍스트큐브 Github)    3. 브런치        Example         옛날개발자 님이 운영하시는, 에디의 기술블로그      브런치는 2015년에 카카오가 글쓰기에 최적화된 플랫폼을 만든다는 야심찬 목표를 갖고 오픈한 블로그 플랫폼이다. 이곳에 글을 올리려면 작가 신청을 하고 에디터팀의 승인 심사에 합격해야 한다고 한다. 그래서 브런치에서 개발 블로그를 몇개 보긴 했는데도, 솔직히 난 소설 글쓰기 플랫폼으로 알고 있었다…    하술할 미디엄을 어느 정도 벤치마킹한 것으로 보이는데, 미디엄과 달리 코드 삽입이 안되서 이미지로 캡쳐해야 한다는 점이 너무 아쉽다. 디자인이랑 폰트가 워낙 깔끔해서 글쓰기엔 특화된 느낌은 확실히 강한데, 개발 블로그로 사용하기에는 한계점이 명확해 보인다.   4. 미디엄        Example         Moon 님이 운영하시는, medium     박상권 님이 운영하시는, medium      미디엄은 2012년 에반 윌리엄스가 만든 소셜 네트워크 서비스이다. 플랫폼을 처음 보았을 때에는 트위터나 링크드인과 같은 소셜 네트워크 서비스의 느낌이 강해 보였는데, 글을 작성하려 할 때 나오는 메모장 화면이 직관적이라 굉장히 좋았다. (미디엄이 글 쓸 때 나오는 한글 폰트가 구리다는 얘기가 많은데, 확장 프로그램 깔면 해결되는 부분이라 생각해 일단 나는 고려하지 않았다.)    그런데 내가 안쓰는 이유는… 사실 처음 블로그를 만들 때 미디엄에 대해 몰랐다! 원래부터 국내 사용자 수가 적다보니 미디엄을 개발 블로그로 쓰는 분들은 더 적은 거 같다. 그리고 카테고리랑 검색 기능이 없으니, 앞서도 얘기했지만 SNS 같은 느낌이 계속 드는 것 같아서 좀 손이 잘 가지 않는다.   5. Notion        Example         younho9 님이 운영하시는, notion      나는 옛날부터 노트에 무언가를 적는 것을 선호해서 스마트폰을 산 뒤로 애플 메모, 네이버 메모, 마이크로스프트 원노트, 에버노트 순으로 메모 앱을 사용했는데 뭔가 아쉬운 점이 한두 개씩은 있엇다. 그런데 노션을 2019년즘에 처음 사용하고 나서는 너무 만족해서 쭈욱 사용하고 있다.    단점을 말하기 앞서… 확실히 짚고 가야할 것이 있다. 노션은 블로그가 아닌 메모장이다. 그런데 메모장을 블로그로 사용하려면 그게 잘 될까? 이것저것 템플릿을 잘 가져와 쓴다고 해도, 메모장이라는 근본적인 한계가 명확하다고 생각한다. 다음은 내가 직접 써보면서 느낀 단점들이다.      페이지 주소가 직관적이지 않고, 페이지 제목이 바뀌면 새로운 주소를 가지게 되어 글을 다시 공유해야 한다.   하나의 페이지이기 때문에 카테고리, 글 검색, 댓글 기능이 부재되어 있다.   페이지가 무거우면 페이지를 불러오는 그 로딩 과정이 매우 길다.   그러면 노션 블로그를 호스팅하면 되지 않을까? 할텐데, 도메인과 호스팅 비용이 상당히 든다. 당장 무료로 쓸 수 있는 옵션이 이렇게 많은데, 노션이 좋다고 계속해서 돈을 지출하는 것은 좀 과하지 않을까?   6. 벨로그     벨로그는 2018년 velopert 님이 개설한 개발자에 특화된 블로그 서비스이다. 유저 수가 소수였던 초창기와 달리, 지금은 국내 많은 개발자들이 유입되면서 개발자 생태계가 잘 구축되어 있고, 올라오는 정보의 양과 질 모두 좋은 편이다. 또한 코드 삽입, 마크다운 에디터 등 개발자에 특화된 요소들이 눈에 띄는 요소이다. 모두 같은 디자인이고 커스터마이징할 수 있는 요소가 없다는 부분이 단점이긴 하지만, 앞서 말한 티스트리처럼 초심자가 개발 블로그를 처음으로 만든다고 한다면 벨로그가 가장 이상적이라 생각한다.    7. 워드프레스 블로그     상술한 티스토리의 TMI 파트에도 잠깐 등장한 워드프레스는 2003년 출시된 오픈소스 기반 CMS이다. 전세계에 있는 정말 많은 사이트나 블로그들이 워드프레스를 기반으로 되어 있고, 다양한 플러그인과 테마 또한 존재한다. 그래서 2018년에 네이버 블로그에서 워드프레스 블로그로 이전을 시도한 적이 있었는데… 결과는 실패였다.    그때 실패한 가장 큰 이유는 그때 군생활이여서 무언가를 공부할 여건이 도저히 되지 않았다는 것이었다. 워드프레스를 처음 접했을 때 생각보다 시간이 걸리고 이에 대해 공부할 부분도 꽤 된다. 그리고 처음에 플러그인을 게임 애드온처럼 이것저것 설치했는데 버전 충돌이 생겨서, 다시 제거하고 하나씩 학습해보고… 거기다가 PHP나 자바스크립트에 대한 공부 또한 필수적이다. 이런 것을 개발자들은 학습곡선 (Learning Curve)이 계속 길어진다고 표현하던데… 정말 맞는 말이라고 생각한다.   8. Github Pages        Example         한재엽 님이 운영하시는, JBEE.io     이종립 님이 운영하시는, 기억 보조용 위키      Github Blog라는 하나의 서비스가 존재하는 건 아니고, Github가 제공하는 Github Pages를 이용해 Github 저장소에 블로그나 웹 사이트 같은 웹 서비스를 호스팅하는 방식이다. 아무래도 지금 내가 사용하고 있는 거기도 하고 지난 1년간 공부하고 경험한 것도 있기에 이 부분을 조금 상세히 언급해보고자 한다.      긍정적인 점            커스터마이징의 자유도가 엄청나게 높다. 나처럼 Github Pages용 오픈 소스 테마를 이용해도 되고 아예 처음부터 설계해 만드는 것 또한 가능하다. 구글 검색에 내 블로그를 노출시킬 수도 있고, 구글 애드센스를 통해 광고를 달아줄 수도 있다. 요약하면, 개발자가 가지고 놀기에 정말 좋다!       Github에 저장소로 올라가는 방식으므로 Github와 연동이 된다. 로컬에서 블로그를 쉽게 편집하고 관리할 수 있으며, commit과 push로 글을 등록하면 된다. Github 저장소에 백업이 되어 있기 때문에 (당연하게도) 이를 원격지에서 다운받아 사용할 수도 있고, 필요한 경우 롤백하는 것도 가능하다.       마크다운 형식으로 작성하는 것을 지원하고, 코드 블룩이나 인용 블록 또한 지원한다. 게시글 하나하나가 .md 파일이라 나중에 플랫폼을 이전한다 하더라도 이를 다시 활용하는 것 또한 가능하다.              복합적인 점            워드프레스 블로그만큼은 아니지만, 다른 것들에 비해 진입장벽이 존재한다. 처음에 웹 사이트의 소스 코드를 올리거나 수정하는 작업이 필요하므로 최소한 git이랑 markdown을 어떻게 사용하는지는 알아야 한다. 블로그를 이것저것 건드려보려고 한다면 백엔드 관련 지식이 요구되고, 커스터마이징을 해보려면 간단한 프론트엔드 관련 지식 또한 필요해진다. 물론 웹 개발자를 지망한다면 이런 일련의 과정을 한번 하는 것도 도움이 된다.       Github 저장소에 올라가는 방식이므로 저장소 내의 소스 코드가 모두 공개된다. 블로그를 노출시키고 싶지만 블로그 내부까지 노출시키고 싶지 않는다면, 유료 걔정으로 전환해서 비공개로 전환해야 한다.       하나의 Github 저장소는 용량과 트래픽에 제한이 존재한다. (1GB의 최대 용량, 월 100GB의 트래픽 제한) 제한을 넘어서 사용하려면 Cloudflare과 같은 CDN을 추가로 사용해야 한다. 일단은 한도 내에서만 쓰면 무료인 것은 장점이지만, 한도를 넘어버린다면 돈을 써야하니 용량이 있는 파일을 올리는 것과 같은 경우에 주의할 필요가 있다.              부정적인 점            정적 페이지로 빌드한는 것만 지원한다. 그래서 댓글 기능을 추가할 때 외부 데이터베이스와 연동이 되지 않아 이를 위한 플러그인을 별도로 설치해야 한다. (Github가 소스 관리를 위한 서비스이니… 동적 호스팅 서비스는 AWS와 같은 클라우드 벤더 등을 사용하자.)       벨로그처럼 작성하는 문서 서식을 바로 렌더링해서 볼 수 없다. 프리뷰 플러그인을 사용한다 치더라도, 플러그인으로 형성된 화면과 렌더링된 화면이 일치하지 않아 결국엔 플러그인을 잘 안쓰게 된다.       글을 쓸 때 표나 이미지를 넣는 게 불편하다. 나 같은 경우에는 html과 css를 사용해 넣는데, 해당 문법을 알아도 표를 일일이 만드는 것은 굉장히 귀찮다. 이미지 같은 경우에는 외부 사이트에 업로드해 이를 호스팅하는데 그것 또한 좀 번거로운 작업이다.              나는 Github Pages 블로그를 운영하는 것은 장단점이 매우 명확하고, 개개인마다의 호불호가 엄청 갈릴 수 밖에 없다고 생각한다. 실제로 Github Pages 블로그를 운영하시다가 다른 블로그 플랫폼으로 이주하시는 분들도 많이 보았고 나 또한 블로그를 개설하면서, 그리고 개설된 블로그를 운영하면서도 이주할지말지에 대해 많이 고민했었다.     그래도 내가 Github Pages 블로그를 운영하는 데에는 git을 이용해 블로그를 관리할 수 있다는 것과 블로그 운영을 통해 웹 개발의 전반적인 과정을 학습해볼 수 있다는 점이 가장 큰 이유인 것 같다. Github Pages 블로그를 개설할 때에는, 정말 아무것도 모르는 감자 (…)라서 많이 헤맸다. 그래서 처음에는 블로그와 연동되는 git에 대해 공부하고자 Do it! 지옥에서 온 문서 관리자 깃 &amp; 깃허브 입문이라는 도서를 구매해서 공부해보고, 그 다음에는 블로그를 커스터마이징해보려고 Do it! HTML+CSS+자바스크립트 웹 표준의 정석이라는 도서를 구매해서 공부해보고 이를 최대한 적용해보는 식으로 실습하였다. 이렇게 블로그를 성장시키려고 노력하는 과정 속에서 나 또한 많이 성장할 수 있었고, 앞으로도 이런 blog-driven이 잘 이루어졌으면 하는 것이 내 바램이다.      Reference         productuidev 님이 작성하신, 개발자 취업준비 (포트폴리오/블로그)     ","categories": ["Github Pages"],
        "tags": ["Github"],
        "url": "/github%20pages/blog2/",
        "teaser": null
      },{
        "title": "[Github Pages] 3. Github Pages 블로그 소개",
        "excerpt":"   사실 이전 포스트에서 Github Pages에 대한 내용이 있어 좀 중복되는 느낌이 들 수도 있다. 하지만, 이 포스트에서는 Github Pages의 원리를 짚어보고자 작성한 것이니 혹시 모르는 사람들은 한번 읽어보자.    Github Pages 블로그란?      정적 웹사이트 생성기 (SSG; Static Site Generator)   많은 사람들이 Github Pages로 블로그를 사용하고 있어 이를 블로그 서비스로 인식하기 쉽지만, 사실 Github Pages의 실체는! 바로 Github에서 제공하는 정적 웹 사이트 호스팅 서비스이다. 그리고 정적 웹 사이트 호스팅 서비스를 가능하게 하는 것이 바로 SSG란 것이다.    SSG로 생성된 사이트는 모든 웹 페이지를 미리 생성하고, 방문자로부터 요청이 들어오면 미리 만든 웹 페이지를 그대로 응답해준다. 그러므로 서버와 클라이언트 모두 렌더링을 위한 작업이 거의 없기 때문에, SSG로 생성된 웹 사이트는 속도가 매우 빠른 장점을 가진다. 그리고 SSG로 생성된 사이트는 미리 만들어놓은 수많은 웹 페이지로 이루어져 있는 구조라 검색엔진 최적화 (SEO; Search Engine Optimization)가 뛰어나 검색엔진이 사이트를 크롤링하는 데에 적합하다.    그러나 빌드할 때마다 모든 웹 페이지를 생성하는 작업을 매번 하다보니, 컨텐츠를 자주 업데이트하는 웹 사이트나 규모가 커 빌드 시간이 오래 걸리는 웹 사이트에서는 큰 비효율성이 발생해 SSG보다는 다른 렌더링 기술을 사용한다. 그래서 SSG는 개인 블로그와 같이 컨텐츠의 변경이 자주 일어나지 않은, 소규모 웹 사이트를 제작할 때 많이 쓰이는 기술이다. (SSG 외에도 SPA, SSR과 같은 렌더링 기술이 있는데, 달레 님께서 SPA와 SSG, 그리고 SSR이라는 글에서 잘 정리해주셨으니 참고하길 바란다.)    지금 현재 내가 사용하고 있는 Github Pages 테마인 Minimal Mistakes는 Jekyll을 정적 웹사이트 생성기로 사용해 웹 사이트를 정적으로 생성한다. Jekyll 외에도 Hexo, Hugo와 같은 여러 정적 웹사이트 생성기들이 존재하는데, 이들을 간단하게 비교해보자.      Jekyll            Ruby 기반       가장 많이 쓰이고, 한글 래퍼런스 많음       Github Pages에서 공식으로 지원 : push한 글들이 별도의 빌드 과정 없이 알아서 Publish       글이 많아질수록 전체 빌드 속도가 느려짐              Hexo            Node.js (javascript) 기반       (javascript를 써서 그런지) 한글 래퍼런스 많음       Hexo로 블로그를 만들 때 참고할 만한 글              Hugo            Golang 기반       런타임에 다른 의존성이 필요하지 않아, 빌드 과정을 포함해도 빌드 속도가 빠른 편       한글 래퍼런스는 상대적으로 적음       Hugo로 블로그를 만들 때 참고할 만한 글              지킬 (Jekyll)      사실 SSG 중에 Jekyll이 좋은 거 같아 골랐다기보단, Minimal Mistakes 테마가 내 마음에 들어서 설치했는데 구글링해보니 다들 Jekyll을 쓰더라…의 흐름으로 쓰게 된 거고, Jekyll 말고도 다른 SSG가 있는 것을 알게 된 이후에도 어차피 다 같은 SSG인데 Jekyll 말고 굳이 다른 거를 배워서 쓸 필요성을 못 느껴서 (물론 Jekyll이 문제가 많다고 느끼면 다른 SSG를 사용할지에 대해 고민해봐야 할 것이다.) Jekyll을 계속 사용하고 있긴 하다. 일단 Jekyll이 어떤 방식으로 동작하는지 정리해보겠다. (사실 SSG와 동일한 원리인데, 이를 구체화한 것으로 생각하면 된다.)    Jekyll은 동적 웹 사이트 (Dynamic Web Site)과 동일하게, 레이아웃에 해당하는 templates과 컨텐츠에 해당하는 contents를 분리해 저장한다. (이때 Jekyll에서 templates을 작성할 때 사용하는 언어가 Liquid이고, contents를 작성할 때 사용하는 언어가 markdown이다.) 하지만 동적 사이트와 달리, Jekyll은 templates와 contents을 합친 HTML 문서를 미리 빌드해 저장하고, 방문자가 요청을 보내면 정적 컨텐츠에 해당하는 HTML 문서를 전송한다.    그래서 Jekyll은 웹 사이트를 운영하기 위한 HTML 관련 지식을 몰라도, .md 파일로 문서를 작성하면 HTML 파일로 이를 변환해주는 작업을 해주며 변환된 결과물을 토대로 웹 사이트를 구축해서 서비스해준다.   깃허브 페이지 (Github Pages)   상술하였듯 Github Pages는 Github에서 제공하는 정적 사이트 호스팅 서비스로, 무료 계정에 한해 하나의 Github Pages를 무료로 제공한다. Github Pages는 연동된 Github 저장소에서 HTML, CSS, JavaScript와 같은 정적 컨텐츠를 가져와 그대로 배포하는 방식으로 작동한다. 만약 Github 저장소가 Jekyll 디렉토리의 형태로 존재한다면, Github Pages는 해당 저장소가 Jekyll로 작성된 것임을 알고 이를 Jekyll로 빌드해 배포한다.       Reference         SW developer 님이 작성하신, GitHub Pages 블로그 따라하기     Wheel 님이 작성하신, 지킬 (Jekyll)     ","categories": ["Github Pages"],
        "tags": ["Github"],
        "url": "/github%20pages/blog3/",
        "teaser": null
      },{
        "title": "[Github Pages] 4. Github Pages 블로그 개설",
        "excerpt":"   이 내용은 작년 9월 말부터 작성한 Minimal Mistakes으로 Github Blog 만들기’의 내용 일부분을 재구성한 것이다. 해당 포스트도 완성도 있는 글이고, 처음 블로그를 설정하시는 분들 또한 도움을 얻을 것이라 생각되나… 그때쯤 작성한 글들 대부분이 너무 나열식으로 쓰였고, 출처에 대한 언급이 많이 부실해 (모르는 부분이 있어 찾으려 하면 출처가 없어서 나도 찾지 못한다…), 부족한 점들을 보완하기 위해 다시 작성되었다.  그리고 현재 작성자의 실행 환경의 OS가 MacOS임을 미리 밝혀둔다. 아마 근시일 내에는 기기를 바꿀 계획이 없으니, 동일한 OS를 사용하시는 분들은 그대로 진행해주시면 된다.    1. Ruby 설치  macOS는 Ruby가 기본적으로 설치되어 있으니, 터미널을 실행하고 다음 명령어를 입력해 Ruby의 설치 여부를 확인한다.   ruby -v // ruby X.X.X 출력 : 정상 설치 // \"zsh: command not found: ruby\" 출력 : 설치 오류   2. Jekyll 설치  터미널 창에 gem install 명령어를 입력해 Jekyll을 설치한다. 참고로 gem은 분산 패키지로, 라이브러리의 작성, 공개, 설치를 도와주는 시스템이다.   gem install jekyll   그리고 터미널 창에 다음 명령어를 입력해 Jekyll가 정상적으로 설치되었는지 확인한다.   jekyll -v // jekyll X.X.X 출력 : 정상 설치 // \"zsh: command not found: jekyll\" 출력 : 설치 오류   3. Jekyll theme 선택  이전 포스트에서 Jekyll은 레이아웃에 해당하는 templates과 컨텐츠에 해당하는 contents를 합쳐 HTML 문서로 미리 빌드해 저장하고, 이를 방문자에게 보여준다고 설명한 바 있다. 그런데 대부분의 블로거들은 레이아웃의 중요성은 알지만 이를 어떻게 구성해야할지 몰라 막막할 것이다. 그런 블로거들을 위해 존재하는 것이 Jekyll theme이다.    Jekyll theme은 다른 사람들이 미리 작업해놓은 templates으로, 많은 Jekyll theme들이 무료로 공개되어 있다. 무료 Jekyll 중에 사람들이 많이 사용하는 것이 minimal-mistakes이다. 간결하고 깔끔한 디자인과 꾸준한 업데이트, 그리고 무엇보다 엄청난 양의 한글 래퍼런스 (…)로 인해 나 역시도 minimal-mistakes을 기반으로 블로그를 개설하였기에, 앞으로 진행할 블로그 개설 역시 minimal-mistakes를 기반으로 진행한다.    먼저 minimal-mistakes Github 페이지에서 .zip 파일을 다운로드한 후 압축을 해제한다. 그리고 아래 사진을 참고하여 필요한 파일 및 디렉토리만 남기고 나머지는 삭제한다. (아, 기존에 존재하지 않는 _post와 _page 디렉토리는 추후에 사용할 예정이니 미리 생성해두자.)      4. 로컬에서 웹 호스팅  터미널 창에 다음 명령어를 입력해 Gemfile을 설치하기 위한 bundler를 사용해보자. 그러면 .jekyll-cache 폴더와 Gemfile.lock 파일이 생성된다.   gem install bundler   bundler 설치가 완료되면, 터미널 창에 다음 명령어를 입력해 Gemfile을 검사해 필요한 목록을 설치할 수 있다.   bundle install   이제 터미널 창에 다음 명령어를 입력하여 블로그를 로컬에서 호스팅해보자.   bundle exec jekyll serve   http://127.0.0.1:4000으로 접속하면 minimal-mistakes이 적용된 블로그 화면을 확인할 수 있다.   5. GitHub Pages에서 웹 호스팅   이제 Github에 (Github ID).github.io의 형식으로 원격 저장소를 생성하자. 다음은 내 블로그가 저장된 원격 저장소 이미지이다.      그리고 지금까지 정리한 내용들을 포함한 디렉터리를 github에 push하면, https://(Github ID).github.io를 주소로 하는 블로그가 생성된 것을 확인해볼 수 있다. 그리고 https://github.com/(Github ID)/(Github ID).github.io/actions에서 블로그가 빌드된 기록을 확인할 수 있다. 만약 원격 저장소에서 푸시된 내용에 대한 빌드 작업이 실패한다면, 그 내용의 배포가 진행되지 않은 것을 확인해볼 수 있다.      Reference         SW developer 님이 작성하신, GitHub Pages 블로그 따라하기     ","categories": ["Github Pages"],
        "tags": ["Github"],
        "url": "/github%20pages/blog4/",
        "teaser": null
      },{
        "title": "[Github Pages] 5. Github Pages 블로그 설정 & 포스트",
        "excerpt":"   솔직히 블로그 설정을 건드는 부분은 내가 아는 정보들을 그대로 나열할 수 밖에 없다고 생각한다… 그래도 내가 시행착오를 겪었던 경험을 떠올리면서 하나하나 풀어서 작성하려 하였으니, 미숙한 글이지만 남들에게 도움이 되었으면 정말 좋겠다… 그리고 Github Pages이나 Minimal Mistakes으로 처음 블로그를 운영하시는 분들의 시선에 맞춰 html, css에 대한 자세한 내용은 다른 포스트로 옮겼으니 참고해주셨으면 한다.    1. 블로그 기본 설정     위의 디렉터리에서 _config.yml이라는 파일을 열어보면 다음과 같이 구성되어 있는데, 오른쪽의 주석을 참조해서 나만의 블로그를 커스텀마이징해보자. 이걸 어떻게 적용하는지 잘 모르겠다, 싶은 사람은 내 블로그에 적용된 것을 예시로 보면서 작업해보자.   minimal_mistakes_skin    :         # 블로그의 전체적인 스킨 지정                                     # (Minimal Mistakes에서 기본적으로 제공)                                    # \"default\" \"air\", \"aqua\", \"contrast\", \"dark\"                                    # \"dirt\", \"neon\", \"mint\", \"plum\", \"sunrise\"  # Site Settings locale                   : \"ko-KR\" # 블로그에 쓰일 로컬 언어 지정 title                    :         # 메타 태그에 들어갈 블로그의 제목 지정 subtitle                 :         # 블로그의 제목 하단에 위치할 부제목 지정 name                     :         # 블로그 저자 이름 지정 description              :         # SEO 향상을 위한 meta description 태그 지정 url                      :         # 블로그 url                                     # \"https://(github ID).github.io\" repository               :         # github repository url                                    # \"https://github.com/(github ID)/(github ID).github.io\" teaser                   :         # 관련 포스트나 검색 등에 들어갈 미리보기 이미지 지정                                    # (\"assets/images/\"로 연결) logo                     :         # 블로그의 제목 옆에 들어갈 로고 이미지 지정                                    # (\"assets/images\"로 연결) masthead_title           :         # 블로그 프로필 상단에 위치할 사이트 제목 지정 breadcrumbs              : true    # 브래드크럼 사용 여부 지정 words_per_minute         : 200     # 포스트를 읽는 데 걸리는 시간을 계산히기 위한 분당 읽는 글자의 지정   2. 블로그 레이아웃 설정  이제 조금은 삭막한(?) 블로그의 레이아웃을 뜯어고칠 차례이다. 우선은 이전처럼 _config.yml 파일을 아래와 같이 자신이 원하는 대로 수정하면 된다.   ## 블로그 좌측 사이드바에 위치할 프로필 설정 author:   name             :       # 저자 이름 지정   avatar           :       # 저자 이미지 지정   bio              :       # 저자 바이오그래피 지정   location         :       # 저자 위치 지정   email            :       # 저자 이메일 지정   links:                   # 저자 관련 사이트 링크 지정     - label:               # 사이트 분류 지정       icon:                # 사이트 아이콘 지정       url:                 # 사이트 url 지정  ## 블로그 하단에 위치할 꼬리말 설정 footer:   links:                   # 블로그 관련 사이트 링크 지정     - label:               # 사이트 분류 지정       icon:                # 사이트 아이콘 지정       url:                 # 사이트 url 지정   (1) 네비게이션 바   다음은 기본 테마를 보면서 혹은 자기가 기능을 적용하면서 불편한 점들을 확인하고, 직접 테마의 요소들을 뜯어고치는 건데… 이건 사람마다 달라서 뭐라고 말을 못하겠다. 그래서 나 같은 경우에 어떤 부분이 불편했고, 그래서 수정했는지 얘기해보고자 한다. 우선은 블로그 상단의 네비게이션 바에 내가 보기에 불필요한 카테고리들이 있었다. 그래서 카테고리, 태그만 남기기 위해  _data/navigation.yml 파일을 수정하였다.  _pages 디렉토리를 보면 여기에 적용할 수 있는 여러 요소들이 있는데, 직접 입맛에 맛게 적용해보면 된다.   main:   - title: (카테고리)        # 화면에 보여질 세부 항목의 이름 지정     url: /(카테고리)/        # _pages 내에 정해진 양식 파일이나 특정 링크로 연결   (2) 블로그 너비 및 폰트 크기   그리고 블로그에 포스트를 쓸 때에 한쪽에는 VS Code를, 다른 쪽에는 로컬에서 호스팅한 블로그를 보기 위한 사파리 브라우저를 띄워 놓곤 했는데, 그때마다 기본으로 설정된 블로그 너비랑 폰트 크기가 글을 읽기에 굉장히 불편했다. 그래서 _sass/minimal_mistakes/_variables.scss 파일과 _sass/minimal_mistakes/_reset.scss 파일을 다음과 같이 수정해보았다.   // 블로그 너비 설정 /*    Grid    ========================================================================== */  $right-sidebar-width-narrow: 200px !default;    // default 200px $right-sidebar-width: 300px !default;           // default 300px $right-sidebar-width-wide: 400px !default;      // default 400px   ## 블로그 폰트 크기 설정 html {   /* apply a natural box layout model to all elements */   box-sizing: border-box;   background-color: $background-color;   font-size: 16px;                    // Default 16px;    @include breakpoint($medium) {     font-size: 16px;                  // Default 18px;   }    @include breakpoint($large) {     font-size: 16px;                  // Default 20px;   }    @include breakpoint($x-large) {     font-size: 16px;                  // Default 22px;   }    -webkit-text-size-adjust: 100%;   -ms-text-size-adjust: 100%; }   (3) 블로그 아이콘   또 블로그 주소 창에 같이 뜰 아이콘이 아무것도 안 뜨니 뭔가 내 블로그 같다는 느낌이 안들었다. 그래서 이것 또한 _includes/_head/custom.html 파일에 내가 원하는 아이콘을 넣었다.   &lt;!-- start custom head snippets --&gt;  &lt;!-- insert favicons. use https://realfavicongenerator.net/ --&gt; &lt;link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/assets/logo.ico/apple-touch-icon.png\"&gt; &lt;link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/assets/logo.ico/favicon-32x32.png\"&gt; &lt;link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/assets/logo.ico/favicon-16x16.png\"&gt; &lt;link rel=\"mask-icon\" href=\"/assets/logo.ico/safari-pinned-tab.svg\" color=\"#ffffff\"&gt; &lt;meta name=\"msapplication-TileColor\" content=\"#ffffff\"&gt; &lt;meta name=\"theme-color\" content=\"#ffffff\"&gt;   내가 수정한 것은 이정도? 인데 자잘하게 더 파고들면 커스텀마이징할 레이아웃 요소가 정말 많다. html, css, yml 파일을 건드는 것이라 그리 어렵지도 않고, 한번 배워두면 생각보다 쓸 때도 많다. 아래는 Minimal Mistakes Themes의 디렉토리 구조에 주석을 단 것인데, 커스텀마이징이 필요할 때 이를 참고하기 좋은 것 같다.   minimal-mistakes ├── _data                                 # 테마를 커스터마이징하기 위한 파일을 저장하는 디렉터리  | |                                       # (yml, yaml, json, csv, tsv 파일을 자동으로 읽어들어 site.data로 사용) | ├── navigation.yml                      # 상단 메뉴바를 커스터마이징하기 위한 파일 | └── ui-text.yml                         # 언어별로 어떤 텍스트로 표시되는지 나열하는 파일 | ├── _site                                 # 재사용되는 html 파일을 저장하는 디렉터리 (공통된 컴포넌트들 보관) | ├── search                              # 검색 엔진을 커스터마이징한 내용을 저장하는 디렉터리 | ├── analytics-providers | └── custom.html                         # 분석 플랫폼 공급자를 커스터마이징한 내용을 저장하는 파일 | ├── comments-providers | └── custom.html                         # 댓글 플랫폼 공급자를 커스터마이징한 내용을 저장하는 파일 | ├── head | └── custom.html                         # head를 커스터마이징한 내용을 저장하는 파일 | ├── footer | └── custom.html                         # footer를 커스마이징한 내용을 저장하는 파일 | ├── nav_list                            # 메뉴 상단바의 리스트에 대한 helper 파일 | ├── archive-single.html                 # 아카이브 문서에서 단일 문서를 표현하는 방법을 저장하는 파일 | ├── author-profiles.html                # author profile link애 대한 내용을 저장하는 파일 | ├── author-profile-custom-links.html    # author profile link를 커스마이징한 내용을 저장하는 파일 | ├── breadcrumbs.html                    # breadcrumbs에 대한 내용을 저장하는 파일 | ├── single-page | ├── page__taxonomy.html                 # 단일 문서에서 태그와 카테고리를 표현하는 방법을 저장하는 파일 | ├── tag-list.html                       # 단일 문서에서 태그 리스트를 표현하는 방법을 저장하는 파일 | └── category-list.html                  # 단일 문서에서 카테고리 리스트를 표현하는 방법을 저장하는 파일 ├── _posts                                # 블로그에 포스트한 md 파일을 저장하는 디렉터리 ├── _includes ├── _layouts                              # 각 문서의 디자인과 직접적으로 연결된 전체적인 레이아웃 디렉토리 ├── _sass                                 # minimal-mistakes.scss에 임포트할 수 있는 scss 파일을 저장하는 스타일시트 디렉터리 ├── assets                                # css, js, 이미지 파일을 저장하는 디렉터리 | ├── _css | ├── _images | └── _js  ├── _config.yml                           # 블로그를 구성하기 위한 기본적인 설정값을 설정하는 yml 파일 ├── Gemfile                               # 사용할 gem 플러그인 목록 ├── index.html                            # 블로그 처음 홈 페이지 └── package.json   3. 블로그 포스트 작성 및 머릿말 작성  _posts 폴더에 XXXX(YEAR)-XX(MONTH)-XX(DAY)-(NAME).md을 생성해보자. 이때 YEAR, MONTH, DAY는 포스트가 작성된 연도, 월, 일이 되고 NAME은 포스트의 경로가 된다. 그리고 파일 상단에 위치할 머릿말을 작성하기 위해 아래와 같이 ---에 둘러싸인 내용을 작성해보자.   --- title: \"[Blog] macOS에서 Minimal Mistakes로 깃허브 블로그 만들기\"  categories:     - Github.io  tag:     [HTML, JavaScript, SCSS, Ruby]  toc: true toc_sticky: true  date: 2022-09-26 lastmod: 2022-09-26 ---                              양식 이름             양식 설명                                         title             포스트 제목                               categories             포스트 카테고리                               tags             포스트 태그                               toc             우측 상단의 목차                               toc_label             목차 이름                               toc_icon             목차 아이콘                               toc_sticky             목차 고정 여부                               date             포스트 작성일                               lastmod             포스트 수정일                               author_profile             프로필 창 표시 여부                 우리가 글을 작성하는 데에 사용할 Markdown은 텍스트 기반의 마크업 (MarkUp) 언어로, 특수기호와 문자를 활용한 매우 간단한 구조의 문법을 사용해 보다 빠르게 컨텐츠를 작성할 수 있다! Github의 README.md가 대표적인 예시인데, Github Pages 역시 이를 활용해 문서를 작성하는 데에 사용한다. 마크다운 문법은 여기서 상세히 설명하고 있으니 참고하자.   4. 블로그 포스트 내에 문자 박스 양식 넣어보기  추가로 minimal-mistakes theme의 css로 설정된 스타일 요소를 class로 불러와 적용할 수 있는데, 그중 하나인 상자 양식을 활용해보자. Markdown (.md) 파일이니까 html 태그들을 쓰면 그대로 화면에 표현할 수 있다.   &lt;p class=\"notice--primary\"&gt;   &lt;strong&gt;     이 항목은 현재 작성중입니다.   &lt;/strong&gt;&lt;br&gt;     &gt; 아직 미완성된 코드나 문장 구조가 정확하지 않은 내용이 있을 수 있으니 유의하시기 바랍니다. &lt;/p&gt;  &lt;p class=\"notice--info\"&gt;   &lt;strong&gt;     이 항목은 macOS 기반으로 작성되었습니다.   &lt;/strong&gt;&lt;br&gt;     &gt; 프로그램, 단축키 설정 등이 다른 OS 환경과는 호환이 안되는 경우가 많으니 유의하시기 바랍니다. &lt;/p&gt;  &lt;p class=\"notice--danger\"&gt;   &lt;strong&gt;     이 항목은 최신의 내용을 담고 있지 않을 수 있습니다.   &lt;/strong&gt;&lt;br&gt;     &gt; 맨 아래의 항목 업데이트 날짜와 OS나 프로그램의 버전 정보를 꼭 확인해주시기 바랍니다. &lt;/p&gt;  &lt;p class=\"notice--warning\"&gt;   &lt;strong&gt;     이 항목은 검증되지 않은, 편향된, 혹은 잘못된 내용을 포함할 수 있습니다.   &lt;/strong&gt;&lt;br&gt;     &gt; 작성자 역시 공부하는 학생이기에 해당 부분을 댓글이나 이메일을 통해 지적해주신다면 정말 감사할 것 같습니다. &lt;/p&gt;                  이 항목은 현재 작성중입니다.             &gt; 아직 미완성된 코드나 문장 구조가 정확하지 않은 내용이 있을 수 있으니 유의하시기 바랍니다.                    이 항목은 macOS 기반으로 작성되었습니다.             &gt; 프로그램, 단축키 설정 등이 다른 OS 환경과는 호환이 안되는 경우가 많으니 유의하시기 바랍니다.                    이 항목은 최신의 내용을 담고 있지 않을 수 있습니다.             &gt; 맨 아래의 항목 업데이트 날짜와 OS나 프로그램의 버전 정보를 꼭 확인해주시기 바랍니다.                    이 항목은 검증되지 않은, 편향된, 혹은 잘못된 내용을 포함할 수 있습니다.             &gt; 작성자 역시 공부하는 학생이기에 해당 부분을 댓글이나 이메일을 통해 지적해주신다면 정말 감사할 것 같습니다.          Reference         Jekyll 디렉토리 구조 (번역)     ","categories": ["Github Pages"],
        "tags": ["Github"],
        "url": "/github%20pages/blog5/",
        "teaser": null
      },{
        "title": "[Github Pages] 6. Github Pages 블로그 기능 추가",
        "excerpt":"   이 게시물은 Github Pages 블로그, 혹은 Minimal Mistakes 테마에 없는 기능들을 추가해나간 기록들이다. html이나 css를 다룰 줄 알면 금방 할 수 있는, 혹은 다 구글링하면 나오는 내용들이긴 하지만 내가 어떻게 문제를 인식하여 어떤 과정을 거쳐 이를 해결하였는지, 에 대해 자세히 쓰고 싶었다. 그래서 이 게시물은 다른 게시물들과 달리, 내가 블로그에서 부족하다고 느낀 점들을 계속 조금씩이라도 보충해나갈 계획이다.    1. 블로그 댓글 (feat. disqus, giscus)  앞서 서술한 게시물을 보면 Github Pages는 정적 웹 사이트 호스팅 서비스라는 말이 있다. 모든 웹 페이지를 미리 생성하고, 방문자로부터 요청이 들어오면 미리 만든 웹 페이지를 그대로 응답한다는 건데, 사용자와 동적으로 정보를 주고받아야 하는 댓글 등의 기능은 불가능하다는 것이다.    그래서 처음에는 댓글 플랫폼인 disqus를 통해 이를 해결하고자 하였다. 방법은 간단한데, 사이트에 가입하고 무료 플랜을 구독한 다음에 _config.yml를 다음과 같이 수정해주기만 하면 된다.   comments:   provider               : \"disqus\" # 댓글 제공자 지정   disqus:     shortname            :          # disqus ID 지정   그런데 disqus에서 제공하는 기능인 ‘SNS로 댓글 달기’은 개발자 친화적인 기능은 아니였고, 또 나중에는 광고가 노출되기 시작했다. 그래서 대안으로 찾은 게 giscus인데, GitHub Discussions로 작동하고, 마크다운도 지원하면서 대댓글이나 반응과 같은 자잘한 기능들이 마음에 들었다.      적용하는 방법도 Github 앱을 저장소에 설치한 뒤에 html 파일에 아래의 스크립트를 넣어주기만 하면 되는데, 나 같은 경우에는 Minimal Mistakes 테마에서 _includes/social_share.html 파일에 해당 구문을 넣어 적용시켰다.   &lt;section class=\"page__share\"&gt;   &lt;script src=\"https://giscus.app/client.js\"     data-repo=\"pocj8ur4in/pocj8ur4in.github.io\"     data-repo-id=\"R_kgDOICGarA\"     data-category=\"Q&amp;A\"     data-category-id=\"DIC_kwDOICGarM4CZ65L\"     data-mapping=\"pathname\"     data-strict=\"1\"     data-reactions-enabled=\"0\"     data-emit-metadata=\"1\"     data-input-position=\"top\"     data-theme=\"dark_dimmed\"     data-lang=\"ko\"     data-loading=\"lazy\"     crossorigin=\"anonymous\"     async&gt;   &lt;/script&gt; &lt;/section&gt;   2. 블로그 Google 검색 노출 및 검색 설정  아무래도 블로그를 운영하다 보면 다른 사람들의 반응이 궁금할 때가 많은데, 아무것도 설정하지 않은 블로그는 검색되지 않는다는 사실을 깨닫고 해결책을 찾아보았다. Google Search Console에서 내 도메인을 입력한 다음에 소유권 확인을 위해 다운받은 .HTML파일을 root에 위치시키만 하면 며칠 안으로 아래와 같이 적용된다.      추가로 블로그 포스트들이 검색 엔진에 검색되는 것을 가능하도록 진행할 작업들이 있는데, 먼저 _config.yml 파일에서 아래 설정들을 true로 설정한다.   search                   : # 블로그 검색 여부 지정 search_full_content      : # 블로그의 내용 검색 여부 지정   그리고 웹 크롤링을 위해 sitemap.yml과 robots.txt 파일을 생성해 root에 위치시키면 된다.   # 모든 웹 사이트 컨텐츠에 대한 모든 웹 크롤러의 접근 허용 User-agent: * Allow: /  # 모든 웹 사이트 컨텐츠에 대한 모든 웹 크롤러의 접근 차단 User-agent: * Disallow: /  # 구글 검색 로봇만 차단하고, 다른 모든 웹 사이트 컨텐츠에 대한 모든 웹 크롤러의 접근 허용 User-agent: Googlebot Disallow: /  # 네이버 검색로봇만 차단하고, 다른 모든 웹 사이트 컨텐츠에 대한 모든 웹 크롤러의 접근 허용 User-agent: Yeti Disallow: /  Sitemap: https://pocj8ur4in.github.io/sitemap.xml   만약에 블로그의 방문자 수 통계를 보고 싶다면, Google Analytics를 가입한 후 애널리틱스 데이터 스트림을 설정하면 된다. 이때, 측정 ID를 복사한 후 _config.yml 파일을 다음과 같이 수정하면 된다.   # Analytics analytics:   provider               : \"google-gtag\"   google:     tracking_id          : \"(측정 ID)\"   ","categories": ["Github Pages"],
        "tags": ["Github"],
        "url": "/github%20pages/blog6/",
        "teaser": null
      }]
