var store = [{
        "title": "[F/E] HTML",
        "excerpt":"HTML (HyperText Mark-up Language) : 웹 문서의 구조를 기술하는 마크업 언어         하이퍼링크 (hyperlink) : 문서 내 어떤 요소와 다른 요소 간의 비선형적 (nonlinear) 연결   하이퍼텍스트 (hypertext) : 하이퍼링크를 통해 상호 연결되어 네트워크처럼 구성된 문서   &lt;html&gt; &lt;head&gt; \t&lt;div style=\"color: blue; font-size: 15px;\"&gt; \t\tHello World! \t&lt;/div&gt; &lt;/head&gt; &lt;/html&gt;    \t \t\t \t\t\tHello World! \t\t \t      HTML 요소 (HTML Elements) : HTML 문서나 웹 페이지를 이루는 개별적인 부분            HTML 태그 (HTML Tags) &lt;tag&gt;&lt;/tag&gt; : 요소의 시작과 끝을 나타내 문서의 구조를 명시하는 마크업 기호                    HTML 속성 (HTML Attributes) &lt;tag element=\"\"&gt; : 여는 태그 내에서 명령어를 구체화하는 속성                            HTML 변수 (HTML Arguments) &lt;tag element=\"value\"&gt; : 태그 내의 속성에 해당되는 인자                                                   HTML 내용 (HTML Contents) : HTML 문서를 통해 화면에 표시될 내용   # HTML 전역 속성 (HTML Global Attributes) : 모든 HTML 요소에서 사용 가능한 속성   class와 id  : CSS나 JavaScript에서 요소를 선택하거나 접근할 때 사용하는 속성     클래스 (class=\"\") : HTML 문서에서 정의된 요소의 별칭   아이디 (id=\"\") : HTML 문서에서 정의된 고유한 식별자   &lt;div class=\"class\"&gt; \t&lt;div id=\"id\"&gt; \t  class &amp; id \t&lt;/div&gt; &lt;/div&gt;   lang : 웹 문서의 텍스트가 어떤 언어로 작성되었는지 나타내는 속성   &lt;p lang=\"ko\"&gt;한글&lt;/p&gt; &lt;p lang=\"en\"&gt;english&lt;/p&gt;   한글  english   style : 요소에 적용할 CSS을 나타내는 속성   &lt;div style=\"color: white; font-size: 15px; background-color: black;\"&gt; \t&lt;a href=\"https://pocj8ur4in.github.io\" target=\"_blank\" title=\"pocj8ur4in\"&gt;   \t  pocj8ur4in \t&lt;/a&gt; &lt;/div&gt;             pocj8ur4in      title : 요소의 설명을 나타내는 속성   &lt;p title=\"pocj8ur4in\"&gt;pocj8ur4in&lt;/p&gt;   pocj8ur4in   # 범위 관련 HTML 태그   &lt;html&gt;&lt;/html&gt; : HTML으로 작성된 문서임을 선언하는 태그     &lt;!DOCTYPE html&gt; : 마크업 언어에서의 문서 형식을 정의하는 태그            DTD 태그 (Document Type Definition)       웹 브라우저의 렌더링 엔진이 관용 모드 (Quirks Mode)가 아닌 표준 모드로 렌더링       HTML5`` :&lt;!DOCTYPE html&gt;```으로 선언           &lt;!DOCTYPE html&gt; &lt;html lang=\"ko\"&gt; ... &lt;/html&gt;   &lt;head&gt;&lt;/head&gt; : 웹 문서의 속성을 선언하는 태그     실제 웹 브라우저 화면 상에는 출력되지 않는 HTML 문서의 정보들을 넣음   &lt;!DOCTYPE html lang=\"ko\"&gt; &lt;html lang=\"ko\"&gt; &lt;head&gt; ... &lt;/head&gt; ... &lt;/html&gt;   &lt;body&gt;&lt;/body&gt; : 웹 문서의 모양을 선언하는 태그     실제 웹 브라우저 화면 상에는 출력되는 HTML 문서의 레이아웃을 넣음   &lt;!DOCTYPE html&gt; &lt;html lang=\"ko\"&gt; ... &lt;body&gt; ... &lt;/body&gt; &lt;/html&gt;   # 메타 정보 관련 태그     메타 정보 (meta data) : 웹 서버와 웹 브라우저 간 상호 교환되는 정보   &lt;title&gt;&lt;/title&gt; : 웹 문서의 제목을 선언하는 태그     브라우저의 제목 표시줄이나 페이지 탭에 표시되는 제목을 출력   &lt;!DOCTYPE html&gt; &lt;html lang=\"ko\"&gt; &lt;head&gt; \t&lt;title&gt;웹 문서의 제목&lt;/title&gt; &lt;/head&gt; &lt;/html&gt;   &lt;base /&gt; : 웹 문서에 포함된 모든 상대 URL들에 대한 기준 URL를 선언하는 태그     상대 URL를 사용하는 다른 HTML 요소보다 앞에 위치해야 함   한 문서에 하나의 &lt;base&gt;만을 사용 가능   문서 내에 &lt;base&gt;가 존재하지 않으면, 해당 문서의 기준 URL는 (현재 위치).(상대 URL)   &lt;!DOCTYPE html&gt; &lt;html lang=\"ko\"&gt; &lt;head&gt; \t&lt;base href=\"기준 URL (절대 경로, 상대 경로 모두 가능)\" \ttarget=\"_self (현재 창에서 열기) | _blank (새로운 창에서 열기)\" /&gt; &lt;/head&gt; &lt;/html&gt;   &lt;link /&gt; : 현재 웹 문서와 외부 리소스 간의 관계를 정의하는 태그     HTML, CSS, 아이콘 등을 가져옴    \t \t\t \t\t\tlink 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\trel \t\t\t현재 웹 문서와 외부 소스 간의 관계 \t\t \t\t \t\t\thref \t\t\t외부 소스의 주소 \t\t \t\t \t\t\ttype \t\t\t외부 소스의 타입 \t\t \t   &lt;!DOCTYPE html&gt; &lt;html lang=\"ko\"&gt; &lt;head&gt; &lt;link \trel=\"manifest\"\t\t\t&lt;!--? 현재 웹 문서와 웹 익스텐션이 포함하는 manifest.json을 연결할 때 --&gt; \thref=\"manifest.json\"/&gt; &lt;link \trel=\"canonical\"\t\t\t&lt;!--? 검색 엔진을 위한 대표 URL를 설정하는 rel 변수 --&gt; \thref=\"대표 URL\"/&gt;\t\t\t&lt;!--? 웹 문서 내 URL는 다르나 동일한 내용의 웹 문서가 있을 때 사용 --&gt; &lt;link \trel=\"shortcut icon\"\t\t&lt;!--? 브라우저 탭에 표시될 아이콘을 설정하는 rel 변수 --&gt; \thref=\"PUBLIC_URL%/favicon.ico\" \ttype=\"image/x-icon\" \tsizes=\"16x16\"/&gt; &lt;link\t\t\t\t\t&lt;!--? 애플 메타 태그 (apple meta tag) --&gt; \trel=\"apple-touch-icon\"\t\t&lt;!--? '홈 화면에 추가' 기능을 사용할 때 표시될 웹 사이트의 아이콘을 설정하는 rel 변수 --&gt; \thref=\"%PUBLIC_URL%/img/apple-icon-57.png\" \tsizes=\"12x57\"/&gt; &lt;link \trel=\"apple-touch-startup-icon\"\t&lt;!--? '홈 화면에 추가' 기능을 사용할 때 로딩 시 스타트업 이미지을 설정하는 rel 변수 --&gt; \tsizes=\"320x460\"\t\t\t&lt;!--? 단, 이미지의 크기가 각 기기에 맞게끔 정확히 맞춰져 있어야 제대로 화면에 표시 --&gt; \thref=\"%PUBLIC_URL%/img/apple-icon-320.png\"/&gt; &lt;/head&gt; &lt;/html&gt;   &lt;style&gt;&lt;/style&gt; : 현재 웹 문서의 스타일 정보를 정의하는 태그     CSS 선택자, 속성, 값을 설정    \t \t\t \t\t\tstyle 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\ttype \t\t\t외부 소스의 타입 \t\t \t   &lt;!DOCTYPE html&gt; &lt;html lang=\"ko\"&gt; &lt;head&gt; &lt;style&gt; \tbody { background-color: #fff; } \tdiv { color: #000; } &lt;/&gt; &lt;/head&gt; &lt;/html&gt;   &lt;meta /&gt; : 기타 메타데이터 요소들을 선언하는 태그     검색 엔진 등이 웹 페이지를 읽을 때 해당 서비스에서 이 페이지를 어떻게 표시할지 설명    \t  \t\t  \t\t\tmeta 태그의 속성 값  \t\t\t설명  \t\t  \t  \t  \t\t  \t\t\tname  \t\t\t메타 정보의 이름 선언 : 웹 서버가 웹 브라우저의 요청에 대해 응답할 정보들을 지정하는 속성  \t\t \t\t  \t\t\thttp-equiv  \t\t\tHTTP 문서의 초기 정보 선언 : 웹 서버가 웹 문서 내에 HTML 응답 헤더를 넣어 웹 브라우저가 초기 정보를 지정하는 속성  \t\t  \t\t  \t\t\tcontent  \t\t\t메타 정보의 내용 선언 : name 변수와 http-equiv 태그를 선언할 때 같이 포함되어야 할 내용을 지정하는 속성  \t\t  \t   &lt;!DOCTYPE html&gt; &lt;html lang=\"ko\"&gt; &lt;head&gt;  &lt;meta  name=\"description\"\t\t\t\t&lt;!--? 웹 브라우저의 검색 결과에 표시될 웹 문서의 설명을 선언하는 name 변수 --&gt;  content=\"설명\"/&gt;\t\t\t\t&lt;!--? content 값은 공백을 포함해 최대 150글자여야 함 --&gt;      &lt;meta  name=\"keywords\"\t\t\t\t&lt;!--? 웹 브라우저의 검색 엔진에 의해 검색될 검색 키워드를 선언하는 name 변수 --&gt;  content=\"키워드1, 키워드2,...\"/&gt;       &lt;meta  name=\"date\"\t\t\t\t\t&lt;!--? 웹 문서가 작성된 날짜를 선언하는 name 변수 --&gt;  content=\"2022-09-21T17:38:06+09:00\"/&gt;\t\t&lt;!--? content 값은 \"연도-월-일T시:분:초+(GMT)\" 형식으로 작성 --&gt; \t\t\t\t\t\t&lt;!--? GMT는 그리니치 표준시와 현 국가/지역 사이의 시차를 의미 --&gt;   &lt;meta  name=\"robots\"\t\t\t\t\t&lt;!--? 검색 로봇을 제어하는 name 변수 --&gt;  content=\"robots의 content 변수1,...\"/&gt;\t\t&lt;!--? Index : 해당 문서를 포함해 링크가 걸린 곳을 수집 대상으로 지정 --&gt; \t\t\t\t\t\t&lt;!--? Noindex : 해당 문서를 수집 대상에서 제외 --&gt; \t\t\t\t\t\t&lt;!--? Follow : 해당 문서를 수집 대상으로 지정 --&gt; \t\t\t\t\t\t&lt;!--? Nofollow : 해당 문서를 포함해 링크가 걸린 곳을 수집 대상에서 제외 --&gt; \t\t\t\t\t\t&lt;!--? All : 'Index, Follow'와 동일 --&gt; \t\t\t\t\t\t&lt;!--? None : 'Noindex, Nofollow'와 동일 --&gt;  &lt;meta  name=\"viewport\"\t\t\t\t&lt;!--? 모든 장치에서 웹 문서가 잘 보이도록 뷰 포트를 설정하는 name 변수 --&gt;  content=\"width=device-width,  initial-scale=1.0\"/&gt;   &lt;meta\t\t\t\t\t\t&lt;!--? twitter : 트위터의 '미리보기'을 설정하는 name 변수 --&gt;  name=\"twitter:card\"\t\t\t\t&lt;!--? twitter:card : 트위터 미리보기를 표시 --&gt;  content=\"summary\"/&gt;       &lt;meta  name=\"twitter:url\"\t\t\t\t&lt;!--? twitter:url : 트위터 미리보기에서 표시될 웹 페이지 주소 --&gt;  content=\"website_url\"/&gt;       &lt;meta  name=\"twitter:title\"\t\t\t\t&lt;!--? twitter:title : 트위터 미리보기에서 표시될 웹 페이지 제목 --&gt;  content=\"website_name\"/&gt;        &lt;meta  name=\"twitter:description\"\t\t\t&lt;!--? twitter:description : 트위터 미리보기에서 표시될 웹 페이지 설명 --&gt;  content=\"website_description\"/&gt;        &lt;meta  name=\"twitter:image\"\t\t\t\t&lt;!--? twitter:image : 트위터 미리보기에서 표시될 웹 페이지 이미지 --&gt;  content=\"website_image\"/&gt;       &lt;meta\t\t\t\t\t\t&lt;!--? apple-mobile-web-app : 사파리 '홈 화면에 추가'을 설정하는 name 변수 --&gt;  name=\"apple-mobile-web-app-title\"\t\t&lt;!--? 홈 화면에 추가 기능을 사용할 때 표시될 웹 사이트의 이름 --&gt;  content=\"website_name\"/&gt;       &lt;meta  name=\"apple-mobile-web-app-capable\"\t\t&lt;!--? 홈 화면에 추가 기능을 사용할 때 브라우저의 UI 사용 여부 --&gt;  content=\"yes\"/&gt;       &lt;meta  name=\"apple-mobile-web-app-status-bar-style\"\t&lt;!--? 홈 화면에 추가 기능을 사용할 때 표시될 상태바의 색상 --&gt;  content=\"black-translucent\"/&gt; \t\t\t&lt;!--? default : 회색, black : 검정, black-translucent : 반투명 --&gt;       &lt;meta  http-equiv=\"X-UA-Compatible\"\t\t\t&lt;!--? 웹 문서를 렌더링할 IE 버전을 명시해 웹 호환성을 지정하는 http-equiv 변수 --&gt;  content=\"X-UA-Compatible의 content 변수\"/&gt;\t&lt;!--? IE=5,7,8,EmulateIE7,EmulateIE8 : 각 버전에 해당하는 렌더링 방식 사용 --&gt; \t\t\t\t\t\t&lt;!--? IE=edge : 항상 최신 표준 모드로 렌더링 --&gt; \t\t\t\t\t\t&lt;!--? IE=edge, chrome=1: ~, Chrome이 설치되어 있다면 Chrome으로 렌더링 --&gt; \t  &lt;meta  charset=\"문자 인코딩 방식\"/&gt;\t\t\t&lt;!--? 웹 브라우저의 문자 인코딩 방식 ('호환성 보기') 을 지정하는 http-equiv 변수 --&gt; \t\t\t\t\t\t&lt;!--? EUC-KR (ISO-2022-KR) : ISO-숫자 타입 문자 인코딩 (한글을 2비트로 변환) --&gt; \t\t\t\t\t\t&lt;!--? UTF-8,16,32 : 유니코드 변환 포맷 인코딩 (모든 문자를 8,16,32비트로 변환) --&gt;   &lt;meta  http-equiv=\"content-security-policy\"\t\t&lt;!--? XSS, 데이터 삽입 공격을 대비해 웹 문서 컨텐츠 정책을 명시하는 http-equiv 변수 --&gt;  content=\"CSP 지시문\"/&gt;\t\t\t\t&lt;!--? default-src : 모든 컨텐츠는 현재 도메인에서만 제공 (디폴트 설정) --&gt; \t\t\t\t\t\t&lt;!--? connect-src : 연결 가능한 URL 제한 --&gt; \t\t\t\t\t\t&lt;!--? script-src : 스크립트 관련 권한 집합 제어 --&gt; \t\t\t\t\t\t&lt;!--? style-src : 스타일시트 관련 권한 집합 제어 --&gt; \t\t\t\t\t\t&lt;!--? img-src : 이미지 관련 권한 집합 제어 --&gt; \t\t\t\t\t\t&lt;!--? font-src : 웹 글꼴을 제공할 수 있는 URL 지정 --&gt; \t\t\t\t\t\t&lt;!--? frame-src : 상위 iframe 도메인에서 하위 iframe 도메인을 확인하고 제어 --&gt;       &lt;meta  http-equiv=\"content-security-policy\"  content=\"CSP 지시문 CSP 옵션\"/&gt;\t\t\t&lt;!--? *.trusted.com : 접근 허용할 도메인 지정 --&gt; \t\t\t\t\t\t&lt;!--? 'none' : 모든 도메인 차단 --&gt; \t\t\t\t\t\t&lt;!--? 'self' : 현재 도메인만 허용 --&gt; \t\t\t\t\t\t&lt;!--? 'unsafe-inline' : 소스 코드 내 인라인 자바스크립트 및 CSS 허용 --&gt; \t\t\t\t\t\t&lt;!--? 'nonce-암호화된 문자' : 암호화된 방식으로 인라인 자바스크립트 및 CSS 허용 --&gt;   &lt;meta  http-equiv=\"content-script-type\"\t\t&lt;!--? 웹 문서에 사용된 프로그래밍 언어를 명시하는 http-equiv 변수 --&gt;  content=\"text/프로그래밍 언어\"/&gt;       &lt;meta  http-equiv=\"default-style\"\t\t\t&lt;!--? 웹 문서에 우선적으로 적용할 스타일 시트를 지정하는 http-equiv 변수 --&gt;  content=\"스타일시트\"/&gt;       &lt;meta  http-equiv=\"refresh\"\t\t\t\t&lt;!--? 웹 문서를 새로고침하는 시간 간격을 지정하는 http-equiv 변수 --&gt;  content=\"시간 간격\"; url=\"\"/&gt;\t\t\t&lt;!--? url=\"\" : 새로고침한 후 이동할 주소 지정 --&gt;       &lt;meta  http-equiv=\"cache-control\"\t\t\t&lt;!--? 웹 캐시 사용 여부를 지정하는 http-equiv 변수 --&gt;  content=\"no-cache\"/&gt;\t\t\t\t&lt;!--? no-cache : 사용자의 웹 브라우저가 항상 캐시를 읽지 않고 페이지를 갱신 --&gt;       &lt;meta  http-equiv=\"pragma\"\t\t\t\t&lt;!--? 현재 웹 문서를 캐시로 저장할지 여부를 지정하는 http-equiv 변수 --&gt;  content=\"no-cache\"/&gt;\t\t\t\t&lt;!--? no-cache : 사용자의 웹 브라우저가 항상 캐시를 읽지 않고 페이지를 갱신 --&gt;       &lt;meta  http-equiv=\"expires\"\t\t\t\t&lt;!--? 현재 웹 문서의 웹 캐시 만료일을 지정하는 http-equiv 변수 --&gt;  content=\"캐시 만료일\"/&gt;       &lt;meta  http-equiv=\"장면 전환 http-equiv 변수\"\t\t&lt;!--? 특정 상황에서의 장면 전환 효과를 지정하는 http-equiv 변수 --&gt;  content=\"revealtrans(duration=수행할 시간,\t&lt;!--? page-enter : 현재 페이지 접속 시  --&gt;  transition=수행할 방법)\"/&gt;\t\t\t&lt;!--? page-exit : 현재 페이지 종료 시 --&gt; \t\t\t\t\t\t&lt;!--? site-enter : 현재 사이트 접속 시 --&gt; \t\t\t\t\t\t&lt;!--? site-exit : 현재 사이트 종료 시 --&gt;       &lt;meta  http-equiv=\"origin-trial\"\t\t\t&lt;!--? 웹 개발자가 웹 문서에 실험단계인 속성을 명시하는 http-equiv 변수 --&gt;  content=\"....\"/&gt;       &lt;meta\t\t\t\t\t\t&lt;!--? 오픈그래프 태그 (OpenGraph Tag) --&gt;  property=\"og:오픈그래프 변수\"\t\t\t&lt;!--? SNS에 게시될 때 데이터 설정을 최적화하는 property 변수 --&gt;  content=\"오픈그래프 변수에 해당되는 값\"/&gt;\t\t&lt;!--? og 필수 변수 --&gt; \t  \t\t\t\t\t&lt;!--? title : 웹 사이트 제목 --&gt; \t\t\t\t\t\t&lt;!--? type : 웹 문서의 타입 --&gt; \t\t\t\t\t\t&lt;!--? image : 웹 문서에 표현될 이미지 --&gt; \t\t\t\t\t\t&lt;!--? url : 웹 문서의 대표 URL --&gt; \t\t\t\t\t\t&lt;!--? og 옵션 변수 --&gt; \t\t\t\t\t\t&lt;!--? description : 웹 문서 내에 표현될 설명 --&gt; \t\t\t\t\t\t&lt;!--? locale : 웹 문서 내에 표현될 언어 --&gt; \t\t\t\t\t\t&lt;!--? locale:alternate : 웹 문서 내에 표현될 다국적 언어 --&gt; \t\t\t\t\t\t&lt;!--? site_name : 웹 문서 내에 표현될 카테고리 제목 --&gt; \t\t\t\t\t\t&lt;!--? audio : 웹 문서에 포함되는 오디오 파일 URL --&gt; \t\t\t\t\t\t&lt;!--? video : 웹 문서에 포함되는 비디오 파일 URL --&gt; \t\t\t\t\t\t&lt;!--? og 오브젝트 변수 --&gt; \t\t\t\t\t\t&lt;!--? width : 웹 문서에 표현될 오브젝트의 가로 길이 --&gt; \t\t\t\t\t\t&lt;!--? height : 웹 문서에 표현될 오브젝트의 세로 길이 --&gt; \t\t\t\t\t\t&lt;!--? url : 웹 문서에 표현될 오브젝트의 URL --&gt; \t\t\t\t\t\t&lt;!--? secure_url : 웹 문서에 표현될 오브젝트의 HTTPS URL --&gt; \t\t\t\t\t\t&lt;!--? alt : 표현될 오브젝트에 대한 설명 --&gt; &lt;/head&gt; &lt;/html&gt;   # 컨텐츠 구분 관련 태그   &lt;h1&gt;&lt;/h1&gt;~&lt;h6&gt;&lt;/h6&gt; : 문서 정보 계층을 구조화하는 태그     문서나 구분된 영역의 제목을 설정 (Heading)            숫자가 낮을 수록 높은 단계의 제목           &lt;h1&gt;h1&lt;/h1&gt; &lt;h2&gt;h2&lt;/h2&gt; &lt;h3&gt;h3&lt;/h3&gt; &lt;h4&gt;h4&lt;/h4&gt; &lt;h5&gt;h5&lt;/h5&gt; &lt;h6&gt;h6&lt;/h6&gt;   \th1  \th2  \th3  \th4  \th5  \th6    &lt;header&gt;&lt;/header&gt; : 문서의 헤더를 선언하는 태그     헤더 (header) 영역 : 일반적으로 로고, 제목, 검색 등이 포함   &lt;header&gt; &lt;h1&gt;제목&lt;/h1&gt; ... &lt;/header&gt;  header { display: block; }   &lt;footer&gt;&lt;/footer&gt; : 문서의 푸터를 선언하는 태그     푸터 (footer) 영역 : 일반적으로 작성자, 저작권, 관련 문서 등이 포함   &lt;footer&gt; &lt;p&gt;작성자&lt;/p&gt; ... &lt;/footer&gt;  footer { display: block; }   &lt;main&gt;&lt;/main&gt; : 문서의 주요 컨텐츠 영역을 선언하는 태그     한 문서에 하나의 &lt;main&gt; 태그만을 선언 가능   IE에서 지원하지 않음   &lt;main&gt; &lt;h1&gt;주요 컨텐츠&lt;/h1&gt; ... &lt;/main&gt;  main { display: block; }   &lt;article&gt;&lt;/article&gt; : 독립적으로 구분되거나 재사용 가능한 영역을 선언하는 태그     &lt;h1&gt;~&lt;h6&gt; 태그를 포함해 식별   작성한 날짜와 시간을 &lt;time&gt; 태그의 datetime 속성으로 작성   &lt;article&gt; &lt;h2&gt;독립 영역 1&lt;/h2&gt; ... &lt;/article&gt; &lt;article&gt; &lt;h2&gt;독립 영역 2&lt;/h2&gt; ... &lt;/article&gt;  article { display: block; }   &lt;section&gt;&lt;/section&gt; : 문서의 일반적인 영역을 선언하는 태그     &lt;h1&gt;~&lt;h6&gt; 태그를 포함해 식별   &lt;section&gt; &lt;h2&gt;일반 영역 1&lt;/h2&gt; ... &lt;/section&gt; &lt;section&gt; &lt;h2&gt;일반 영역 2&lt;/h2&gt; ... &lt;/section&gt;  section { display: block; }   &lt;aside&gt;&lt;/aside&gt; : 문서의 별도 컨텐츠 영역을 선언하는 태그     사이드 (aside) 영역 : 일반적으로 광고나 사이드바로 설정   &lt;aside&gt; &lt;h4&gt;별도 컨텐츠&lt;/h4&gt; ... &lt;/aside&gt;  aside { display: block; }   &lt;nav&gt;&lt;/nav&gt; : 다른 페이지로 이동하기 위한 링크를 선언하는 태그     일반적으로 바로가기, 목차, 색인 등으로 설정   &lt;a&gt; 태그로 링크 선언   &lt;nav&gt; \t&lt;a href=\"/html/\"&gt;HTML&lt;/a&gt; | \t&lt;a href=\"/html/css/\"&gt;CSS&lt;/a&gt; | \t&lt;a href=\"/html/css/js/\"&gt;JavaScript&lt;/a&gt; &lt;/nav&gt; &lt;nav&gt;     &lt;ol&gt;         &lt;li&gt;&lt;a href=\"#\"&gt;HTML&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href=\"#\"&gt;CSS&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href=\"#\"&gt;JavaScript&lt;/a&gt;&lt;/li&gt;     &lt;/ol&gt; &lt;/nav&gt;  aside { display: block; }   &lt;div&gt;&lt;/div&gt; : 아무것도 나타내지 않은 컨텐츠 영역을 선언하는 태그     일반적으로 CSS와 연게해 꾸미는 목적으로 사용   &lt;div&gt; &lt;h2&gt;아무것도 나타내지 않은 컨텐츠 영역&lt;/h2&gt; ... &lt;/div&gt;  div { display: block; }   # 인라인 텍스트 관련 태그   &lt;p&gt;&lt;/p&gt; : 하나의 문단을 선언하는 태그   &lt;p align=\"center\"&gt;문단 1 : 가운데 정렬&lt;/p&gt; &lt;p align=\"right\"&gt;문단 2 : 오른쪽 정렬&lt;/p&gt;    \t문단 1 : 가운데 정렬  \t문단 2 : 오른쪽 정렬    p { display: block; }   &lt;hr&gt; : 문단을 분리하는 가로줄을 넣는 태그   ↓ 가로줄 &lt;hr&gt; ↑ 가로줄    \t↓ 가로줄 \t \t↑ 가로줄   hr { display: block; }  &lt;a&gt;&lt;/a&gt; : 하이퍼링크를 생성하는 태그   \t \t\t \t\t\ta 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tdownload \t\t\t이 요소가 리소스를 다운로드하는 용도인가? (boolean) \t\t \t\t \t\t\thref \t\t\t링크된 문서를 입력 \t\t \t\t \t\t\ttarget \t\t\t링크된 문서를 어떻게 열지 지정 \t\t \t\t \t\t\tname \t\t\t링크의 이름을 지정 (문서 내에서도 이 이름을 이용해 이동 가능) \t\t \t   &lt;a   href=\"https://pocj8ur4in.github.io\"   target=\"_blank\"   title=\"pocj8ur4in\"&gt;     pocj8ur4in &lt;/a&gt;             pocj8ur4in      a { display: inline; }   &lt;code&gt;&lt;/code&gt; : 소스 코드를 넣는 태그     `을 3번 쓰는 것으로 대체 가능   &lt;code&gt; \tprint(\"Hello World!\") &lt;code&gt;    \tprint(\"Hello World!\")    code { display: inline; }   &lt;time&gt; : 날짜나 시간을 나타내기 위해 선언하는 태그   &lt;p&gt;Hello World!&lt;time datetime=\"유효한 날짜나 시간\"&gt;&lt;/p&gt;  time { display: inline; }   &lt;span&gt;&lt;/span&gt; : 아무것도 나타내지 않는 컨텐츠 영역을 선언하는 태그     일반적으로 CSS와 연게해 꾸미는 목적으로 사용   &lt;p&gt;Hello &lt;span style=\"color:blue\"&gt;World&lt;/span&gt;!&lt;/p&gt;    \tHello World!    span { display: inline; }   &lt;br&gt; : 줄바꿈을 선언하는 태그     Enter 키를 2번 입랙한 것으로 대체 가능   &lt;br&gt;       br { display: inline; }   # 목록 관련 태그   &lt;li&gt;&lt;/li&gt; : 목록을 표시할 때 각 항목들을 선언하는 태그     &lt;ol&gt;과 &lt;ul&gt;은 &lt;li&gt;의 부모            &lt;li&gt;는 단독으로 사용할 수 없음            \t \t\t \t\t\tli 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tvalue \t\t\t숫자로 항목의 순서 지정 \t\t \t   &lt;!--? 잘못된 사용 --&gt; &lt;li&gt;X&lt;/li&gt; &lt;li&gt;Y&lt;/li&gt; &lt;li&gt;Z&lt;/li&gt;   li { display: list-item; }   &lt;ul&gt;&lt;/ul&gt; : 순서 없는 목록을 선언하는 태그   &lt;ul&gt; \t&lt;li&gt;X&lt;/li&gt; \t&lt;li&gt;Y&lt;/li&gt; \t&lt;li&gt;Z&lt;/li&gt; &lt;/ul&gt;    \t \t\tX \t\tY \t\tZ \t   ul { display: block; }   &lt;ol&gt;&lt;/ol&gt; : 순서 있는 목록을 선언하는 태그     정렬된 목록의 항목 순서는 해당 항목의 중요도를 의미할 수 있음    \t \t\t \t\t\tli 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tstart \t\t\t숫자로 항목에 매겨진 번호의 시작 값 지정 \t\t \t\t \t\t\ttype \t\t\t항목에 매겨진 번호의 유형 지정 \t\t \t   &lt;ol&gt; \t&lt;li&gt;X&lt;/li&gt; \t&lt;li&gt;Y&lt;/li&gt; \t&lt;li&gt;Z&lt;/li&gt; &lt;/ol&gt;    \t \t\tX \t\tY \t\tZ \t   ol { display: block; }   &lt;dl&gt;&lt;/dl&gt; : 용어 (&lt;dt&gt;&lt;/dt&gt;)와 정의 (&lt;dd&gt;&lt;/dd&gt;) 쌍의 영역을 선언하는 태그     &lt;dd&gt;와 &lt;dt&gt;는 &lt;dl&gt;의 자식            &lt;dd&gt;와 &lt;dt&gt;는 단독으로 사용할 수 없음           키 (key)와 값 (value)의 형태를 표현할 때 사용   &lt;dl&gt;   &lt;dt&gt;용어 1&lt;/dt&gt;&lt;dd&gt;정의 1&lt;/dd&gt;   &lt;dt&gt;용어 2&lt;/dt&gt;&lt;dd&gt;정의 2&lt;/dd&gt; &lt;/dl&gt;    \t   \t\t용어 1정의 1   \t\t용어 2정의 2 \t   dl, dt, dd { display: block; }   # 표 관련 태그   &lt;table&gt;, &lt;tr&gt;, &lt;th&gt;, &lt;td&gt; : 표를 만드는 태그     데이터 표(&lt;table&gt;)의 행(&lt;tr&gt;), 머리글 열(&lt;th&gt;)과 내용 열(&lt;td&gt;)을 생성    \t \t\t \t\t\ttable 태그 \t\t\t설명 \t\t \t \t \t\t \t\t\ttr \t\t\t표의 행 표현 \t\t \t\t \t\t\tth \t\t\t표의 머리말 열 표현 \t\t \t\t \t\t\ttd \t\t\t표의 내용 열 표현 \t\t \t    \t \t\t \t\t\ttable 컨텐츠 구분 \t\t\t설명 \t\t \t \t \t\t \t\t\tcaption \t\t\t표의 제목 부분 기술 \t\t \t\t \t\t\tcol \t\t\t표의 열 정보 기술 \t\t \t\t \t\t\tthead \t\t\t표의 헤더 부분 기술 \t\t \t\t \t\t\ttbody \t\t\t표의 본문 부분 기술 \t\t \t\t \t\t\ttfoot \t\t\t표의 푸터 부분 기술 \t\t \t    \t \t\t \t\t\ttable 관련 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tabbr \t\t\tth : 표에서 열에 대한 설명 \t\t \t\t \t\t\tscope \t\t\tth : 어느 부분의 머리말인지 명시 col / row : 자신의 열 / 자신의 행 colgroup / rowgroup : 모든 열 / 모든 행 \t\t \t\t \t\t\tcolspan \t\t\t표에서 병합하려는 열의 수 \t\t \t\t \t\t\trowspan \t\t\t표에서 병합하려는 행의 수 \t\t \t   &lt;table&gt;   &lt;caption&gt;OO고등학교 시간표&lt;/caption&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt; &lt;/th&gt;       &lt;th&gt;월&lt;/th&gt;       &lt;th&gt;화&lt;/th&gt;       &lt;th&gt;수&lt;/th&gt;       &lt;th&gt;목&lt;/th&gt;       &lt;th&gt;금&lt;/th&gt;      &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;     &lt;tr&gt;       &lt;th&gt;1교시&lt;/th&gt;       &lt;td&gt;수학&lt;/td&gt;       &lt;td rowspan=\"2\"&gt;국어&lt;/td&gt;       &lt;td&gt;수학&lt;/td&gt;       &lt;td&gt;과학&lt;/td&gt;       &lt;td&gt;영어&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;th&gt;2교시&lt;/th&gt;       &lt;td rowspan=\"2\"&gt;사회&lt;/td&gt;       &lt;td&gt;영어&lt;/td&gt;       &lt;td&gt;국어&lt;/td&gt;       &lt;td rowspan=\"3\"&gt;음악&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;th&gt;3교시&lt;/th&gt;       &lt;td&gt;수학&lt;/td&gt;       &lt;td rowspan=\"2\"&gt;미술&lt;/td&gt;       &lt;td&gt;영어&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;th&gt;4교시&lt;/th&gt;       &lt;td&gt;체육&lt;/td&gt;       &lt;td&gt;사회&lt;/td&gt;       &lt;td&gt;영어&lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;    \tOO고등학교 시간표 \t \t\t \t\t\t  \t\t\t월 \t\t\t화 \t\t\t수 \t\t\t목 \t\t\t금 \t\t \t \t \t\t \t\t\t1교시 \t\t\t수학 \t\t\t국어 \t\t\t수학 \t\t\t과학 \t\t\t영어 \t　　 \t\t \t\t\t2교시 \t\t\t사회 \t\t\t영어 \t\t\t국어 \t\t\t음악 \t　　 \t\t \t\t\t3교시 \t\t\t수학 \t\t\t미술 \t\t\t영어 \t\t \t\t \t\t\t4교시 \t\t\t체육 \t\t\t사회 \t\t\t영어 \t　　 \t   table { display: table; } tr { display: table-row; } th, td { display: table-cell; }   # 멀티미디어 관련 태그   &lt;img&gt; : 이미지를 삽입하는 태그   \t \t\t \t\t\timg 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tsrc \t\t\t이미지 파일의 경로를 지정 절대 경로 : http:// 또는 https:// 상대 경로 : /path/filename \t\t \t\t \t\t\talt \t\t\t이미지가 출력되지 않을 경우 이미지에 대한 설명을 제공 \t\t \t\t \t\t\ttitle \t\t\t이미지에 대한 추가 정보를 제공  (마우스가 접근하면 말풍선으로 표시) \t\t \t\t \t\t\twidth, height \t\t\t이미지의 가로, 세로의 길이를 지정 (HTML5 : 픽셀만 지정 가능, %는 CSS 대체) \t\t \t\t \t\t\tborder \t\t\t이미지의 경계선의 두께를 지정 (기본값 : 1px) \t\t \t   &lt;img src=\"https://cdn.pixabay.com/photo/2020/10/21/04/01/leaves-5672036_1280.png\"   alt=\"leaves-5672036_1280.png\"   title=\"이미지\"   height=\"360px\"   width=\"360px\"   border=\"0px\"&gt;      img { display: inline; }   &lt;audio&gt; : 오디오를 삽입하는 태그    \t \t\t \t\t\taudio 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tsrc \t\t\t삽입할 오디오의 주소 지정 \t\t \t\t \t\t\tautoplay \t\t\t오디오의 자동 재생 여부 지정 \t\t \t\t \t\t\tcontrols \t\t\t오디오의 소리 조절, 시간대 탐색, 일시정지 및 재시작을 할 수 있는 컨트롤러 생성 \t\t \t\t \t\t\tloop \t\t\t비디오의 재시작 여부 지정 \t\t \t\t \t\t\tpreload \t\t\t웹 문서를 열 때 동영상, 메타데이터 로드 여부 지정 auto : 모두 로드 metadata : 메타데이터만 로드 none : 모두 로드하지 않음 \t\t \t   audio { display: inline; }   &lt;video&gt; : 비디오를 삽입하는 태그    \t \t\t \t\t\tvideo 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tsrc \t\t\t삽입할 비디오의 주소 지정 \t\t \t\t \t\t\tposter \t\t\t삽입할 비디오 썸네일 이미지의 주소 지정 \t\t \t\t \t\t\ttype \t\t\t삽입할 비디오의 타입 지정 \t\t \t\t \t\t\theight \t\t\t비디오의 출력 영역 높이 지정 \t\t \t\t \t\t\twidth \t\t\t비디오의 출력 영역 너비 지정 \t\t \t\t \t\t\tposter \t\t\t비디오 포스터 프레임의 주소 지정 \t\t \t\t \t\t\tautoplay \t\t\t비디오의 자동 재생 여부 지정 \t\t \t\t \t\t\tcontrols \t\t\t비디오의 소리 조절, 시간대 탐색, 일시정지 및 재시작을 할 수 있는 컨트롤러 생성 \t\t \t\t \t\t\tloop \t\t\t비디오의 재시작 여부 지정 \t\t \t\t \t\t\tpreload \t\t\t웹 문서를 열 때 동영상, 메타데이터 로드 여부 지정 auto : 모두 로드 metadata : 메타데이터만 로드 none : 모두 로드하지 않음 \t\t \t      video { display: inline; }   &lt;figure&gt;&lt;/figure&gt; : 이미지나 다이어그램 영역을 삽입하는 태그     &lt;figcation&gt; : &lt;figure&gt;에 포함되어 이미지나 다이어그램의 설명을 추가하는 태그   &lt;figure&gt;   &lt;figcaption&gt;     figure   &lt;/figcaption&gt;   &lt;img     src=\"https://cdn.pixabay.com/photo/2020/10/21/04/01/leaves-5672036_1280.png\"     alt=\"leaves-5672036_1280.png\"     title=\"이미지\"     height=\"360px\"     width=\"360px\"&gt; &lt;/figure&gt;    \t \t\tfigure \t \t   figure { display: block; } figcation { display: inline; }   # 프레임 관련 태그   &lt;iframe&gt;&lt;/iframe&gt; : 웹 문서 안에 박스형으로 프레임을 넣어 문서 안의 문서를 표현하는 태그     중첩된 브라우저 프레임 : 다른 HTML 문서를 현재 HTML 문서에 삽입    \t \t\t \t\t\tiframe 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tname \t\t\t프레임의 이름 지정 \t\t \t\t \t\t\tsrc \t\t\t삽입할 웹 문서의 주소 지정 \t\t \t\t \t\t\theight \t\t\t프레임의 높이 지정 \t\t \t\t \t\t\twidth \t\t\t프레임의 너비 지정 \t\t \t\t \t\t\tsandbox \t\t\t일기 전용으로 삽입 (Boolean) allow-form : 양식 제출 가능 allow-scripts : 스크립트 실행 가능 allow-same-origin : 같은 도메인의 리소스 사용 가능 \t\t \t\t \t\t\tframeborder \t\t\t프레임 테두리 표시 여부 지정 (Boolean) \t\t \t\t \t\t\tallowfullscreen \t\t\t프레임의 전체 화면 모드 전환 여부 지정 \t\t \t   &lt;div&gt; \t&lt;iframe \t\tsrc=\"https://github.com/pocj8ur4in\" \t\twidth=\"360\" \t\theight=\"360\" \t\tscrolling=\"no\" \t\tframeborder=\"1\" \t\tallowfullscreen=\"true\" \t\tallow=\" \t\t\tclipboard-write; \t\t\tencrypted-media; \t\t\tpicture-in-picture; \t\t\tweb-share\" \t\tsandbox=\" \t\t\tallow-same-origin \t\t\tallow-popups \t\t\tallow-scripts\" \t\t&gt; \t&lt;/iframe&gt; &lt;/div&gt;    \t \t   iframe { display: inline; }   # 스크립트 관련 태그   &lt;script&gt;&lt;/script&gt; : 외부 스크립트 파일을 참조하는 태그     외부 스크립트 파일 : javascript, CSS    \t \t\t \t\t\tscript 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tsrc \t\t\t삽입할 외부 스크립트의 주소 지정 \t\t \t\t \t\t\tasync \t\t\t스크립트의 비동기적 실행 여부 (Boolean) \t\t \t\t \t\t\tdefer \t\t\t문서 파싱 후 작동 여부 (Boolean) \t\t \t\t \t\t\ttype \t\t\t삽입할 외부 스크립트의 타입 지정 \t\t \t\t \t\t\tframeborder \t\t\t프레임 테두리 표시 여부 지정 (Boolean) \t\t \t\t \t\t\tallowfullscreen \t\t\t프레임의 전체 화면 모드 전환 여부 지정 \t\t \t   &lt;script type=\"application/ld+json\"&gt;\t&lt;!--? 구조화된 JSON-LD 데이터 스니펫 : 제목, 작성자 및 세부 정보를 Google이 수집 --&gt;   {     \"@context\": \"https://schema.org\",            \"@type\": \"website\",       \"name\": \"website_name\",       \"author\": {         \"@type\": \"Person\",         \"name\": \"Person_name\"       },       \"description\": \"website_description\",       \"url\": \"website_url\"   } &lt;/script&gt;   script { display: none; }   # 양식 관련 태그   &lt;form&gt;&lt;/form&gt; : 웹 서버에 제출하기 위한 양식의 입력값을 받는 태그     &lt;form&gt;이 다른 &lt;form&gt;을 자식 요소로 포함할 수 없음      form 태그가 동작하는 과정         사용자가 브라우저를 통해 폼이 있는 웹 문서에 방문     사용자가 브라우저를 통해 폼의 내용을 입력     폼 안에 있는 모든 데이터를 웹 서버로 전송     웹 서버는 전송받은 폼 데이터의 처리를 위해 웹 프로그램으로 전달     웹 프로그램에서 데이터를 처리하고, 결과에 따른 새로운 웹 문서를 웹 서버로 전달     웹 서버는 전송받은 새로운 웹 문서를 브라우저로 전송     브라우저는 전송받은 새로운 웹 문서를 표현       \t \t\t \t\t\tform 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tname \t\t\t폼을 식별하기 위한 고유한 이름 지정 \t\t \t\t \t\t\taccept-charset \t\t\t폼 전송에 사용할 문자 인코딩 방식 지정 \t\t \t\t \t\t\tautocomplete \t\t\t자동 완성 기능을 사용할지 여부 지정 (ON | OFF) \t\t \t\t \t\t\taction \t\t\t입력 양식에 입력된 값을 저장할 데이터베이스 문서 지정 (해당 문서는 PHP나 ASP로 작성) \t\t \t\t \t\t\tnovalidate \t\t\t양식 데이터의 유효성을 검사하지 않을지 지정 \t\t \t\t \t\t\ttarget \t\t\taction에서 지정한 스크립트 파일을 현재 창이 아닌 다른 위치에 열도록 지정 \t\t \t\t \t\t\tmethod \t\t\tHTTP 메소드 (웹 서버와의 통신 방식) 지정 (GET | POST) \t\t \t   &lt;html&gt;   &lt;body&gt;     &lt;form       action = \"http://localhost:4000/form.jsp\"       accept-charset=\"utf-8\"       name = \"person_info\"       method = \"get\"&gt;      &lt;/form&gt;   &lt;/body&gt; &lt;html&gt;  form { display: block; }   &lt;label&gt;&lt;/label&gt; : 양식에 이름을 지정하는 태그     &lt;label for=\"\"&gt; : label의 for의 값과 양식의 id의 값이 같으면 연결하는 속성   &lt;label&gt; 가능 요소 : &lt;button&gt;, &lt;input&gt;, &lt;progress&gt;, &lt;select&gt;, &lt;textarea&gt;   &lt;label for=\"input-label\"&gt;   input-text &lt;/label&gt;  &lt;input type=\"text\" id=\"input-text\"&gt;  &lt;label for=\"checkbox-label\"&gt;   checkbox-text &lt;/label&gt;  &lt;input type=\"checkbox\" id=\"checkbox-text\"&gt;    \tinput-text \t \tcheckbox-text \t   label { display: inline; }   &lt;input&gt; : 입력값을 입력받을 필드를 선언하는 태그    \t \t\t \t\t\tinput 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tname \t\t\t입력값 필드을 식별하기 위한 고유한 이름 지정 \t\t \t\t \t\t\ttype \t\t\t입력값 필드의 종류를 지정 \t\t \t    \t \t\t \t\t\tinput type 변수 \t\t\t설명 \t\t \t \t \t\t \t\t\ttext \t\t\t한 줄의 문자열 생성 (기본 변수) \t\t \t\t \t\t\tpassword \t\t\t비밀번호 생성 \t\t \t\t \t\t\trange \t\t\t지정한 범위의 숫자 생성 \t\t \t\t \t\t\tcheckbox \t\t\t선택/해제할 수 있는 항목 (중복 가능) 생성 \t\t \t\t \t\t\tradio \t\t\t선택/해제할 수 있는 항목 (중복 불가) 생성 \t\t \t\t \t\t\tsubmit \t\t\t클릭할 경우 입력값을 전송하는 버튼 생성 \t\t \t\t \t\t\tsearch \t\t\t클릭할 경우 입력값을 검색하는 버튼 생성 \t\t \t\t \t\t\treset \t\t\t클릭할 경우 입력값을 초기화하는 버튼 생성 \t\t \t\t \t\t\tfile \t\t\t파일을 업로드하는 버튼 생성 \t\t \t\t \t\t\thidden \t\t\t입력값 없이 폼과 함께 전송해야 하는 정보를 감쌈 (hidden flied) \t\t \t   &lt;input type=\"text\" name=\"text\"&gt;    \t   &lt;input type=\"password\" name=\"password\"&gt;    \t   &lt;input type=\"range\" name=\"range\"&gt;    \t   &lt;input type=\"checkbox\" name=\"checkbox\" value=\"1\"&gt;1 &lt;input type=\"checkbox\" name=\"checkbox\" value=\"2\"&gt;2 &lt;input type=\"checkbox\" name=\"checkbox\" value=\"3\"&gt;3 &lt;input type=\"checkbox\" name=\"checkbox\" value=\"4\"&gt;4 &lt;input type=\"checkbox\" name=\"checkbox\" value=\"5\"&gt;5    \t1  \t2  \t3  \t4  \t5   &lt;input type=\"radio\" name=\"radio\" value=\"1\"&gt;1 &lt;input type=\"radio\" name=\"radio\" value=\"2\"&gt;2 &lt;input type=\"radio\" name=\"radio\" value=\"3\"&gt;3 &lt;input type=\"radio\" name=\"radio\" value=\"4\"&gt;4 &lt;input type=\"radio\" name=\"radio\" value=\"5\"&gt;5    \t1  \t2  \t3  \t4  \t5   &lt;input type=\"submit\" name=\"submit\"&gt;    \t   &lt;input type=\"search\" name=\"search\"&gt;    \t   &lt;input type=\"reset\" name=\"reset\"&gt;    \t   &lt;input type=\"file\" name=\"file\"&gt;    \t      input { display: inline-block; }   &lt;button&gt;&lt;/button&gt; : 클릭 가능한 버튼을 생성하는 태그    \t \t\t \t\t\tbutton 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tautofocus \t\t\t페이지가 로드될 때 자동으로 포커싱 여부 (Boolean). 문서 내에 고유해야 함 \t\t \t\t \t\t\tdisabled \t\t\t버튼의 비활성화 여부 (Boolean) \t\t \t\t \t\t\tname \t\t\t폼 데이터와 함께 전송될 버튼의 이름을 지정 \t\t \t\t \t\t\ttype \t\t\t버튼의 종류를 지정 (button, reset, submit) \t\t \t   &lt;button name=\"button\"&gt; \t버튼 &lt;/button&gt;    \t버튼    button { display: inline-block; }   &lt;textarea&gt;&lt;/textarea&gt; : 여러 줄의 문자열 값을 입력받는 태그    \t \t\t \t\t\ttextarea 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tautofocus \t\t\t페이지가 로드될 때 자동으로 포커싱 여부 (Boolean). 문서 내에 고유해야 함 \t\t \t\t \t\t\tautocomplete \t\t\t자동 완성 기능을 사용할지 여부 지정 (ON | OFF) \t\t \t\t \t\t\tdisabled \t\t\t텍스트 에이리어의 비활성화 여부 (Boolean) \t\t \t\t \t\t\trows \t\t\t텍스트 에이리어의 행의 개수을 지정 \t\t \t\t \t\t\tcols \t\t\t텍스트 에이리어의 열의 개수을 지정 \t\t \t\t \t\t\tmaxlength \t\t\t텍스트 에이리어에 입력 가능한 최대 문자 수 \t\t \t\t \t\t\tplaceholder \t\t\t텍스트 에이리어에 입력할 문자열에 대한 힌트 \t\t \t\t \t\t\treadonly \t\t\t읽기 전용 여부 (Boolean) \t\t \t   &lt;textarea cols=\"50\" rows=\"10\"&gt;&lt;/textarea&gt;    \t      textarea { display: inline-block; }   &lt;progress&gt;&lt;/progress&gt; : 작업의 진행률을 표시하는 태그    \t \t\t \t\t\tprogress 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tmax \t\t\t작업의 총량 지정 \t\t \t\t \t\t\tvalue \t\t\t작업의 진행량 지정 \t\t \t   &lt;progress value=\"70\" max=\"100\"&gt;70 %&lt;/progress&gt;    \t70 %      progress { display: inline-block; }   &lt;select&gt;&lt;/select&gt; : 드롭다운 목록을 생성하는 태그     드롭다운 항목(&lt;option&gt;)의 드롭다운 목록(&lt;select&gt;) 제공    \t \t\t \t\t\tselect 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tautocomplete \t\t\t자동 완성 기능을 사용할지 여부 지정 (ON | OFF) \t\t \t\t \t\t\tdisabled \t\t\t드롭다운 목록의 비활성화 여부 (Boolean) \t\t \t\t \t\t\tmultiple \t\t\t다중으로 선택할지 여부 (Boolean) \t\t \t\t \t\t\tname \t\t\t드롭다운 목록의 이름 지정 \t\t \t\t \t\t\tsize \t\t\t드롭다운 목록에서 한 번에 볼 수 있는 행의 개수 \t\t \t   select { display: inline-block; }   &lt;option&gt;&lt;/option&gt; : 드롭다운 목록에 대한 드롭다운 항목을 생성하는 태그     &lt;option&gt;는 선택적 빈 태그로 사용 가능   &lt;optgroup&gt;으로 그룹화 가능    \t \t\t \t\t\toption 속성 \t\t\t설명 \t\t \t \t \t\t \t\t\tdisabled \t\t\t드롭다운 항목의 비활성화 여부 (Boolean) \t\t \t\t \t\t\tlabel \t\t\t드롭다운 항목의 제목 지정 (생략되면 포함된 텍스트를 표시) \t\t \t\t \t\t\tselected \t\t\t옵션이 선택되었음을 표시 (Boolean) \t\t \t\t \t\t\tvalue \t\t\t양식으로 제출될 값 (생략되면 포함된 텍스트를 값으로 사용) \t\t \t   &lt;form&gt;     &lt;select&gt;         &lt;option&gt;a&lt;/option&gt;         &lt;option&gt;b&lt;/option&gt;         &lt;option&gt;c&lt;/option&gt;         &lt;option&gt;d&lt;/option&gt;     &lt;/select&gt; &lt;/form&gt; &lt;form&gt;     &lt;select autofocus&gt;         &lt;option&gt;e&lt;/option&gt;         &lt;option&gt;f&lt;/option&gt;         &lt;option&gt;g&lt;/option&gt;         &lt;option&gt;h&lt;/option&gt;     &lt;/select&gt; &lt;/form&gt; &lt;form&gt;     &lt;select disabled&gt;         &lt;option&gt;i&lt;/option&gt;         &lt;option&gt;j&lt;/option&gt;         &lt;option&gt;k&lt;/option&gt;         &lt;option&gt;l&lt;/option&gt;     &lt;/select&gt; &lt;/form&gt; &lt;form&gt;     &lt;select multiple&gt;         &lt;option&gt;m&lt;/option&gt;         &lt;option&gt;n&lt;/option&gt;         &lt;option&gt;o&lt;/option&gt;         &lt;option&gt;p&lt;/option&gt;     &lt;/select&gt; &lt;/form&gt; &lt;form&gt;     &lt;select name=\"select box\" size=\"2\"&gt;         &lt;option&gt;q&lt;/option&gt;         &lt;option&gt;r&lt;/option&gt;         &lt;option&gt;s&lt;/option&gt;         &lt;option&gt;t&lt;/option&gt;     &lt;/select&gt; &lt;/form&gt;                 a         b         c         d                     e         f         g         h                     i         j         k         l                     m         n         o         p                     q         r         s         t        option, optgroup { display: block; }   &lt;fieldset&gt;&lt;/fieldset&gt; : 같은 목적의 양식을 그룹화하는 태그     &lt;legend&gt; 태그로 제목을 지정할 수 있음   &lt;form&gt;   &lt;fieldset&gt;     &lt;legend&gt;커피 사이즈&lt;/legend&gt;     &lt;label&gt;         &lt;input type=\"radio\" name=\"size\" value=\"t\" /&gt;         톨     &lt;/label&gt;     &lt;label&gt;         &lt;input type=\"radio\" name=\"size\" value=\"g\" /&gt;         그란데     &lt;/label&gt;     &lt;label&gt;         &lt;input type=\"radio\" name=\"size\" value=\"v\" /&gt;         벤티     &lt;/label&gt;   &lt;/fieldset&gt; &lt;/form&gt;           커피 사이즈                       톨                            그란데                            벤티           fieldset, legend { display: block; }  ","categories": ["Frontend"],
        "tags": ["HTML"],
        "url": "/frontend/html1/",
        "teaser": null
      },{
        "title": "[F/E] CSS",
        "excerpt":"CSS (Cascading Style Sheet) : 웹 문서가 웹 사이트에 표현되는 방법을 기술하는 스타일시트 언어         ~1996 : HTML 문서에 사용자가 원하는 스타일을 적용하고자 함       Inline Style : HTML 태그의 style 속성으로 태그의 속성을 일일이 적용   &lt;p style=\"color: blue\"&gt;     hello world &lt;/p&gt;      Inline Style Sheet : HTML 문서 내 &lt;style&gt; 태그로 한 문서의 스타일 적용   &lt;head&gt;     &lt;style&gt;         body { background-color: black; }     &lt;/style&gt; &lt;/head&gt;      1996 : 레이아웃 및 디자인 정보로 인해 HTML 문서의 구조화가 어려워진 문제를 해결하기 위해 CSS 탄생       Linking Style Sheet : 내용으로부터 스타일 정보를 분리해 별도의 스타일시트 (.css) 파일을 만들고 HTML 문서와 연결   &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;  CSS 스타일시트 (CSS Style Sheet) : 스타일을 선언하고 태그를 선택하는 CSS RuleSet의 집합     CSS 선택자 (CSS Selector) : 어떤 HTML 태그나 HTML 속성을 꾸밀지 지정   CSS 선언 (CSS declaration) : CSS 선택자에 대한 CSS 속성과 CSS 값을 정의            CSS 속성 (CSS Attributes) : 선택자가 지정한 것을 어떤 속성으로 꾸밀지 지정       CSS 변수 (CSS Arguments) : 지정된 속성을 어떻게 나타낼지 지정           CSS 선택자 {     CSS 속성 : CSS 값; /* CSS 선언 */ }  CSS 선택자 { /* 세미클론 (;)으로 선언을 구분해 여러 번의 선언 가능 */     CSS 속성1 : CSS 값1;     CSS 속성2 : CSS 값2; }   CSS 선택자 { /* 작은따옴표 ('') 혹은 큰따옴표 (\"\")으로 값의 공백 처리 */     CSS 속성1 : 'CSS 값1';     CSS 속성2 : \"CSS 값2\"; }      ! 같은 CSS 선택자나 CSS 속성이 선언되었다면? : CSS RuleSet에 대한 우선순위의 필요성    캐스케이딩 (Cascading) : 같은 CSS 선언이 여러 번 선언하였다면, 나중에 선언된 것을 적용     나중에 선언된 것이 먼저 선언된 것을 덮어버림 (Override)   CSS 선택자 { /* 나중에 선언된 CSS 속성1의 값2가 적용된다. */     CSS 속성1 : CSS 값1;     CSS 속성1 : CSS 값2; }     전역적인 것을 먼저 적용하고, 그 다음에 지역적인 것을 적용            부모 태그에서 선언된 속성은 자식 태그로 상속되어, 부모 자식에서 선언된 값이 적용된다.       자식 태그에서 상속받은 속성을 다시 선언되면, 자식 태그에서 선언된 값이 적용된다.           &lt;p style=\"color: red\"&gt;     &lt;span style=\"color: blue\"&gt;         CSS 우선순위 : span의 font-color 속성이 p의 font-color 속성보다 높다.     &lt;/span&gt; &lt;/p&gt;                 CSS 우선순위 : span의 font-color 속성이 p의 font-color 속성보다 높다.         CSS 명시도 (Specificity) : 작성된 순서가 아닌, CSS 선언에 적용되는 가중치에 따라 우선순위 적용     가중치는 네 가지 기준을 숫자로 표현 (0,0,0,0) : 제일 앞의 숫자가 높을수록 높은 우선순위를 가짐            명시도가 동일할 경우, 나중에 선언된 것을 우선해 적용 (Cascading)           p..div &gt; span { color : green;} /* 몀시도 : 0,1,0,2 */ b span {color : red;} /* 명시도 : 0,0,0,2 */      첫번째 0 : 인라인 스타일 (inline style)의 개수   세번째 0 : 클래스, 가상 클래스, 속성 선택자의 개수   두번째 0 : ID 선택자의 개수   네번째 0 : 태그 선택자, 가상 요소 선택자의 개수   !important : 기존의 우선순위를 무시하고 해당 CSS 선언을 우선해 적용   CSS 선택자 { */     CSS 속성1 : CSS 값1 !important;     CSS 속성1 : CSS 값2; }  CSS 선택자 (CSS Selector) : HTML 문서에 스타일을 입힐 요소를 선택하는 문자     여러 종류의 선택자를 중첩 가능 (p.span)   여러 종류의 선택자를 space 키로 구분해 동시에 선택 가능  (p.span p.img)   CSS 선택자 {     CSS 속성 : CSS 값; }   전체 선택자 * : 모든 요소를 선택하는 선택자   * {   color: blue; }   태그 선택자 tag : 해당 태그의 요소를 선택하는 선택자   tag {   color: aqua; }   아이디 선택자 #id : 해당 아이디의 요소를 선택하는 선택자   #tag {   color: red; }   클래스 선택자 .class : 해당 클래스의 요소를 선택하는 선택자   .class {   color: green; }   후손 선택자 (selector1) (selector2) : 해당 선택자의 모든 하위 요소 중 하나를 지정해 선택하는 선택자   div tag {      color: yellow; } ... &lt;div&gt;     &lt;tag&gt;         hello world     &lt;/tag&gt; &lt;/div&gt; &lt;div&gt;     &lt;span&gt;         &lt;tag&gt;             hello world         &lt;/tag&gt;     &lt;/span&gt; &lt;/div&gt;   자손 선택자 (selector1)&gt;(selector2) : 해당 선택자의 자식 요소 중 하나를 지정해 선택하는 선택자   div &gt; tag{      color: purple; } ... &lt;div&gt;     &lt;tag&gt;         hello world     &lt;/tag&gt; &lt;/div&gt;   형제 선택자 (selector1)~(selector2) : 해당 선택자의 형제 요소 중 하나를 지정해 선택하는 선택자   div ~ tag{      color: pink; } ... &lt;div&gt;     hello world &lt;/div&gt; &lt;tag&gt;     ! &lt;/tag&gt;   인접 형제 선택자 (selector1)+(selector2) : 선택자의 형제 중 바로 다음에 오는 요소를 선택하는 선택자   div + tag{      color: gray; } ... &lt;div&gt;     hello world &lt;/div&gt; &lt;tag&gt;     ? &lt;/tag&gt; &lt;tag&gt;     ! &lt;/tag&gt; /* 첫번째 형제 요소인 \"?\"가 회색으로 출력 */   속성 선택자 [attr] : 태그에 해당 속성이 명시되어 있는 요소들을 모두 선택하는 선택자     [attr = \"A\"] : 해당 속성이 명시되어 있는 요소들 중 값이 일치하는 것들만 선택   [attr ~= \"B\"] : 해당 속성이 명시되어 있는 요소들 (띄어쓰기로 여러 값이 저장된 요소 포함) 중 값이 일치하는 것들만 선택   [attr ^= \"C\"] : 해당 속성이 명시되어 있는 요소들 중 값을 접두사로 가지는 것들만 선택   [attr $= \"D\"] : 해당 속성이 명시되어 있는 요소들 중 값을 접미사로 가지는 것들만 선택   [attr *= \"E\"] : 해당 속성이 명시되어 있는 요소들 중 값을 포함하는 것들만 선택   tag[attributes]{      color: white; } ... &lt;tag attributes=\"true\"&gt;     hello world &lt;/tag&gt;  tag[attributes=\"attr\"]{      color: yellow; } ... &lt;tag attributes=\"attr\"&gt;     hello world &lt;/tag&gt;   가상 클래스 선택자 (Pseudo-class Selector) : 가상 클래스를 선택하는 선택자     앵커 가상 클래스 : 어떤 요소에 대한 스타일을 추가하는 선택자            link : 사용자가 이전에 방문하지 않은 요소에 대한 스타일을 추가하는 선택자       visited : 사용자가 이전에 방문하였던 요소에 대한 스타일을 추가하는 선택자       :hover : 사용자가 해당 요소에 커서를 접근시킬 때의 동적인 스타일을 추가하는 선택자       :active : 사용자가 해당 요소를 클릭할 때의 동적인 스타일을 추가하는 선택자       :focus : 사용자가 해당 요소에 키보드로 포커싱할 때의 동적인 스타일을 추가하는 선택자           a:link {     color: black; } a:visited {     color: gray; } a:hover {     color: red; } a:active {     color: gray; } a:focus {     color: yellow; }      순서 가상 클래스 : 순서가 존재하는 요소의 특정 항목에 대한 스타일을 추가하는 선택자            :first-child : li의 첫번쩨 요소에 대한 스타일를 추가하는 선택자       :last-child : li의 마지막 요소에 대한 스타일를 추가하는 선택자       :nth-child(n) : li의 n번쩨 요소에 대한 스타일를 추가하는 선택자           ol li:first-child {     border-top: none; } ol li:last-child {     border-top: none; } ol li:nth-child(2) {     border-top: none; }   가상 요소 선택자 (Pseudo-element Selector) : 가상 요소를 선택하는 선택자     선택된 요소의 태그 안에 가상 요소가 자식 요소로 위치 (::before &gt; 컨텐츠 &gt; ::after 순)   선택자::가상 요소 {     property: value; }      ::before : 요소 내용의 앞에 새 컨텐츠를 추가하는 선택자   tag::before {     content: \"Hello, \"; }      ::after : 요소 내용의 뒤에 새 컨텐츠를 추가하는 선택자   tag::after {     content: \"World! \"; }      ::first-letter : 요소의 첫번째 글자를 선택하는 선택자   tag::first-line {   color: orange; }      ::first-line : 요소의 첫번째 줄을 선택하는 선택자   tag::first-line {   color: orange; }      현재까지 배운 것을 토대로 여러 HTML 문서로 이루어진 가상의 웹사이트를 디자인한다고 가정해보자.         각각의 태그에 혹은 문서에 스타일을 적용하는 경우를 배제하고, 스타일시트에 모든 스타일 정보가 존재한다고 가정하자.     모든 HTML문서가 &lt;body&gt;, &lt;main&gt;, &lt;section&gt;, &lt;p&gt;만 존재하고, 다음의 구조를 이룬다.       &lt;body&gt;   &lt;main&gt;     &lt;section&gt;       &lt;p&gt; Hello World! &lt;/p&gt;     &lt;/section&gt;   &lt;/main&gt; &lt;/body&gt;            그리고 스타일시트에는 다음과 같은 CSS 선택자만 사용한다고 가정하자.                문서의 전반적인 스타일을 적용하기 위한 &lt;body&gt;를 지정할 선택자         메인 컨텐츠의 스타일을 적용하기 위한 &lt;main&gt;를 지정할 선택자         세부 컨텐츠의 스타일을 적용하기 위한 &lt;section&gt;를 지정할 선택자         문단의 스타일을 적용하기 위한 &lt;p&gt;를 지정할 선택자                   A는 모든 문서의 “Hello World!”를 빨간색으로 적용하고 싶어서 태그에 스타일을 적용했다.     p {    color:green; }       그런데 B가 특정 문서의 “Hello World!”를 초록색으로 적용하고 싶어서 id와 #를 사용했다.     &lt;p id=\"sec2\"&gt; Hello World! &lt;/p&gt;      #sec {    color:green; }       A가 그걸 보고     p {    color:green; }              CSS는 시대가 요구하는 의도대로 설계되었으나 산업의 급격한 발전으로 기존의 설계와 새로운 요구사항에 괴리가 발생                문서를 잘 표현하기 위해 설계된 방법 vs 어플리케이션을 잘 표현하기 위해 설계된 방법                        이를 절충하기 위해 기존의 의도와는 다른 방식으로 CSS를 사용해 화면을 표현                                     CSS가 웹 문서가 웹 사이트에 표현하는 데에서 시작되었기에 대규모의 웹 서비스를 만드는 데에 근본적인 한계점 존재                그러므로, 이를 극복하기 위한 최신 기술들을 꾸준히 학습하고, 프로젝트에 도입해야 할 필요가 있다.                          CSS 변수 (CSS variables) : CSS 사용자 속성 (CSS 일반 속성과 동일한 문법으로 변수를 정의 가능)            var() 함수 : CSS 변수값을 읽는 데에 사용       :root : CSS 변수를 전역 변수로 정의           .ex {     --variable-name: value; }  :root {        --variable-name: value; }   # 박스 모델 (Box Model) 관련 CSS 속성     모든 HTML 엘리멘트들은 박스 모양으로 구성되어 있음            마진 영역 (Margin Area)       테두리 영역 (Border Area)       패딩 영역 (Padding Area)       컨텐츠 영역 (Content Area)                         마진 영역 (Margin Area)                      테두리 영역 (Border Area)                              패딩 영역 (Padding Area)                                      컨텐츠 영역 (Content Area)                                               width, height : 박스의 가로, 세로 길이를 지정하는 속성   &lt;div style=\"     position: relative;     background-color: black;     margin-left: auto;     margin-right: auto;     width: 200px;     height: 200px;\"&gt;     &lt;div style=\"         position: absolute;         background-color: white;         margin-left: auto;         margin-right: auto;         width: 70%;         height: 70%;\"&gt;     &lt;/div&gt; &lt;/div&gt;                margin : 마진에 값을 부여하는 속성     margin-top: : 위쪽 마진에 값을 부여하는 속성   margin-right: : 오른쪽 마진에 값을 부여하는 속성   margin-bottom: : 아랫쪽 마진에 값을 부여하는 속성   margin-left: : 왼쪽 마진에 값을 부여하는 속성   .box {     margin: xx yy zz ww;     /* xx는 위쪽 마진, yy는 오른쪽 마진, zz는 아랫쪽 마진, ww는 왼쪽 마진 */     margin-top: xx;     margin-right: yy;     margin-bottom: zz;     margin-left: ww; }                 margin-top                                       margin-left                                              테두리 영역 (Border Area)                                      패딩 영역 (Padding Area)                                              컨텐츠 영역 (Content Area)                                                                margin-right                         margin-bottom        padding : 패딩에 값을 부여하는 속성     padding-top: : 위쪽 패딩에 값을 부여하는 속성   padding-right: : 오른쪽 패딩에 값을 부여하는 속성   padding-bottom: : 아랫쪽 패딩에 값을 부여하는 속성   padding-left: : 왼쪽 패딩에 값을 부여하는 속성   .box {     padding: xx yy zz ww;     /* xx는 위쪽 패딩, yy는 오른쪽 패딩, zz는 아랫쪽 패딩, ww는 왼쪽 패딩 */     padding-top: xx;     padding-right: xx;     padding-bottom: xx;     padding-left: xx; }                 마진 영역 (Margin Area)                  테두리 영역 (Border Area)              padding-top                                        padding-left                                          컨텐츠 영역 (Content Area)                           padding-right                  padding-bottom                  border : 테두리에 값을 부여하는 속성                                               border: 속성                 설명                                                             기본값                 medium, none, color                                           상속 여부                 N                                           애니메이션 여부                 Y                                           문법                                                                                                                                                                  border: 값                                     설명                                                                                                                                                                 border-width                                                                                                                                                                                                                                 border-width: 값                                                     테두리의 두께 정도 지정                                                                                                                                                                                                                                                 medium                                                     기본값                                                                                                                                                       thick                                                     기본값보다 굵게                                                                                                                                                       thin                                                     기본값보다 얇게                                                                                                                                                       %, px, em, rem                                                     직접 테두리의 두께 정도 지정                                                                                                                                                                                                                                                                                   border-style                                                                                                                                                                                                                                 border-style: 값                                                     테두리의 모양 지정                                                                                                                                                                                                                                                 none                                                     테두리를 생성하지 않음 (기본값)                                                                                                                                                       dashed, dotted, double, groove, hidden, inset,  outset, ridge, solid                                                     여러 모양의 테두리를 생성                                                                                                                                                                                                                                                                                   border-color                                     테두리의 색상 지정                                                                                                       border-radius                                     %, px, em, rem 등으로 테두리의 모서리에 대한 둥근 정도 지정                                                                                      top-left-x                                             top-right-x                                             bottom-right-x                                             bottom-left-x                                             top-left-y                                             top-right-y                                             bottom-right-y                                             bottom-left-y                                                                                                                                                                                                                                         &lt;div style=\"     background-color: black;     text-align: center;     margin-left: auto;     margin-right: auto;     padding-top: 2%;     padding-bottom: 2%;     \"&gt;     &lt;div style=\"         border: dashed 5px red;         margin-left: 5%;         margin-right: 5%;         border-radius: 25%;         padding-bottom: inherit;\"&gt;     dashed 5px red (border-radius: 25%)         &lt;div style=\"             border: dotted 3px blue;             margin-left: inherit;             margin-right: inherit;             padding-bottom: inherit;\"&gt;         dotted 3px blue             &lt;div style=\"                 border: double 7px green;                 margin-left: inherit;                 margin-right: inherit;                 padding-bottom: inherit;\"&gt;             double 7px green                 &lt;div style=\"                     border: solid 3px gray;                     margin-left: inherit;                     margin-right: inherit;                     padding-bottom: inherit;\"&gt;                     solid 3px gray                 &lt;/div&gt;             &lt;/div&gt;         &lt;/div&gt;     &lt;/div&gt; &lt;/div&gt;             dashed 5px red (border-radius: 25%)                  dotted 3px blue                          double 7px green                                      solid 3px gray                                               box-sizing : 박스 크기의 기준을 지정하는 속성                                               box-sizing: 속성                 설명                                                             기본값                 content-box                                           상속 여부                 N                                           애니메이션 여부                 N                                           문법                                                                                                                                                                  box-sizing: 값                                     설명                                                                                                                                                                 content-box                                     컨텐츠 영역을 기준으로 지정                                                                                                       border-box                                     테두리 영역을 기준으로 지정                                                                                                                                                           .cb {     box-sizing: content-box; } .bb {     box-sizing: border-box; } .iib {     box-sizing: initial; } .ihb {     box-sizing: inherit; }   # 배경 관련 CSS 속성   background-color : 배경의 색상을 지정하는 속성                                               background-color: 속성                 설명                                                             기본값                 transparent                                           상속 여부                 N                                           애니메이션 여부                 Y                                           문법                                                                                                                                                                  background-color: 값                                     설명                                                                                                                                                                 transparent                                     배경색 없음                                                                                                       color                                     배경색 지정                                                                                                                                                           &lt;div style=\"     position: relative;     background-color: black;     width: 200px;     height: 200px;\"&gt;     &lt;div style=\"         position: absolute;         background-color: white;         margin-left: auto;         margin-right: auto;         width: 70%;         height: 70%;\"&gt;         &lt;div style=\"             position: absolute;             background-color: black;             margin-left: auto;             margin-right: auto;             width: 70%;             height: 70%;\"&gt;         &lt;/div&gt;     &lt;/div&gt; &lt;/div&gt;                                  background-image : 배경 이미지를 지정하는 속성                                               background-image: 속성                 설명                                                             기본값                 none                                           상속 여부                 N                                           애니메이션 여부                 N                                           문법                                                                                                                                                                  background-image: 값                                     설명                                                                                                                                                                 none                                     배경 이미지 사용 안함                                                                                                       url(\"\")                                     배경 이미지 URL 지정                                                                                                                                                              background-attachment : 배경 이미지의 스크롤 여부를 지정하는 속성            scroll : 내용을 스크롤하면 배경 이미지는 스크롤되지 않음       fixed : 배경 이미지가 움직이지 않음       local : 내용을 스크롤하면 배경 이미지는 스크롤       initial : 현재의 속성값을 기본값으로 지정       inherit : 부모 요소의 속성값 상속           background-position : 배경 이미지의 위치를 지정하는 속성            x y : 가로와 세로 위치 지정 (left-right, center, top-bottom, %, length)       initial : 현재의 속성값을 기본값으로 지정       inherit : 부모 요소의 속성값 상속           background-size : 배경 이미지의 크기를 지정하는 속성            length : 배경 이미지의 가로와 세로 크기나 백분율을 직접 지정       cover : 가로/세로 비율을 유지하면서, 배경을 다 채울 수 있도록 이미지 조절       contain : 가로/세로 비율을 유지하면서, 배경을 벗어나지 않도록 이미지 조절       initial : 현재의 속성값을 기본값으로 지정       inherit : 부모 요소의 속성값 상속           &lt;div style=\"background-image: https://cdn.pixabay.com/photo/2020/10/21/04/01/leaves-5672036_1280.png;\"&gt;     background-image &lt;/div&gt;   overflow : 컨텐츠가 요소의 크기를 벗어날 때의 처리 방법을 지정하는 속성                                               overflow: 속성                 설명                                                             기본값                 visible                                           상속 여부                 N                                           애니메이션 여부                 N                                           문법                                                                                                                                                                  overflow: 값                                     설명                                                                                                                                                                 visible                                     박스를 넘어가도 내용을 표시                                                                                                       hidden                                     박스를 넘어간 부분은 표시하지 않음                                                                                                       scroll                                     무조건 스크롤바 표시                                                                                                       auto                                     박스를 넘어가면 스크롤바 표시                                                                                                                                                           &lt;div&gt;     &lt;div style=\"         width: 20%;         height: 150px;         background-color: black;         float: left;         overflow: visible;         margin-right: 5%;\"&gt;             visible     &lt;/div&gt;     &lt;div style=\"         width: 20%;         height: 150px;         background-color: black;         float: left;         overflow: hidden;         margin-right: 5%;\"&gt;             hidden     &lt;/div&gt;     &lt;div style=\"         width: 20%;         height: 150px;         background-color: black;         float: left;         overflow: scroll;         margin-right: 5%;\"&gt;             scroll     &lt;/div&gt;     &lt;div style=\"         width: 20%;         height: 150px;         background-color: black;         float: left;         overflow: auto;         margin-right: 5%\"&gt;             auto     &lt;/div&gt; &lt;/div&gt;                         자기가 무엇에 홀려 있음을 깨닫는다. 그 넉넉한 뱃길에 여태껏 알아보지 못하고, 숨바꼭질을 하고, 피하려 하고 총으로 쏘려고까지 한 일을 생각하면, 무엇에 씌었던 게 틀림없다. 큰 새 작은 새는 좋아서 미칠 듯이, 물속에 가라앉을 듯, 탁 스치고 지나가는가 하면, 되돌아오면서, 그렇다고 한다.                           자기가 무엇에 홀려 있음을 깨닫는다. 그 넉넉한 뱃길에 여태껏 알아보지 못하고, 숨바꼭질을 하고, 피하려 하고 총으로 쏘려고까지 한 일을 생각하면, 무엇에 씌었던 게 틀림없다. 큰 새 작은 새는 좋아서 미칠 듯이, 물속에 가라앉을 듯, 탁 스치고 지나가는가 하면, 되돌아오면서, 그렇다고 한다.                           자기가 무엇에 홀려 있음을 깨닫는다. 그 넉넉한 뱃길에 여태껏 알아보지 못하고, 숨바꼭질을 하고, 피하려 하고 총으로 쏘려고까지 한 일을 생각하면, 무엇에 씌었던 게 틀림없다. 큰 새 작은 새는 좋아서 미칠 듯이, 물속에 가라앉을 듯, 탁 스치고 지나가는가 하면, 되돌아오면서, 그렇다고 한다.                           자기가 무엇에 홀려 있음을 깨닫는다. 그 넉넉한 뱃길에 여태껏 알아보지 못하고, 숨바꼭질을 하고, 피하려 하고 총으로 쏘려고까지 한 일을 생각하면, 무엇에 씌었던 게 틀림없다. 큰 새 작은 새는 좋아서 미칠 듯이, 물속에 가라앉을 듯, 탁 스치고 지나가는가 하면, 되돌아오면서, 그렇다고 한다.         z-index : 요소들의 수직 위치를 지정하는 속성     숫자가 클수록 위에, 숫자가 작을수록 아래에 위치   // 수직 위치를 역순으로 배치 &lt;div style=\"     width: 100px; \theight: 100px; \tposition: absolute;     top: 30px; \tleft: 210px;     background-color: red;     z-index: 1;\"&gt;&lt;/div&gt; &lt;div style=\"width: 100px; \theight: 100px; \tposition: absolute;     top: 60px; \tleft: 270px;     background-color: blue;\"&gt;&lt;/div&gt; &lt;div style=\"width: 100px; \theight: 100px;     position: absolute;     top: 90px; \tleft: 240px;     background-color: green;     z-index: -1;\"&gt;&lt;/div&gt;   # 글자 관련 CSS 속성   color : 글자의 색상을 지정하는 속성                                               color: 속성                 설명                                                             기본값                 #000000                                           상속 여부                 Y                                           애니메이션 여부                 Y                                           문법                                                                                                                                                                  color: 값                                     설명                                                                                                                                                                 color                                     색상 지정                                                                                                                                                           &lt;div style=\"color:red\"&gt;     hello world &lt;/div&gt;       hello world   font-size : 글자의 크기를 지정하는 속성                                               font-size: 속성                 설명                                                             기본값                 medium                                           상속 여부                 Y                                           애니메이션 여부                 Y                                           문법                                                                                                                                                                  font-size: 값                                     설명                                                                                                                                                                 medium                                     웹 브라우저에서 정한 기본값                                                                                                       xx-small, x-small, small, large, x-large, xx-large                                     기본값에 대한 상대적인 크기                                                                                                       smaller, larger                                     부모 요소의 글자 크기에 대한 상대적인 크기                                                                                                       px                                     글자 크기를 직접 지정                                                                                                       %, em                                     부모 요소의 글자 크기에 대한 상대적인 글자 크기의 비율을 직접 지정                                                                                                       rem                                     최상위 요소의 글자 크기에 대한 상대적인 글자 크기의 비율을 직접 지정                                                                                                                                                           &lt;div style=\"font-size: xx-small\"&gt;xx-small&lt;/div&gt; &lt;div style=\"font-size: x-small\"&gt;x-small&lt;/div&gt; &lt;div style=\"font-size: small\"&gt;small&lt;/div&gt; &lt;div style=\"font-size: medium\"&gt;medium&lt;/div&gt; &lt;div style=\"font-size: large\"&gt;large&lt;/div&gt; &lt;div style=\"font-size: x-large\"&gt;x-large&lt;/div&gt; &lt;div style=\"font-size: xx-large\"&gt;xx-large&lt;/div&gt;        xx-small     x-small     small     medium     large     x-large     xx-large   &lt;div style=\"font-size: smaller\"&gt;smaller&lt;/div&gt; &lt;div&gt;medium&lt;/div&gt; &lt;div style=\"font-size: larger\"&gt;larger&lt;/div&gt;        smaller     medium     larger   &lt;div style=\"font-size: 10px\"&gt;     10px     &lt;i style=\"font-size: 200%;\"&gt;         20px         &lt;span style=\"font-size: 0.8em\"&gt;             16px             &lt;b style=\"font-size: 1rem\"&gt;                 1rem             &lt;/b&gt;         &lt;/span&gt;     &lt;/i&gt; &lt;/div&gt;        10px              20px                      16px                              1rem                              font-family : 글꼴을 지정하는 속성                                               font-family: 속성                 설명                                                             기본값                 웹 브라우저의 기본 글꼴                                           상속 여부                 Y                                           애니메이션 여부                 N                                           문법                                                                                                                                                                  font-family: 값                                     설명                                                                                                                                                                 font                                     글꼴 이름 / 글꼴 유형                                                                                                                                                           &lt;div style=\"font-family: (지정할 글꼴);\"&gt;     지정된 글꼴로 출력합니다. &lt;/div&gt;   &lt;div style=\"font-family: (지정할 글꼴1), (지정할 글꼴2);\"&gt;     지정된 글꼴1로 출력하되 (i) 해당 글꼴이 존재하지 않는다면 (ii) 표현할 수 없다면, 지정된 글꼴2로 출력합니다. &lt;/div&gt;   font-weight : 글자의 굵기 정도를 지정하는 속성     나타낼 수 있는 굵기의 정도는 글꼴마다 다름                                               font-weight: 속성                 설명                                                             기본값                 normal                                           상속 여부                 Y                                           애니메이션 여부                 Y                                           문법                                                                                                                                                                  font-weight: 값                                     설명                                                                                                                                                                 normal                                     보통 굵기 (400)                                                                                                       bold                                     굵은 굵기 (700)                                                                                                       bolder                                     상속된 값보다 굵은 크기                                                                                                       lighter                                     상속된 값보다 얇은 크기                                                                                                       number                                     굵기 정도를 직접 지정                                                                                                                                                           &lt;div style=\"font-weight: normal\"&gt;     &lt;div style=\"font-weight: lighter\"&gt;normal-lighter&lt;/div&gt;     normal     &lt;div style=\"font-weight: bolder\"&gt;normal-bolder&lt;/div&gt; &lt;/div&gt; &lt;div style=\"font-weight: bold\"&gt;     &lt;div style=\"font-weight: lighter\"&gt;bold-lighter&lt;/div&gt;     bold     &lt;div style=\"font-weight: bolder\"&gt;bold-bolder&lt;/div&gt; &lt;/div&gt;                 normal-lighter         normal         normal-bolder                   bold-lighter         bold         bold-bolder        # 텍스트 관련 CSS 속성   text-align : 텍스트를 정렬하는 속성                                               text-align: 문법                 설명                                                             left                 왼쪽 정렬                                           right                 오른쪽 정렬                                           center                 가운데 정렬                                           justify                 양쪽 정렬                              &lt;div style=\"text-align: left;\"&gt;바다는 크레파스보다 진한 푸르고 육중한 비늘을 무겁게 뒤채면서, 숨을 쉰다.&lt;/div&gt; &lt;div style=\"text-align: right;\"&gt;중립국으로 가는 석방 포로를 실은 인도 배 타고르호는, 흰 페인트로 말쑥하게 칠한 삼천 톤의 몸을 떨면서, 물건처럼 빼곡이 들어찬 동지나 바다의 훈김을 헤치며 미끄려져 간다.&lt;/div&gt; &lt;div style=\"text-align: center;\"&gt;석방 포로 이명준(李明俊)은, 오른편의 곧장 갑판으로 통한 사닥다리를 타고 내려가, 배 뒤쪽 난간에 가서, 거기에 기대어 선다.&lt;/div&gt; &lt;div style=\"text-align: justify;\"&gt;담배를 꺼내 물고 라이터를 켜댔으나 바람에 이내 꺼지고 하여, 몇 번이나 그르친 끝에, 그 자리에 쭈그리고 앉아서 오른팔로 얼굴을 가리고 간신히 댕긴다.&lt;/div&gt;        바다는 크레파스보다 진한 푸르고 육중한 비늘을 무겁게 뒤채면서, 숨을 쉰다.     중립국으로 가는 석방 포로를 실은 인도 배 타고르호는, 흰 페인트로 말쑥하게 칠한 삼천 톤의 몸을 떨면서, 물건처럼 빼곡이 들어찬 동지나 바다의 훈김을 헤치며 미끄려져 간다.     석방 포로 이명준(李明俊)은, 오른편의 곧장 갑판으로 통한 사닥다리를 타고 내려가, 배 뒤쪽 난간에 가서, 거기에 기대어 선다.     담배를 꺼내 물고 라이터를 켜댔으나 바람에 이내 꺼지고 하여, 몇 번이나 그르친 끝에, 그 자리에 쭈그리고 앉아서 오른팔로 얼굴을 가리고 간신히 댕긴다.   text-decoration : 텍스트을 꾸미는 선을 지정하는 속성                                               text-decoration: 속성                 설명                                                             기본값                 none                                           상속 여부                 N                                           애니메이션 여부                 N                                           문법                                                                                                                                                                  text-decoration: 값                                     설명                                                                                                                                                                 none                                     선을 만들지 않음                                                                                                       line-through                                     취소선 생성                                                                                                       overline                                     윗줄 생성                                                                                                       underline                                     밑줄 생성                                                                                                                                                           &lt;div style=\"text-decoration: none\"&gt;none&lt;/div&gt; &lt;div style=\"text-decoration: line-through\"&gt;line-through&lt;/div&gt; &lt;div style=\"text-decoration: overline\"&gt;overline&lt;/div&gt; &lt;div style=\"text-decoration: underline\"&gt;underline&lt;/div&gt; &lt;div style=\"text-decoration: line-through overline underline\"&gt;text-decoration&lt;/div&gt;        none     line-through     overline     underline     text-decoration   columns : 여러 개의 문단을 만드는 속성                                               columns: 속성                 설명                                                             기본값                 auto                                           속성값                 문단의 최대 개수 or 문단의 최소 가로 길이                               &lt;div style=\"columns: 3;\"&gt;자기가 무엇에 홀려 있음을 깨닫는다. 그 넉넉한 뱃길에 여태껏 알아보지 못하고, 숨바꼭질을 하고, 피하려 하고 총으로 쏘려고까지 한 일을 생각하면, 무엇에 씌었던 게 틀림없다. 큰 새 작은 새는 좋아서 미칠 듯이, 물속에 가라앉을 듯, 탁 스치고 지나가는가 하면, 되돌아오면서, 그렇다고 한다. 무덤을 이기고 온, 못 잊을 고운 각시들이, 손짓해 본다. 내 딸아. 비로소 마음이 놓인다. 옛날, 어느 벌판에서 겪은 신내림이, 문득 떠오른다. 그러자, 언젠가 전에, 이렇게 이 배를 타고 가다가, 그 벌판을 지금처럼 떠올린 일이, 그리고 딸을 부르던 일이, 이렇게 마음이 놓이던 일이 떠올랐다. 거울 속에 비친 남자는 활짝 웃고 있다.&lt;/div&gt;        자기가 무엇에 홀려 있음을 깨닫는다. 그 넉넉한 뱃길에 여태껏 알아보지 못하고, 숨바꼭질을 하고, 피하려 하고 총으로 쏘려고까지 한 일을 생각하면, 무엇에 씌었던 게 틀림없다. 큰 새 작은 새는 좋아서 미칠 듯이, 물속에 가라앉을 듯, 탁 스치고 지나가는가 하면, 되돌아오면서, 그렇다고 한다. 무덤을 이기고 온, 못 잊을 고운 각시들이, 손짓해 본다. 내 딸아. 비로소 마음이 놓인다. 옛날, 어느 벌판에서 겪은 신내림이, 문득 떠오른다. 그러자, 언젠가 전에, 이렇게 이 배를 타고 가다가, 그 벌판을 지금처럼 떠올린 일이, 그리고 딸을 부르던 일이, 이렇게 마음이 놓이던 일이 떠올랐다. 거울 속에 비친 남자는 활짝 웃고 있다.   &lt;div style=\"columns: 150px;\"&gt;자기가 무엇에 홀려 있음을 깨닫는다. 그 넉넉한 뱃길에 여태껏 알아보지 못하고, 숨바꼭질을 하고, 피하려 하고 총으로 쏘려고까지 한 일을 생각하면, 무엇에 씌었던 게 틀림없다. 큰 새 작은 새는 좋아서 미칠 듯이, 물속에 가라앉을 듯, 탁 스치고 지나가는가 하면, 되돌아오면서, 그렇다고 한다. 무덤을 이기고 온, 못 잊을 고운 각시들이, 손짓해 본다. 내 딸아. 비로소 마음이 놓인다. 옛날, 어느 벌판에서 겪은 신내림이, 문득 떠오른다. 그러자, 언젠가 전에, 이렇게 이 배를 타고 가다가, 그 벌판을 지금처럼 떠올린 일이, 그리고 딸을 부르던 일이, 이렇게 마음이 놓이던 일이 떠올랐다. 거울 속에 비친 남자는 활짝 웃고 있다.&lt;/div&gt;        자기가 무엇에 홀려 있음을 깨닫는다. 그 넉넉한 뱃길에 여태껏 알아보지 못하고, 숨바꼭질을 하고, 피하려 하고 총으로 쏘려고까지 한 일을 생각하면, 무엇에 씌었던 게 틀림없다. 큰 새 작은 새는 좋아서 미칠 듯이, 물속에 가라앉을 듯, 탁 스치고 지나가는가 하면, 되돌아오면서, 그렇다고 한다. 무덤을 이기고 온, 못 잊을 고운 각시들이, 손짓해 본다. 내 딸아. 비로소 마음이 놓인다. 옛날, 어느 벌판에서 겪은 신내림이, 문득 떠오른다. 그러자, 언젠가 전에, 이렇게 이 배를 타고 가다가, 그 벌판을 지금처럼 떠올린 일이, 그리고 딸을 부르던 일이, 이렇게 마음이 놓이던 일이 떠올랐다. 거울 속에 비친 남자는 활짝 웃고 있다.   # 애니메이션 관련 CSS 속성   transform: : 요소의 형태를 변화시키는 속성   transform: rotate( angle )  /* 요소를 angle (각의 크기)만큼 회전 (단위 : deg, turn) */ transform: rotateX( angle ) /* 가로를 축으로 회전 */ transform: rotateY( angle ) /* 세로를 축으로 회전 */  transform: translate( Xpx, Ypx ) /* 요소를 가로축, 세로축 기준으로 이동 */ transform: translateX( px ) /* 가로축을 기준으로 이동 */ transform: translateY( px ) /* 세로축을 기준으로 이동 */  transform: scale( X ) /* 가로와 세로를 모두 X배만큼 확대 */ transform: scale( X, Y ) /* 가로로 X배만큼 확대, 세로로 Y배만큼 확대 */ transform: scaleX( X ) /* 가로로 X배만큼 확대 */ transform: scaleY( Y ) /* 세로로 Y배만큼 확대 */  transform: skewX( Xdeg ) // 가로 뱡향으로 비틈 transform: skewY( Ydeg ) // 세로 뱡향으로 비틈 transform: skewX( Xdeg, Ydeg ) // 가로 뱡향으로 X도만큼, 세로 방향으로 Y도만큼 비틈   animation : 요소에 애니메이션 효과를 넣는 속성   @keyframes name { /* 애니메이션에 이름을 붙이고, 어떤 모양에서 어떤 모양으로 바꿀지 지정 */ 0% { ... } /* 시작할 때 요소의 모양 지정 */ n% { ... } /* n%일 때 요소의 모양 지정 */ 100% { ... } /* 끝날 때 요소의 모양 지정 */}  animation-name: /* 어떤 이름의 @keyframes를 사용할지 지정 */;   animation-duration: /* 애니메이션이 진행될 시간 지정 (단위: s 또는 ms) */;  animation-timing-function: /* 애니메이션의 진행 속도 지정 */   /* cubic-bezier(n,n,n,n) 함수 : 애니메이션을 3차원 베지에 곡선에 맞게 표현 */   /* linear : cubic-bezier(0,0,1,1). 애니메이션 효과가 처음부터 끝까지 일정한 속도로 진행 */   /* ease : 기본값. cubic-bezier(0.25,0.1,0.25,1). 애니메이션 효과가 천천히 시작되어 빨라졌다가 다시 느려짐 */   /* ease-in : cubic-bezier(0.42,0,1,1). 애니메이션 효과가 천천히 시작됨 */   /* ease-out : cubic-bezier(0,0,0.58,1). 애니메이션 효과가 천천히 끝남 */   /* ease-in-out : cubic-bezier(0.42,0,0.58,1). 애니메이션 효과가 천천히 시작되어 천천히 끝남 */   /* steps(1,...) 함수 : 애니메이션을 스텝에 맞게 끝어서 표현 */   /* step-start : steps(1,start). 시작하는 지점에 스텝 */   /* step-end : steps(1,end). 끝나는 지점에 스텝 */  animation-delay: /* 애니메이션이 시작하기 전에 대기하는 시간 지정 (단위: s 또는 ms) */;  animation-iteration-count: /* 애니메이션이 반복하는 횟수 지정 */;  animation-direction: /* 애니메이션이 진행하는 방향 지정 (normal | reverse | alternate | alternate-reverse) */;  animation-fill-mode: /* 애니메이션 종료 후의 상태 지정 (none | forwards | backwards | both) */;  animation-play-state : /* 애니메이션의 진행 여부 지정 (running | paused) */;   transition: : 요소에 트랜지션 효과를 넣는 속성   transition-property: /* 트랜지션의 속성 지정 (none | all | property) */;  transition-timing-function: /* 트랜지션의 진행 속도 지정 */;   /* cubic-bezier(n,n,n,n) 함수 : 애니메이션을 3차원 베지에 곡선에 맞게 표현 */   /* linear : cubic-bezier(0,0,1,1). 애니메이션 효과가 처음부터 끝까지 일정한 속도로 진행 */   /* ease : 기본값. cubic-bezier(0.25,0.1,0.25,1). 애니메이션 효과가 천천히 시작되어 빨라졌다가 다시 느려짐 */   /* ease-in : cubic-bezier(0.42,0,1,1). 애니메이션 효과가 천천히 시작됨 */   /* ease-out : cubic-bezier(0,0,0.58,1). 애니메이션 효과가 천천히 끝남 */   /* ease-in-out : cubic-bezier(0.42,0,0.58,1). 애니메이션 효과가 천천히 시작되어 천천히 끝남 */   /* steps(1,...) 함수 : 애니메이션을 스텝에 맞게 끝어서 표현 */   /* step-start : steps(1,start). 시작하는 지점에 스텝 */   /* step-end : steps(1,end). 끝나는 지점에 스텝 */  transition-duration: /* 트랜지션이 진행될 시간 지정 (단위: s 또는 ms) */;  transition-delay: /* 트랜지션이 시작하기 전에 대기하는 시간 지정 (단위: s 또는 ms) */;  ","categories": ["Frontend"],
        "tags": ["HTML","CSS"],
        "url": "/frontend/css1/",
        "teaser": null
      },{
        "title": "[Github Pages] 1. 개발자에게 개발 블로그는 왜 필요한가요?",
        "excerpt":"   내가 아직 취업 시장에 발도 담구지 않은 대학생인데 내가 개발 블로그의 필요성에 대해 논하는 것이 의미가 있는 걸까? 라는 의문이 들어 작년에 작성한 글에서는 이 부분을 짚어보지 않았다. 하지만 이 부분을 뺀 채로 블로그를 운영하다보니, 처음에 내가 가졌었던 생각이나 느낌이 희석되어 여러 가지를 이유로 들며 블로그 운영을 게을리한 것 같다. 그래서 지난 6개월간 내가 작성한 내용을 다시 정리하기 앞서, 이 부분에 대해 이야기하고자 한다.    A1. 블로그에 글을 쓰는 과정 또한 하나의 공부가 될 수 있다.  글을 쓰는 과정은 생각보다 귀찮다. 글을 쓰기 위한 소재도 미리 준비해야 하고, 그 소재에 대해 모르는 부분을 공부해야 하고, 이를 검토하는 과정 또한 거쳐야 하고… 하지만 글을 쓰는 과정은 충분히 하나의 공부가 될 수 있다. 내가 이전에 공부하거나 경함한 내용을 자세하고 정확히 설명하기 위해 노력하면서, 그 내용에 대한 나의 이해도가 올라갈 수 있다. 또한 단순히 개념으로 머릿속에 넣은 내용을 문장이나 예시로 설명하면서, 내용을 이해하는 것을 넘어서 개념을 응용하는 능력 또한 증진시킬 수 있다.        글을 쓰는 것과 같이 누군가에게 무언가를 설명하려고 노력하는 행위를 나만 성장하는 데에 있어 도움이 된다고 느낀 건 아닌지, 실용주의 프로그래머에서는 프로그래머가 고무 오리 인형에게 코드 한 줄씩 설명하는 고무 오리 디버깅으로 무언가를 설명해본 경험의 중요성을 강조한다. 이처럼 무언가를 설명해보는 경험이 계속 축적되다보면, 나중엔 무엇을 배우든간에 그것을 어떻게 설명해볼지에 대해 미리 생각해보게 될 것이다.    그리고 당연하지만, 글은 하나의 기록이 된다. 자신이 공부하고 경험한 것을 기록하는 것은 내가 기억하는 것보다 더 오래 보존된다. 나는 공부를 하거나 이런저런 자료를 참고한 것을 모으는 방법에 대해 늘 고민하곤 했는데 (즐겨찾기에 등록하는 것이나 PDF를 저장하는 것 모두 단점이 명확해 중간에 그만두었다), 코드의 주석처럼 글을 쓸 때 바로바로 참고한 내용을 링크를 걸어주는 방법이 제일 즉각적이고 직관적인 것 같다. 또한 만약 생각이나 회고을 적어둔 경우에는 내가 이런 생각을 했구나, 하면서 나중에 참고하기도 좋다.   A2. 블로그를 운영하는 것이 성장의 동기가 될 수 있다.  나는 어렸을 때부터 무언가를 수집하는 것을 좋아했다. 초등학교 때는 TCG 게임의 카드들을 수집해 컬렉터 앨범을 만드는 것을 좋아했고, 중학교 때에는 코인 홀더에 담을 프루프를 사기 위해 용돈을 모아본 적도 있다. 블로그에 글을 쓰는 것 또한 내가 인터넷이나 서적 곳곳에 퍼져 있는 지식들을 수집해 하나의 모음집을 만든다고 느꼈기에 처음 개설하였을 때부터 블로그를 운영하는 데에 애착이 갔다.       그래서 나는 blog-driven, 즉 블로그를 운영하기 위해 공부하고 경험하면서 나 또한 성장한다는 개념에 대해 긍정적으로 생각한다. 보통 블로그에 글을 쓰면서 blog-driven이 이루어진다고 생각하는데, 나는 blog-driven이 더 포괄적인 개념이라고 생각한다. 블로그를 계속해서 살아있는 상태로 유지하려면 단순히 블로그에 글을 쓰는 것만이 아닌, 블로그를 개선하고 유지보수하는 과정 또한 필요하다. 지난 6개월간 블로그를 운영하면서 알게 모르게 시행착오를 거친 부분이 꽤 되는데 웹 개발을 공부하면서 이를 블로그에 대입해 생각해보기도 하고, 블로그에 적용시켜볼 계획도 세우기도 하는 식으로 앞으로 나아가는 데에 큰 도움이 되었던 것 같다.    A3. 운영하는 블로그가 개발자에게 새로운 기회를 줄 수 있다.  내가 대학교 4학년이 되면서 느낀 점이 있다면, 나를 포장하고 홍보하는 것 또한 정말 중요하다는 것이다. 수능은 모든 학생을 일렬로 세우고 점수로 평가하지만, 사회에는 어떤 절대적인 기준이 존재하지 않으므로 사람들이 나를 평가할 수 있는 input data를 내가 스스로 가공해 제공할 필요성이 있다. 특히 개발자는 다른 직업보다 정보를 활용하는 능력이 뛰어나다보니, Github 프로필을 만들거나 포트폴리오 사이트를 만드는 것과 같이 나에 대한 정보를 공유하는 것 또한 매우 활발하다.       요즘 IT 기업들이 지원자의 개발 블로그나 Github의 주소를 요구하는 것 또한 그런 맥락일 것이다. 기업 입장에서는 모든 점에서 뛰어난 인재를 채용하고자 하겠지만, 그것은 매우 소수이다. 그래서 기업은 지원자의 잠재력 또한 확인해 평가하고자 노력한다. 그리고 이런 부분은 개발과 직접적으로 관련되어 있지만 단순한 결과물의 집합체인 이력서나 포트폴리오보다는, 성장하는 데에 있어 중요한 가치를 엿볼 수 있는 개발 블로그나 Github에 잘 들어난다.      Reference         코드쓰는사림 님이 작성하신, 개발자가 블로그를 운영해야 할 이유     productuidev 님이 작성하신, 개발자 취업준비 (포트폴리오/블로그)     ","categories": ["Github Pages"],
        "tags": [],
        "url": "/github%20pages/blog1/",
        "teaser": null
      },{
        "title": "[Github Pages] 2. 개발 블로그는 어디에 만들어야 하나요?",
        "excerpt":"   글을 시작하기 앞서, 이 내용은 매우 주관적인 판단이 들어간 서술이 많다. 나야 보시다시피 Github Pages를 사용하지만 다른 사람들은 여러 이유로 다양한 플랫폼을 사용할 것이고, 그 부분을 지적하거나 문제시하는 게 아님을 분명히 밝힌다. 이 글은 어디까지나 개발 블로그로 사용되는 여러 플랫폼에 대해 이야기해보는 과정을 통해 개발 블로그를 처음 만드는 개발자들이 이런 부분을 고려했으면 좋겠다, 는 취지로 작성된 것이다.    1. 네이버 블로그     한때는 블로그, 하면 네이버 할 만큼 국내에서 가장 많이 쓰였던 블로그 플랫폼이다. 나도 개발 관련은 아니지만 작년까지 네이버 블로그를 운영했었다. 그런 점에서 가지는 네이버 블로그의 장점은 (국내 한정) 보편성이다. 보편적으로 쓰이는 만큼 사용자 수가 많고, 대다수가 한번씩은 네이버 블로그에 글 정도는 올려보게 되는 것이다. 그리고 이전의 올드한 디자인도 개선된 편이고 카테고리 사용도 간편하다. (개인적으로 새로 도입된 웹 에디터는 좀 불편했다.)    하지만. 네이버 블로그의 가장 큰 문제는 구글에서 검색했을 때 노출이 되지 않는다는 것이다. 사실상 이 문제가 다른 모든 장점을 덮고도 남는다고 무방하다. 네이버라는 하나의 생태계에서 자체적으로 생산되는 컨텐츠를 검색할 수 있다는 것이 네이버 검색이 우리나라에서 널리 쓰이는 이유이겠지만, 개발자들 대다수가 구글을 통해 검색하는 만큼 다른 개발자들에게 내 글을 노출시키기 어렵다. (물론 블로그에 글을 올리는 목적이 조회수는 아니지만 내 글을 읽어주는 독자가 있다는 것, 그것이 적어도 내 의욕을 좌지우지하는 것 같다.)    2. 티스토리        Example         이동욱 님이 운영하시는, 기억보단 기록을      2006년에 창립되어 네이버처럼 국내에서 보편적으로 많이 쓰이는 블로그 플랫폼이다. 옛날엔 초대장 시스템이 있어서 사용자들의 접근성이 다소 떨어졌는데, 이게 사라지고 나서는 많이들 사용하는 것 같다. 예전에는 다음이 운영했는데, 다음이랑 카카오가 합병된 이후로는 카카오가 운영중인 것 같다.    개발자의 시선에서는 코드 삽입도 지원하고, 플러그인도 다양해 커스터마이징도 가능하고, 구글 노출도 되고, 거기다가 구글 애드센스도 달 수 있고… 정말 안 쓸 이유가 없다. 그렇기에 정말 많은 개발 블로그들이 개설되어 있고, 나 역시도 구글링할 때에 제일 많이 들어가는 플랫폼 중 하나이다. 그래서 가장 무난하게 개발 블로그를 시작한다면, 티스토리에서 할 것을 권하고 싶다.    아, 생각해보니 티스토리가 이런 팔방미인이 될 수 있었는지를 간략하게나마 적어두어야 할 것 같다. 티스토리가 등장하는 2000년대 중반은 막 우리나라에서 블로그라는 개념이 퍼져나가는 태동기였다. 그때는 상술한 네이버 블로그나 지금은 사라진 다음 블로그처럼 IT 기업들이 운영하는 서비스형 블로그들이 주를 이루었는데, 블로그를 정말 자유롭게 이용하기엔 회사의 약관이나 운영방침과 같은 제약이 있어 차질이 생기곤 했다. (카카오가 운영하는 티스토리 또한 이 문제에 자유롭지는 않다.)    그래서 정재훈 씨가 처음 개발하고, 이후에는 태터앤컴퍼니 (TNC)에서 외국에 존재하던 설치형 블로그를 현지화해 출시한 프로그램이 태터툴즈이었다. 태터툴즈는 기존의 설치형 블로그의 장점을 유지하면서, 한국어에 최적화된 점에서 굉장히 주목을 받았고, 그 TNC가 다음과 합작해 만든 블로그 서비스가 바로 티스토리이다. 이런 알련의 과정 속에서 탄생한 티스토리는 설치형 블로그와 서비스형 블로그의 장점이 적절히 혼합되어 있다.    참고로 TNC는 2008년 국내 최초로 구글에 인수되었고 (!), 태터툴즈는 태터툴즈 사용자 커뮤니티였던 태터네트워크재단 (TNF)에서 개발을 전담해 텍스트큐브 (TextCube)로 리브랜딩되어 현재도 운영중…이면 좋겠지만, 정식 버전은 2014년 2월에 나온 1.10.10에서 멈춘 것 같고 베타 버전도 2.0 베타 3이 마지막인 것 같다. (텍스트큐브 Github)    3. 브런치        Example         옛날개발자 님이 운영하시는, 에디의 기술블로그      브런치는 2015년에 카카오가 글쓰기에 최적화된 플랫폼을 만든다는 야심찬 목표를 갖고 오픈한 블로그 플랫폼이다. 이곳에 글을 올리려면 작가 신청을 하고 에디터팀의 승인 심사에 합격해야 한다고 한다. 그래서 브런치에서 개발 블로그를 몇개 보긴 했는데도, 솔직히 난 소설 글쓰기 플랫폼으로 알고 있었다…    하술할 미디엄을 어느 정도 벤치마킹한 것으로 보이는데, 미디엄과 달리 코드 삽입이 안되서 이미지로 캡쳐해야 한다는 점이 너무 아쉽다. 디자인이랑 폰트가 워낙 깔끔해서 글쓰기엔 특화된 느낌은 확실히 강한데, 개발 블로그로 사용하기에는 한계점이 명확해 보인다.   4. 미디엄        Example         Moon 님이 운영하시는, medium     박상권 님이 운영하시는, medium      미디엄은 2012년 에반 윌리엄스가 만든 소셜 네트워크 서비스이다. 플랫폼을 처음 보았을 때에는 트위터나 링크드인과 같은 소셜 네트워크 서비스의 느낌이 강해 보였는데, 글을 작성하려 할 때 나오는 메모장 화면이 직관적이라 굉장히 좋았다. (미디엄이 글 쓸 때 나오는 한글 폰트가 구리다는 얘기가 많은데, 확장 프로그램 깔면 해결되는 부분이라 생각해 일단 나는 고려하지 않았다.)    그런데 내가 안쓰는 이유는… 사실 처음 블로그를 만들 때 미디엄에 대해 몰랐다! 원래부터 국내 사용자 수가 적다보니 미디엄을 개발 블로그로 쓰는 분들은 더 적은 거 같다. 그리고 카테고리랑 검색 기능이 없으니, 앞서도 얘기했지만 SNS 같은 느낌이 계속 드는 것 같아서 좀 손이 잘 가지 않는다.   5. 노션        Example         younho9 님이 운영하시는, notion      나는 옛날부터 노트에 무언가를 적는 것을 선호해서 스마트폰을 산 뒤로 애플 메모, 네이버 메모, 마이크로스프트 원노트, 에버노트 순으로 메모 앱을 사용했는데 뭔가 아쉬운 점이 한두 개씩은 있엇다. 그런데 노션을 2019년즘에 처음 사용하고 나서는 너무 만족해서 쭈욱 사용하고 있다. 메모 앱으로는.    확실히 짚고 가야할 것이 있다. 노션은 블로그가 아닌 메모장이다. 그런데 메모장을 블로그로 사용하려면 그게 잘 될까? 이것저것 템플릿을 잘 가져와 쓴다고 해도 근본적인 한계가 명확하다고 생각한다.      페이지 주소가 직관적이지 않고, 페이지 제목이 바뀌면 새로운 주소를 가지게 되어 글을 다시 공유해야 한다.   하나의 페이지이므로 카테고리, 글 검색, 댓글 기능이 부재되어 있다.   페이지가 무거우면 페이지를 불러오는 로딩 과정이 매우 길다.   그러면 노션 블로그를 호스팅하면 되지 않을까? 할텐데, 도메인과 호스팅 비용이 상당히 든다. 당장 무료로 쓸 수 있는 옵션이 이렇게 많은데, 노션이 좋다고 계속해서 돈을 지출하는 것은 좀 과하지 않을까?   6. 벨로그     벨로그는 2018년 velopert 님이 개설한 개발자에 특화된 블로그 서비스이다. 유저 수가 소수였던 초창기와 달리, 국내 많은 개발자들이 유입되면서 개발자 생태계가 잘 구축되어 있고, 올라오는 정보의 양과 질 모두 좋은 편이다. 또한 코드 삽입, 마크다운 에디터 등 개발자에 특화된 요소들이 눈에 띄는 요소이다. 모두 같은 디자인이고 커스터마이징할 수 있는 요소가 없다는 부분이 단점이긴 하지만, 초심자가 개발 블로그를 만든다고 한다면 벨로그가 가장 이상적이라 생각한다.    7. 워드프레스 블로그     상술한 티스토리의 TMI 파트에도 잠깐 등장한 워드프레스는 2003년 출시된 오픈소스 기반 CMS이다. 전세계에 있는 정말 많은 사이트나 블로그들이 워드프레스를 기반으로 되어 있고, 다양한 플러그인과 테마 또한 존재한다. 그래서 2018년에 네이버 블로그에서 워드프레스 블로그로 이전을 시도한 적이 있었는데… 결과는 실패였다.    그때 실패한 가장 큰 이유는 그때 군생활이여서 무언가를 공부할 여건이 도저히 되지 않았다는 것이었다. 워드프레스를 처음 접했을 때 생각보다 시간이 걸리고 이에 대해 공부할 부분도 꽤 된다. 그리고 처음에 플러그인을 게임 애드온처럼 이것저것 설치했는데 버전 충돌이 생겨서, 다시 제거하고 하나씩 학습해보고… 거기다가 PHP나 자바스크립트에 대한 공부 또한 필수적이다. 개발자 커뮤니티에서는 이런 것을 학습곡선 (Learning Curve)이 계속 길어진다고 표현하던데… 정말 맞는 말이라고 생각한다.   8. Github Pages        Example         한재엽 님이 운영하시는, JBEE.io     이종립 님이 운영하시는, 기억 보조용 위키      Github Blog라는 하나의 서비스가 존재하는 건 아니고, Github가 제공하는 Github Pages를 이용해 Github 저장소에 블로그나 웹 사이트 같은 웹 서비스를 호스팅하는 방식이다. 아무래도 지금 내가 사용하고 있는 거기도 하고 지난 6개월간 공부하고 경험한 것도 있기에 이 부분을 조금 상세히 언급해보고자 한다.      긍정적인 점            커스터마이징의 자유도가 엄청나게 높다. 나처럼 Github Pages용 오픈 소스 테마을 이용해도 되고 아예 처음부터 설계해 만드는 것 또한 가능하다. 구글 검색에 내 블로그를 노출시킬 수도 있고, 구글 애드센스를 통해 광고를 달아줄 수도 있다.       Github에 저장소로 올라가는 방식으므로 Github와 연동이 된다. 로컬에서 블로그를 쉽게 편집하고 관리할 수 있으며, commit과 push로 글을 등록하면 된다. Github 저장소에 백업이 되어 있기 때문에 이를 다운받아 사용할 수도 있고, 필요한 경우 롤백하는 것도 가능하다.       마크다운 형식으로 작성하는 것을 지원하고, 코드 블룩이나 인용 블록 또한 지원한다. 게시글 하나하나가 .md 파일이라 나중에 플랫폼을 이전한다 하더라도 이를 다시 활용하는 것 또한 가능하다.               복합적인 점            워드프레스 블로그만큼은 아니지만, 진입장벽이 존재한다. 처음에 웹 사이트의 소스 코드를 올리거나 수정하는 작업이 필요하므로 최소한 git이랑 markdown을 어떻게 사용하는지는 알아야 한다. 블로그를 이것저것 건드려보려고 한다면 백엔드 관련 지식이 요구되고, 커스터마이징을 해보려면 간단한 프론트엔드 관련 지식 또한 필요해진다. 물론 웹 개발자를 지망한다면 이런 일련의 과정을 한번 하는 것도 도움이 된다.       Github 저장소에 올라가는 방식이므로 저장소 내의 소스 코드가 모두 공개된다. 블로그를 노출시키고 싶지만 블로그 내부까지 노출시키고 싶지 않는다면, 유료 걔정으로 전환해서 비공개로 전환해야 한다.       하나의 Github 저장소는 용량과 트래픽에 제한이 존재한다. (1GB의 최대 용량, 월 100GB의 트래픽 제한) 제한을 넘어서 사용하려면 Cloudflare과 같은 CDN을 추가로 사용해야 한다. 일단은 한도 내에서만 쓰면 무료인 것은 장점이지만, 한도를 넘어버린다면 돈을 써야하니 용량이 있는 파일을 올리는 것과 같은 경우에 주의할 필요가 있다.              부정적인 점            정적 페이지로 빌드한는 것만 지원한다. 그래서 댓글 기능을 추가할 때 외부 데이터베이스와 연동이 되지 않아 이를 위한 플러그인을 별도로 설치해야 한다. (Github가 소스 관리를 위한 서비스이니… 동적 호스팅 서비스는 AWS와 같은 클라우드 벤더나 가비아와 같은 동적 웹 호스팅 벤더를 사용하자.)       벨로그처럼 작성하는 문서 서식을 바로 렌더링해서 볼 수 없다. 프리뷰 플러그인을 사용한다 치더라도, 플러그인으로 형성된 화면과 렌더링된 화면이 일치하지 않아 결국엔 플러그인을 잘 안쓰게 된다.       글을 쓸 때 표나 이미지를 넣는 게 불편하다. 나 같은 경우에는 html과 css를 사용해 넣는데, 해당 문법을 알아도 표를 일일이 만드는 것은 굉장히 귀찮다. 이미지 같은 경우에는 외부 사이트에 업로드해 이를 호스팅하는데 그것 또한 번거로운 작업이다.              나는 Github Pages 블로그를 운영하는 것은 장단점이 매우 명확해 개개인마다의 호불호가 엄청 갈릴 수 밖에 없다고 생각한다. 실제로 Github Pages 블로그를 운영하시다가 다른 블로그 플랫폼으로 이주하시는 분들도 많이 보았고 나 또한 블로그를 개설하면서, 그리고 개설된 블로그를 운영하면서도 이주할지말지에 대해 많이 고민했었다.     그래도 내가 Github Pages 블로그를 운영하는 데에는 git을 이용해 블로그를 관리할 수 있다는 것과 블로그 운영을 통해 웹 개발의 전반적인 과정을 학습해볼 수 있다는 점이 가장 큰 이유인 것 같다. Github Pages 블로그를 개설할 때에는, 정말 아무것도 모르는 감자 (…)라서 많이 헤맸다. 그래서 처음에는 블로그와 연동되는 git에 대해 공부하고자 Do it! 지옥에서 온 문서 관리자 깃 &amp; 깃허브 입문이라는 도서를 구매해서 공부해보고, 그 다음에는 블로그를 커스터마이징해보려고 Do it! HTML+CSS+자바스크립트 웹 표준의 정석이라는 도서를 구매해서 공부해보고 이를 최대한 적용해보는 식으로 실습하였다. 이렇게 블로그를 성장시키려고 노력하는 과정 속에서 나 또한 많이 성장할 수 있었고, 앞으로도 이런 blog-driven이 잘 이루어졌으면 하는 것이 내 바램이다.      Reference         productuidev 님이 작성하신, 개발자 취업준비 (포트폴리오/블로그)     ","categories": ["Github Pages"],
        "tags": [],
        "url": "/github%20pages/blog2/",
        "teaser": null
      },{
        "title": "[Github Pages] 3. Github Pages 블로그 소개",
        "excerpt":"   사실 이전 포스트에서 Github Pages에 대한 내용이 있어 좀 중복되는 느낌이 들 수도 있다. 하지만, 이 포스트에서는 Github Pages의 원리를 짚어보고자 작성한 것이니 혹시 모르는 사람들은 한번 읽어보자.    Github Pages 블로그란?      정적 웹사이트 생성기 (SSG; Static Site Generator)   많은 사람들이 Github Pages로 블로그를 사용하고 있어 이를 블로그 서비스로 인식하기 쉽지만, 사실 Github Pages는 Github에서 제공하는 정적 웹 사이트 호스팅 서비스이다. 그리고 정적 웹 사이트 호스팅 서비스를 가능하게 하는 것이 바로 SSG이다.    SSG로 생성된 사이트는 모든 웹 페이지를 미리 생성하고, 방문자로부터 요칭이 들어오면 미리 만든 웹 페이지를 그대로 응답해준다. 그러므로 서버와 클라이언트 모두 렌더링을 위한 작업이 거의 없기 때문에, SSG로 생성된 웹 사이트는 속도가 매우 빠른 장점을 가진다. 그리고 SSG로 생성된 사이트는 미리 만들어놓은 수많은 웹 페이지로 이루어져 있는 구조라 검색엔진 최적화 (SEO; Search Engine Optimization)가 뛰어나 검색엔진이 사이트를 크롤링하는 데에 적합하다.    그러나 빌드할 때마다 모든 웹 페이지를 생성하는 작업을 매번 하다보니, 컨텐츠를 자주 업데이트하는 웹 사이트나 규모가 커 빌드 시간이 오래 걸리는 웹 사이트에서는 큰 비효율성이 발생해 SSG보다는 다른 렌더링 기술을 사용한다. 그래서 SSG는 개인 블로그와 같이 컨텐츠의 변경이 자주 일어나지 않은, 소규모 웹 사이트를 제작할 때 많이 쓰이는 기술이다. (SSG 외에도 SPA, SSR과 같은 렌더링 기술이 있는데, 달레 님께서 SPA와 SSG, 그리고 SSR이라는 글에서 잘 정리해주셨으니 참고하길 바란다.)    지금 현재 내가 사용하고 있는 Github Pages 테마인 Minimal Mistakes는 Jekyll을 정적 웹사이트 생성기로 사용해 웹 사이트를 정적으로 생성한다. Jekyll 외에도 Hexo, Hugo와 같은 여러 정적 웹사이트 생성기들이 존재하는데, 이들을 간단하게 비교해보자.      Jekyll            Ruby 기반       가장 많이 쓰이고, 한글 래퍼런스 많음       Github Pages에서 공식으로 지원 : push한 글들이 별도의 빌드 과정 없이 알아서 Publish       글이 많아질수록 전체 빌드 속도가 느려짐              Hexo            Node.js (javascript) 기반       (javascript를 써서 그런지) 한글 래퍼런스 많음       Hexo로 블로그를 만들 때 참고할 만한 글              Hugo            Golang 기반       런타임에 다른 의존성이 필요하지 않아, 빌드 과정을 포함해도 빌드 속도가 빠른 편       한글 래퍼런스는 상대적으로 적음       Hugo로 블로그를 만들 때 참고할 만한 글              지킬 (Jekyll)      사실 SSG 중에 Jekyll이 좋은 거 같아 골랐다기보단, Minimal Mistakes 테마가 내 마음에 들어서 설치했는데 구글링해보니 다들 Jekyll을 쓰더라…의 흐름으로 쓰게 된 거고, Jekyll 말고도 다른 SSG가 있는 것을 알게 된 이후에도 어차피 다 같은 SSG인데 Jekyll 말고 굳이 다른 거를 배워서 쓸 필요성을 못 느껴서 (물론 Jekyll이 문제가 많다고 느끼면 다른 SSG를 사용할지에 대해 고민해봐야 할 것이다.) Jekyll을 계속 사용하고 있긴 하다. 일단 Jekyll이 어떤 방식으로 동작하는지 정리해보겠다. (사실 SSG와 동일한 원리인데, 이를 구체화한 것으로 생각하면 된다.)    Jekyll은 동적 웹 사이트 (Dynamic Web Site)과 동일하게, 레이아웃에 해당하는 templates과 컨텐츠에 해당하는 contents를 분리해 저장한다. (이때 Jekyll에서 templates을 작성할 때 사용하는 언어가 Liquid이고, contents를 작성할 때 사용하는 언어가 markdown이다.) 하지만 동적 사이트와 달리, Jekyll은 templates와 contents을 합친 HTML 문서를 미리 빌드해 저장하고, 방문자가 요청을 보내면 정적 컨텐츠에 해당하는 HTML 문서를 전송한다.    그래서 Jekyll은 웹 사이트를 운영하기 위한 HTML 관련 지식을 몰라도, .md 파일로 문서를 작성하면 HTML 파일로 이를 변환해주는 작업을 해주며 변환된 결과물을 토대로 웹 사이트를 구축해서 서비스해준다.   깃허브 페이지 (Github Pages)   상술하였듯 Github Pages는 Github에서 제공하는 정적 사이트 호스팅 서비스로, 무료 계정에 한해 하나의 Github Pages를 무료로 제공한다. Github Pages는 연동된 Github 저장소에서 HTML, CSS, JavaScript와 같은 정적 컨텐츠를 가져와 그대로 배포하는 방식으로 작동한다. 만약 Github 저장소가 Jekyll 디렉토리의 형태로 존재한다면, Github Pages는 해당 저장소가 Jekyll로 작성된 것임을 알고 이를 Jekyll로 빌드해 배포한다.       Reference         SW developer 님이 작성하신, GitHub Pages 블로그 따라하기     Wheel 님이 작성하신, 지킬 (Jekyll)     ","categories": ["Github Pages"],
        "tags": [],
        "url": "/github%20pages/blog3/",
        "teaser": null
      },{
        "title": "[Github Pages] 4. Github Pages 블로그 개설",
        "excerpt":"   이 내용은 작년 9월 말부터 작성한 Minimal Mistakes으로 Github Blog 만들기’의 내용 일부분을 재구성한 것이다. 해당 포스트도 완성도 있는 글이고, 처음 블로그를 설정하시는 분들 또한 도움을 얻을 것이라 생각되나 그때쯤 작성한 글들 대부분이 너무 나열식으로 쓰였고, 출처에 대한 언급이 많이 부실해 (모르는 부분이 있어 찾으려 하면 출처가 없어서 나도 찾지 못한다…), 부족한 점들을 보완하기 위해 다시 작성되었다.  그리고 현재 작성자의 실행 환경의 OS가 MacOS임을 미리 밝혀둔다. 아마 근시일 내에는 기기를 바꿀 계획이 없으니, 동일한 OS를 사용하시는 분들은 그대로 진행해주시면 된다.    1. Ruby 설치  macOS는 Ruby가 기본적으로 설치되어 있으니, 터미널을 실행하고 다음 명령어를 입력해 Ruby의 설치 여부를 확인한다.   ruby -v // ruby X.X.X 출력 : 정상 설치 // \"zsh: command not found: ruby\" 출력 : 설치 오류   2. Jekyll 설치  터미널 창에 gem install 명령어를 입력해 Jekyll을 설치한다. 참고로 gem은 분산 패키지로, 라이브러리의 작성, 공개, 설치를 도와주는 시스템이다.   gem install jekyll   그리고 터미널 창에 다음 명령어를 입력해 Jekyll가 정상적으로 설치되었는지 확인한다.   jekyll -v // jekyll X.X.X 출력 : 정상 설치 // \"zsh: command not found: jekyll\" 출력 : 설치 오류   3. Jekyll theme 선택  이전 포스트에서 Jekyll은 레이아웃에 해당하는 templates과 컨텐츠에 해당하는 contents를 합쳐 HTML 문서로 미리 빌드해 저장하고, 이를 방문자에게 보여준다고 설명한 바 있다. 그런데 대부분의 블로거들은 레이아웃의 중요성은 알지만 이를 어떻게 구성해야할지 몰라 막막할 것이다. 그런 블로거들을 위해 존재하는 것이 Jekyll theme이다.    Jekyll theme은 다른 사람들이 미리 작업해놓은 templates으로, 많은 Jekyll theme들이 무료로 공개되어 있다. 무료 Jekyll 중에 사람들이 많이 사용하는 것이 minimal-mistakes이다. 간결하고 깔끔한 디자인과 꾸준한 업데이트, 그리고 무엇보다 엄청난 양의 한글 래퍼런스 (…)로 인해 나 역시도 minimal-mistakes을 기반으로 블로그를 개설하였기에, 앞으로 진행할 블로그 개설 역시 minimal-mistakes를 기반으로 진행한다.    먼저 minimal-mistakes Github 페이지에서 .zip 파일을 다운로드한 후 압축을 해제한다. 그리고 아래 사진을 참고하여 필요한 파일 및 디렉토리만 남기고 나머지는 삭제한다. (아, 기존에 존재하지 않는 _post와 _page 디렉토리는 추후에 사용할 예정이니 미리 생성해두자.)      4. 로컬에서 웹 호스팅  터미널 창에 다음 명령어를 입력해 Gemfile을 설치하기 위한 bundler를 사용해보자. 그러면 .jekyll-cache 폴더와 Gemfile.lock 파일이 생성된다.   gem install bundler   bundler 설치가 완료되면, 터미널 창에 다음 명령어를 입력해 Gemfile을 검사해 필요한 목록을 설치할 수 있다.   bundle install   이제 터미널 창에 다음 명령어를 입력하여 블로그를 로컬에서 호스팅해보자.   bundle exec jekyll serve   http://127.0.0.1:4000으로 접속하면 minimal-mistakes이 적용된 블로그 화면을 확인할 수 있다.   4. GitHub Pages에서 웹 호스팅   이제 Github에 (Github ID).github.io의 형식으로 원격 저장소를 생성하자. 다음은 내 블로그가 저장된 원격 저장소 이미지이다.      그리고 지금까지 정리한 내용들을 포함한 디렉터리를 github에 push하면, https://(Github ID).github.io를 주소로 하는 블로그가 생성된 것을 확인해볼 수 있다. 그리고 https://github.com/(Github ID)/(Github ID).github.io/actions에서 블로그가 빌드된 기록을 확인할 수 있다. 만약 원격 저장소에서 푸시된 내용에 대한 빌드 작업이 실패한다면, 그 내용의 배포가 진행되지 않은 것을 확인해볼 수 있다.      Reference         SW developer 님이 작성하신, GitHub Pages 블로그 따라하기     ","categories": ["Github Pages"],
        "tags": [],
        "url": "/github%20pages/blog4/",
        "teaser": null
      },{
        "title": "[vocawik] 4/17 진행 내용",
        "excerpt":" ","categories": ["vocawik"],
        "tags": [],
        "url": "/vocawik/vcw1/",
        "teaser": null
      },{
        "title": "[vocawik] 4/18 진행 내용",
        "excerpt":"#1. init: git 저장소 생성   먼저 작업물의 변경점과 버전을 관리하는 버전 관리 시스템 (VCS; Version Control System)을 도입할 것이다. 변경점 관리를 통해 협업하는 과정에서 누가 어떤 내용을 언제 수정했는지 확인할 수 있고, 버전 관리를 통해 작업하는 과정에서 작업물의 백업과 복구를 간편하게 수행할 수 있다. 여기서는 배포할 코드와 작업할 코드를 나눠 프로젝트를 진행할 수 있는 브랜치 (branch) 개념이 있고 대부분의 개발자에게 이미 익숙할 git을 사용하겠다.      .git 디렉터리를 생성하였다.   git이 관리하지 않을 파일을 지정하기 위해 .gitignore 파일을 생성하고, 그 내용은 gitignore.io을 참고해 작성하였다.   추가로 협업에서의 원활한 의사소통을 위한 commit message convention을 정하여, git에 커밋하는 메시지 제목과 내용에 반영하고자 한다. 유다시티 커밋 메시지 스타일 가이드를 참고해 아래의 원칙을 정하였다.   - message structure   - type: subject   - body  - type   - init : 초기 업무   - chore : 빌드 업무 및 패키지 매니저 수정   - feat : 새로운 기능 도입   - fix : 버그 수정   - docs : 문서 수정   - style : 코드 포맷팅 (크드 변경이 없는 경우)   - refactor : 코드 리펙토링   - test : 테스트 코드 추가  - subject   - 제목에 해당하는 subject는 현재시제로 50자 내외에서 작성한다.  - body   - 본문에 해당하는 body는 부연설명이 필요한 경우에만 작성한다.   그리고 Git 원격 저장소를 웹에 호스팅하는 서비스인 Git 웹 호스팅 서비스를 도입할 것이다. 이를 통해 협업하는 과정에서 작업 내용을 빠르게 공유하고, webhook 기능을 통해 pull이나 pull request 같은 이벤트에 반응하여 작업이 실행되게 할 수 있다. 여기서는 데비옵스 (DevOps) 파이프라인 자동화 툴인 Github Actions나 업무의 생성, 진행상황, 해결을 추적하는 이슈 트래커 툴인 Github Issue 등의 서비스를 지원하고 대부분의 개발자에게 이미 익숙할 github를 사용하겠다.      github 계정에 프로젝트를 저장할 원격 저장소를 만들고, 로컬 저장소의 내용을 원격 저장소에 푸시하였다.   #2. init: 프로젝트 생성   이제 웹 어플리케이션을 구현하기 위한 기술을 정할 차례이다. 사실 이 부분은 개발자 조직과 비즈니스 기획을 고려해 의사결정을 해야 하는 게 맞겠지만, 나에게 러닝커브가 적고 라이브러리 및 래퍼런스가 많이 존재하는 Java를 프로그래밍 언어로, Spring Boot를 웹 프레임워크로, Gradle을 의존성 관리 도구로 사용할 계획이다.      Gradle을 빌드하기 위한 build.gradle 파일의 plugins와 repositories를 작성하였다. .gradle 파일을 작성하는 방법은 해당 포스트와 해당 포스트를 참고하였다.   plugins {     id 'java'     id 'org.springframework.boot' version '2.7.10'     id 'io.spring.dependency-management' version '1.1.0' }  repositories {     mavenCentral() }  ","categories": ["vocawik"],
        "tags": [],
        "url": "/vocawik/vcw2/",
        "teaser": null
      },{
        "title": "[vocawik] 4/19 진행 내용",
        "excerpt":"#3. init: 멀티모듈 세팅   프로젝트의 내부를 기존의 root 모듈에 sub 모듈인 api, batch, core, domain, infrastructure, socket 모듈을 포함시킨 멀티모듈 구조로 변경하였다.      sub 모듈들을 하나의 디렉토리에서 관리할 수 있도록 settings.gradle 파일을 작성하였다.   rootProject.name = 'vw-backend' include 'vw-api' include 'vw-batch' include 'vw-core' include 'vw-domain' include 'vw-infrastructure' include 'vw-socket'      build.gradle에 subprojects와 allprojects 블록을 추가해 하위 모듈과 전체 모듈을 제어할 수 있도록 하였다.   allprojects{     repositories {         mavenCentral()     } }  subprojects {     group = 'vocawik'     version = '0.0.1-SNAPSHOT'     sourceCompatibility = '17'      apply plugin: 'java'     apply plugin: 'org.springframework.boot'     apply plugin: 'java-library'     apply plugin: 'io.spring.dependency-management'      dependencies {      }      configurations {         compileOnly {             extendsFrom annotationProcessor         }     } }      반복된 코드를 어노테이션으로 자동완성하는 lombok 라이브러리를 사용하기 위해 subprojects에 의존성을 추가하였다.   스프링 어플리케이션에서 Junit 기반 테스트가 가능하도록 subprojects에 의존성을 추가하였다.   해당 포스트를 참고해 lombok을 테스팅 환경에서 사용할 수 있도록 subprojects에 의존성을 추가하였다.   JUnit5 API를 테스팅 환경에서 사용할 수 있도록 subprojects에 의존성을 추가하였다.       dependencies {         compileOnly 'org.projectlombok:lombok'         annotationProcessor 'org.projectlombok:lombok'         testImplementation 'org.springframework.boot:spring-boot-starter-test'         testCompileOnly 'org.projectlombok:lombok'         testAnnotationProcessor 'org.projectlombok:lombok'         testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'         testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'     }      해당 포스트를 참고해 Java 단위 테스트를 위한 JUnit5 프레임워크를 위해 build.gradle을 변경하였다.   tasks.named('test') {         useJUnitPlatform() }      Task 'wrapper' not found in project ':project' 오류를 해결하고자, 해당 포스트를 참고하여 build.gradle의 subprojects에서 gradle wrapper를 사용해서 빌드 환경을 맞추었다.   task wrapper(type: Wrapper) {     gradleVersion = '4.4'         distributionUrl = distributionUrl.replace(\"bin\", \"all\") }      위의 오류를 해결하는 과정에서 Cannot add task 'wrapper' as a task with that name already exists 오류가 발생해, 해당 포스트를 참고하여 build.gradle의 subprojects에서 gradle wrapper 형식을 변경하였다.   wrapper {         gradleVersion = '4.4'         distributionUrl = distributionUrl.replace(\"bin\", \"all\") }      :prepareKotlinBuildScriptModel Task fails in a Java project 오류를 해결하고자, 해당 포스트를 참고하여 build.gradle의 subprojects에서 prepareKotlinBuildScriptModel을 새로운 task로 추가하였다.   tasks.register(\"prepareKotlinBuildScriptModel\"){}   #4. chore:spotless 적용   Junit에 대한 코드 포맷팅 및 유지보수를 위해 해당 게시글을 참고해 spotless 플러그인을 추가하였다.   id \"com.diffplug.spotless\" version \"6.16.0\"      sub 모듈에서도 spotless 플러그인이 적용되도록 해당 게시글을 참고해 spotless.gradle 파일을 생성하였다.   spotless {     version = \"6.16.0\"      java {         // 특정 파일에만 적용         target(\"**/*.java\")          // import 순서 정의         importOrder()          // 사용하지 않는 import 제거         removeUnusedImports()          // 구글 자바 포맷 적용         googleJavaFormat().aosp()          // 공백 제거         trimTrailingWhitespace()          // 끝부분 New Line 처리         endWithNewline()     } }      그리고 sub 모듈에서도 spotless 플러그인이 적용될 수 있도록 root 모듈에 spotless.gradle 파일을 적용시켰다.   apply from: \"$rootDir/spotless.gradle\"   #5. init: git hook과 gradle을 통한 spotless 자동화   앞서 spotless를 적용하긴 했는데, spotless를 실행하는 것은 코드를 작성하고 이를 커밋하는 과정에서 까먹기 쉬운 작업이다. 그래서 이 게시글처럼 git hook으로 커밋을 하기 전에 spotless를 적용하는 것을 자동화하였다.    그런데 .git는 처음에 .gitignore을 통해 제외하기로 한 디렉토리이다. 나 혼자 작업을 진행한다면 위의 내용으로 충분하겠지만, 협업에서는 모두가 같은 내용을 적용하는 것이 중요하다. 그래서 root에 pre-commit 파일을 두고, gradle task를 이용해 빌드가 이루어질 때 pre-commit 파일을 .git에 이동하는 것을 추가하였다.   #6. init: 모듈 내 application.yml 세팅   해당 게시글을 참고하여 이전에 설장한 멀티모듈 내에 프로퍼티 설정을 관리하고 환경변수를 주입할 수 있는 application.yml 파일을 생성하였다.   #6. init: swagger3 적용   해당 포스트의 내용을 참고하여, REST 웹 서버로 요청되는 URL 리스트를 문서화 및 테스트 할 수 있는 Swagger3를 Api 모듈 내에 도입하였다.      Spring Boot 2.6 이상의 환경에서 Springfox3가 실행되지 않는 오류가 발생했다. 개발자 포럼에서도 자주 언급되는 유명한 이슈인데, 아직까지도 해결되지 않았다고 한다. Spring Boot 버전을 2.6 이하로 낮추는 것이 제일 안전한 방법이겠지만, 다른 해결책이 없나 구글링해보았더니 이 포스트에서 @EnableSwagger2 어노테이션 대신 @EnableWebMvc 어노테이션을 이용해 문제를 해결하길래 나도 적용해서 해결했다.            그런데 @EnableWebMvc 어노테이션을 추가하는 건 어떤 의미를 가질까? 라는 질문에 해당 포스트의 내용을 참고해 답변해본다면, @EnableWebMvc는 Spring 프레임워크에서 여러 Config 값을 알아서 설정해주는데 아래의 오류를 일으키는 this.condition 부분도 알아서 설정해주는 것 같다.           Caused by: java.lang.NullPointerException: Cannot invoke \"org.springframework.web.servlet.mvc. condition.PatternsRequestCondition.getPatterns()\" because \"this.condition\" is null      http://localhost:8080/swagger-ui/index.html로 접속해보면 Swagger 페이지가 정상적으로 출력된다.   #8. chore:Jacoco 설정   해당 게시글을 참고해 sub 모듈에 코드 커버리지 도구인 Jacoco를 도입하였다.   apply plugin: 'jacoco'  jacoco {     toolVersion = '0.8.9' }      추후 SonarQube의 연동을 위해 jacocoTestReports task를 설정하였다. html, csv, xml 형태로 저장할 수 있게 해주고, xml 파일은 저장하는 경로를 다르게 설정하였다.   jacocoTestReport {     dependsOn test     reports {         html.enabled true         csv.enabled true         xml.enabled true         xml.destination file(\"${buildDir}/reports/jacoco.xml\")     } }      원하는 코드 커버리지를 설정하고, 커버리지를 만족하는지 여부를 확인하는 데에 쓰이는 jacocoTestCoverageVerification task를 설정하려 했으나 커버리지를 만족시키기 위해 설정해야 하는 기준을 판단하기 어려워 일단 이 내용은 코드에서 제외하였다.   jacocoTestCoverageVerification {     violationRules {         rule {             limit {                 counter = 'BRANCH'                 value = 'COVEREDRATIO'                 minimum = 0.90             }              limit {                 counter = 'LINE'                 value = 'COVEREDRATIO'                 minimum = 0.80             }              limit {                 counter = 'LINE'                 value = 'TOTALCOUNT'                 maximum = 200             }         }     } }      추가로 QueryDSL가 자동으로 생성하는 QDomain 클래스를 코드 커버리지에서 제외하였다.   jacocoTestCoverageVerification {     def Qdomains = []      for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'         Qdomains.add(qPattern + '*')     } }      그런데 ./gradlew test --console verbose으로 실행해도 빌드가 성공하지 않았는데, jacoco의 버전을 올려보라는 답변을 적용해 해결하였다.   jacoco {     toolVersion = '0.8.7' -&gt; '0.8.9' }      #9. init: sonarqube 적용  해당 게시글을 참고해, Jacoco와 비슷한 코드 커버리지 도구인 sonarqube를 프로젝트 내에 도입하였다.      풀 리퀘스트가 종료되면서 개발 서버에 빌드 파일이 배포되기 전에 소나큐브가 실행되는 것을 목표로 하므로, 차후 작성된 github action에 이를 반영할 것이다.  ","categories": ["vocawik"],
        "tags": [],
        "url": "/vocawik/vcw3/",
        "teaser": null
      },{
        "title": "[vocawik] 04/21 진행 내용",
        "excerpt":"#10. init: github action 설정      Github에서 제공하는 workflow 자동화 도구인 Github Actions을 사용해 Github flow을 관리하게 한다.            또다른 CI/CD 도구인 Jenkins와 비교한 이 게시글을 참고했을 때, 비교적 소규모 프로젝트인 우리의 경우에는 Github Action를 사용하는 게 좋을 것 같았다.       Github Action과 관련해서 해당 게시글과 해당 게시글을 참고하였다.       도커 이미지를 생성하는 것은 이 문서 내용이 좋은 것 같다.              Github flow는 해당 게시글을 참고해 아래와 같이 간단히 작성해보았다.            개인 작업은 dev 브랜치에서 분리된 feature브랜치에서 작업하고, 작업이 끝나면 dev 브랜치에 대한 pull request를 생성한다.       pull request에서 코드를 리뷰하고, 여기서 문제가 없으면 dev 브랜치로 병합한다.       dev에서 main 브랜치에 병할할 때 배포 작업을 수행한다.              이를 위해 브랜치 구성을 dev 브랜치와 main 브랜치 (default)로 변경하였다.            main 브랜치를 보호하기 위해 해당 게시글을 참고하여 Branch protection rules를 생성하였다.              2번을 수행하기 위해, CI 자동화를 위한 yml 파일을 작성하였다. 이제 작업물을 push하거나 pull request를 보내면, 레포지토리에 merge되기 전에 빌드와 테스트가 자동화되어 실행된다.            해당 게시글을 참고하여 Github Actions에서 Gradle을 캐싱할 수 있도록 하였다.       해당 게시글을 참고하여 AWS를 통한 배포 자동화 (CI)를 위해 빌드된 프로젝트를 미리 압축하도록 하였다.              3번을 수행하려면, main 브랜치에 merge할 때, 즉 pull request가 종료하는 이벤트에 대한 트리거가 있어야 하는데… 기존에는 안되었던 거 같은데 (그리고 내 생각으로도 안되는 게 맞는 거 같은데), 이 포스트에 따르면 되는 것 같아 일단 적용해보았다.   on:   pull_request:     types:       - closed  jobs:   if_merged:     if: github.event.pull_request.merged == true     runs-on: ubuntu-latest     steps:     - run: |         echo The PR was merged      또한 도커 허브에 저장소를 생성하고, 계정에 대한 토큰을 발급받아 GitHub 저장소에 secret key로 등록시켰다.   #7. fix:github workflows 수정       다소 난감한 상황이다. dev 브랜치는 이미 위의 commit을 반영된 상태인데 main 브랜치는 아직 반영되지 않은 상태이다. 그런데 main 브랜치에 commit을 적용해버린다면 dev 브랜치와는 영영 작별하는거고, dev 브랜치의 commit을 되돌리는 것은 이미 원격에 올라가서 불가능하다.            (아직 내가 혼자서 하는 부분이라 다행이지, 협엽에서 이러면 진짜진짜 혼난다…) 결국 main 브랜치를 삭제하고 dev 브랜치에서 다시 main 브랜치를 복제하는 식으로 해결했다. 즉, 이 commit은 아직 복제되기 전의 dev 브랜치에서 벌어지는 일이다.              굉장히 긴 시행착오 끝에, 도커 허브에 파일 올라가는 거까지 확인하였다. 오류 수정이라 자세한 내용은 따로 다루지 않을 것이다. 여러 포스트들을 참고해 해결했는데, 이 포스트가 제일 잘 정리된 거 같다. (AWS 배포까지 설명하시고 계시는데, 이 부분도 조만간 다룰 예정이다.)   #9. chore:CI/CD 파이프라인 설정     먼저 우리 프로젝트의 CI/CD 파이프라인은 아래 이미지와 유사하게 진행될 예정이다. 이전에 진행된 내용은 Github Action을 통해 도커 허브로 보내는 부분까지 진행되었다. 이번에는 해당 포스트와 해당 포스트를 참고하여, AWS EC2를 구축하고, 해당 EC2에 Elastic IP을 할당하였다.         도커 허브를 통해 EC2에 배포할 것이므로 사전에 도커 허브의 저장소를 만들어서 이전에 만든 Github workflow를 따라 빌드된 파일이 저장소에 업로드된 것을 확인하였다.            해당 포스트에서는 도커 허브와 AWS ECR을 비교하고 있는데, 우리의 경우에는 조금 더 익숙한 도커 허브를 사용할 계획이다.                 EC2의 인스턴스 유형은 프리티어인 t2.micro로, 운영 체제는 우분투로 설정하였다. (linux 기반 EC2는 자잘한 오류가 많다고 한다.)         아래 이미지와 같이 SSH로 접속해 EC2 내에 JDK와 CodeDeploy 플러그인을 설치하였다.         해당 포스트를 참고하여, 아래 이미지와 같이 EC2에 연결할 데이터베이스를 위해 AWS RDS를 구축하였다.            해당 RDS의 RDBMS는 MysSQL로 설정하였다.                 해당 AWS RDS의 파라미터 그룹을 변경하여 저장하였다.         아래 이미지와 같이 Intellij에서 RDS에 원격으로 접속되는 것까지 확인하였다.         EC2와 RDS의 연동을 위해 해당 게시글을 참고하여, EC2에 mysql-client를 설치하였다. 아래 이미지는 sudo mysql_secure_installation로 mysql를 초기화하였을 때 나오는 초기 설정으로, 래퍼런스가 정리되어 있지 않길래 나중에 필요할 때 확인할 수 있도록 첨부하였다.         mysql-client를 통해 EC2에서 RDS에 원격으로 접속되는 것까지 확인하였다.         추가로 GitHub Actions 또한 이를 반영해 동작하게 하기 위해, 해당 포스트를 참고하여 yml 파일을 수정하였다.   ...  - name: Application Run   uses: appleboy/ssh-action@v0.1.6   with:     host: $     username: $     key: $      script: |       sudo docker kill $       sudo docker rm -f $       sudo docker pull $/$:latest                    sudo docker run -p $:$ \\       --name $ \\       -e SPRING_DATASOURCE_URL=$ \\       -e SPRING_DATASOURCE_USERNAME=$ \\       -e SPRING_DATASOURCE_PASSWORD=$ \\       -d $/$   #10. fix:bootJar task 수정      지난번에 도커 허브에 올라온 빌드 파일을 실행했을 때 기본 Manifest 속성이 없다는 오류가 나오면서 정상적으로 작동이 되지 않는 것을 확인하였다. 찾아보니 내가 이전에 참고했던 해당 게시글처럼 오류를 해결한 경우도 있지만, 이 둘을 반대로 진행한 이 포스트와 같은 경우도 있음을 확인하였다. 왜 그럴까?            BootJar task와 Jar task는 빌드를 통해 jar 파일을 만드는 작업이다. 그런데 이 둘이 동시에 존재하는 이유는 Jar은 의존성이 포함되지 않고 소스 코드의 클래스 파일과 리소스 파일만 포함한 Plain Jar을, BootJar은 의존성까지 포함해 어플리케이션 실행이 가능한 executable Jar을 만들기 때문이다.       그러므로, 도커 이미지에 올라간 것은 Plain Jar라 실행이 되지 않는 것이라고 추측해볼 수 있다. 그래서 이를 고려해 build.gradle 파일을 수정하였다.           bootJar.enabled = true jar.enabled = false      그런데 이번엔 Execution failed for task ':bootJar'.이란 오류가 발생했다. 프로젝트의 build.gradle 파일을 보니 application이 없는 root 모듈에도 bootJar task를 실행시키는 것으로 되어 있어 수정하였다.   bootJar.enabled = false   #13. docs:Example 도메인 작성     다른 팀원들이 도메인, API, 예외 처리에 대한 코드를 작성할 때 참고할 수 있도록 Example 코드를 작성하였다. 작성한 내용은 다음과 같다. (Example 코드인만큼 실제 코드가 어떤 역할을 하는지보다는, 해당 코드의 역할에 대한 개념을 설명하는 데에 초첨을 맞춰 서술한다.)     Domain/ExampleEntity : 엔티티는 데이터베이스에 쓰일 필드와 여러 엔티티 간 연관관계를 정의한다. 아래의 2차원 테이블을 하나의 엔티티로 생각해보자. 우리는 이 테이블에 서비스에 필요한 정보를 활용할 수 있다. 이때 세로의 파란색 열 부분이 Column이 되고, 빨간색 부분과 같은 가로의 행 하나하나가 엔티티 객체라 볼 수 있다. 필드는 각각의 Column을 의미하는데, 엔티티 클래스에서 하나의 객체로 표현된다.      @GeneratedValue(strategy = GenerationType.IDENTITY)     @Id     private Long example_id;      private String example_content;      Domain/ExampleRepository : 엔티티는 위에서처럼 DB 구조를 표현한다면, 실제 DB의 값은 어떻게 접근할 수 있을까? 그리고 DB 값에 대한 CRUD는 어떻게 동작하는 것일까? 우리는 이를 위한 ExampleRepository를 인터페이스로 선언하고, JpaRepository를 상속하므로써 DB에 대한 접근 및 동작을 가능하게 해줄 예정이다.   public interface ExampleRepository extends JpaRepository&lt;ExampleEntity, Long&gt; {}      Domain/ExampleDomainService : 이제 데이터베이스에서 값을 받아왔으니, 실제 도메인에서 이루어지는 서비스를 정의할 차례이다. 당연히 DB에 접근할 수 있어야 할 것이고, Repository의 메서드를 활용한 서비스를 정의해야 한다. 여기서는 Example이므로 Repository에서 값을 찾아올 수 없는 오류를 일으키고, 정의한 오류 내용이 제대로 출력되는지 확인해보았다.   public class ExampleDomainService {     private final ExampleRepository exampleRepository;      public void exampleException() {       ...     }      public ExampleEntity exampleQuery(Long id) {       return exampleRepository                 .findById(id)                 .orElseThrow(() -&gt; new ExampleCodeException(400, \"샘플 오류!\", \"Example 도메인에서 발생한 샘플 오류입니다.\"));     }      public ExampleEntity exampleSave(String content) {       ...     } }      Common/Exception/ExampleException : 위 내용을 실제로 출력될 수 있도록 오류에 대한 포맷을 만들어보았다.   public class ExampleCodeException extends RuntimeException {     private int status;     private String code;     private String message; }      Api/ExampleApiService : 위의 내용이 내부에서 동작하는 도메인 모듈에서 이루어지는 작업이었다면, 이제 외부로 출력할 수 있게끔 Api 모듈에서 작업할 차례이다. 그런데 왜 서비스가 나오는지 의아할 수 있는데, 이 서비스는 사실 DomainService와 MVC, DTO 사이에 존재하는 서비스로, DomainService를 재활용할 수 있도록 해당 Api 계층에 의존하는 내용을 분리시킨 것이다.   public class ExampleApiService {     private final ExampleDomainService exampleDomainService;      public ExampleResponse getExample() {         ExampleEntity query = exampleDomainService.exampleQuery(1L);          return ExampleResponse.from(query);     }      public ExampleResponse createExample(){         ExampleEntity qwer = exampleDomainService.exampleSave(\"qwer\");         return ExampleResponse.from(qwer);     } }      Api/ExampleResponse : 요청 데이터 또는 응답 데이터를 하나의 객체로 주고받을 수 있는 DTO 클래스이다. 각 HandlerMethod에 대한 패러미터의 개수가 많아질 수 있고, 또 도메인 객체를 컨트롤러에서 분리하기 위해 사용하였다.   public class ExampleResponse {     private final Long id;     private final String content;      public static ExampleResponse from(ExampleEntity exampleEntity) {         return new ExampleResponse(                 exampleEntity.getExample_id(), exampleEntity.getExample_content());     } }      Api/ExampleController : 클라이언트의 요청을 직접 받을 엔드포인트 역할을 할 컨트롤러이다.   public class ExampleController {     private final ExampleApiService exampleApiService;      @GetMapping     public ExampleResponse get(){         return exampleApiService.getExample();     }      @PostMapping     public ExampleResponse create(){         return exampleApiService.createExample();     } }   #14. feat/domain:BaseTimeEntity 추가     생성 시간과 수정 시간을 자동으로 설정해주기 위해 JPA Auditing의 세부 기능 중 하나인 BaseTimeEntity를 추가하고, 이를 Example 도메인에 적용했다.            JPA Auditing은 데이터베이스에 데이터를 누가, 언제 데이터를 생성했는지, 수정했는지를 저장하는 업무를 담당한다. JPA Auditing을 이용하면 엔티티별로 동일한 필드명을 달고, 데이터를 넣어주는 코드를 중복적으로 짜지 않아도 된다.              이전에 생성한 AWS EC2의 용량을 너무 작게 설정해 (8GB), RDS는 그대로 두면서 EC2 인스턴스를 다시 생성하게 되었다. 그래서 커밋과 별개로 인스턴스에서 진행했던 작업들을 다시 진행하게 되었는데, 해당 내용은 커밋된 내용은 아니지만 시스템 구축에 관련된 작업이기에 따로 정리할 필요성을 느껴 이 부분을 다시 작성하게 되었다. (사실 이전에 생성하면서 작성된 내용과 중복되는 작업인데, 그때는 너무 러프하게 작성한 것 같아 좀 자잘하게 작성할 계획이다.)    #16, #17, #18. AWS EC2 인스턴스 설정      EC2의 인스턴스 유형은 프리티어인 t2.micro로, 용량은 15GB로 운영 체제는 우분투로 설정하였다. (linux 기반 EC2는 자잘한 오류가 많다고 한다.)  다음은 EC2 인스턴스 생성과 관련하여 설정한 부분이다.            IntelliJ나 터미널 등의 SSH 클라이언트 접속을 위한 프라이빗 키 파일을 생성하였다.       인스턴스에 대한 보안 그룹을 생성해, 인바운드 규칙과 아웃바운드 규칙을 지정하였다.       탄력적 IP 주소를 할당받아, 이를 인스턴스에 연결하였다.       IAM 역할을 변경하여 추후 연결할 데이터베이스 서버와 이미지 서버에 접근할 수 있게끔 하였다.                 SSH에 접속하는 과정에서 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!라는 오류 메시지를 띄우면서, RSA 공유키 충돌 문제가 발생하였다. 그래서 이 게시글을 참고하여 known_hosts 파일을 지웠다.   rm /root/.ssh/known_hosts       SSH 클라이언트에 접속하여 사용자가 root 권한을 빌린다.   sudo su      패키지를 최신으로 업데이트하기 위해 이에 대한 확인 및 실행을 주기적으로 한다.            패키지를 업데이트할 때나 패키지를 설치할 때마다 계속 핑크색 화면이랑 이런저런 log가 계속 나오는 게 신경쓰여 해당 게시글을 needrestart를 제거하고, Kernel Hint와 daemon 재시작 권고 설정 역시 비활성화하였다.           apt update &amp;&amp; sudo apt upgrade      그런데 일괄적으로 업데이트가 안되는 패키지가 있길래, 업그레이드 가능한 패키지를 확인하고 이를 개별로 설치하였다.   apt list --upgradable apt install &lt;패키지명&gt;      (이전에 미처 체크하지 못한…) 디스크별 용량을 주기적으로 확인해두자.   df -h      AWS 서비스를 관리할 수 있도록 AWS CLI를 설치하였다. 이전에 IAM 역할을 잘 변경했다면, s3나 rds 명령어도 잘 작동될 것이다.   apt install awscli      SpringBoot 프로젝트를 빌드할 수 있도록 JDK를 설치하였다.   apt install openjdk-17-jdk java -version javac -version      추가로 vim ~/.bashrc으로 JDK의 환경변수를 설정하고, source ~/.bashrc로 이를 적용하였다. (변경된 내용은 echo $JAVA_HOME로 확인해볼 수 있다.)   export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java)))) export PATH=$PATH:$JAVA_HOME/bin      아래의 명령어를 이용하여 도커를 설치하였는데, Job for docker.service failed because the control process exited with error code라는 오류가 발생하면서 도커가 실행되지 않아 해당 게시글을 통해 해결하였다.   apt install docker.io  systemctl start docker systemctl enable docker      이전에 프리티어가 메모리가 1기가밖에 안되어 소나큐브를 실행만 하면 계속 튕기는 일이 발생하였다. 사실 이런 일은 처음이라 감도 못 잡았다가 이 게시글로 어떤 일이 벌어지는지 대충이나마 이해하게 되었다. 그래서 이번에는 해당 게시글로 Swap File을 이용해 EC2 메모리 부족 현상을 해결해보고자 하였다.            스왑된 메모리는 free 명령어로 확인해볼 수 있다.       top 명령어로 메모리 할당량을 프로세스 별로 확인해볼 수 있다.           dd if=/dev/zero of=/swapfile bs=128M count=16 chmod 600 /swapfile mkswap /swapfile swapon /swapfile      스왑된 메모리가 자동으로 마운트가 가능할 수 있도록 vi /etc/fstab으로 /etc/fstab 파일의 맨 밑줄에 해당 명령어를 작성하였다.   /swapfile swap swap defaults 0 0      그리고 톰캣을 설치하였는데, 이 게시글에 잘 정리되어 있어 이를 그대로 작업하였다. (아, JAVA 환경변수는 이미 설정하였으므로 해당 부분만 제외하였다.)            톰캣을 매번 재시작할 수 있도록 이 게시글을 참고하였는데, 스크립트를 실행하는 과정에서 files have no installation config라는 오류가 발생하였다. 구글링해본 결과 Install 섹션을 활성화해야 한다고 하여 아래의 내용을 스크립트 파일에 추가하였다.           [Install] WantedBy=multi-user.target      여러 개의 도커 컨테이너의 실행을 한 번에 관리할 수 있도록 도커 컴포즈를 설치하였다.   curl -L \"https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose  docker-compose --version      도커로 SonarQube를 설치하였다. (사실 도커로 설치하지 않고 sonarqube를 설치한다면 아래의 작업들을 모두 진행해야 한다. 왜 아냐고? 다 했으니까… 근데 내가 설치한 자바 버전이랑 차이가 있어서 계속 오류가 났다.)            Java 설치, 환경설정       DB 설치       SonarQube에서 요구하는 DB table 생성       DB 계정 생성 및 권한설정       SonarQube 설치       SonarQube에 DB 정보 설정           docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 sonarqube      그리고 이에 맞춰 Github workflow를 수정하였는데, Permission denied(public key)라는 문구를 띄우면서 Github Actions이 제대로 동작하지 않아 여러 커밋을 보냈다. 근데 원인은 Actions secrets and variables를 잘못 작성한 것이였다; 꼭, -BEGIN-와 -END- 부분도 지우지 말고 넣자.   -----BEGIN OPENSSH PRIVATE KEY----- ... -----END OPENSSH PRIVATE KEY-----  ","categories": ["vocawik"],
        "tags": [],
        "url": "/vocawik/vcw4/",
        "teaser": null
      },{
        "title": "[vocawik] 04/23 진행 내용",
        "excerpt":" ","categories": ["vocawik"],
        "tags": [],
        "url": "/vocawik/vcw5/",
        "teaser": null
      }]
